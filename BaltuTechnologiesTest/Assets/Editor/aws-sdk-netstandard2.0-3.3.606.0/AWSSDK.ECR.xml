<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AWSSDK.ECR</name>
    </assembly>
    <members>
        <member name="T:Amazon.ECR.AmazonECRConfig">
            <summary>
            Configuration for accessing Amazon ECR service
            </summary>
        </member>
        <member name="M:Amazon.ECR.AmazonECRConfig.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Amazon.ECR.AmazonECRConfig.RegionEndpointServiceName">
            <summary>
            The constant used to lookup in the region hash the endpoint.
            </summary>
        </member>
        <member name="P:Amazon.ECR.AmazonECRConfig.ServiceVersion">
            <summary>
            Gets the ServiceVersion property.
            </summary>
        </member>
        <member name="P:Amazon.ECR.AmazonECRConfig.UserAgent">
            <summary>
            Gets the value of UserAgent property.
            </summary>
        </member>
        <member name="T:Amazon.ECR.AmazonECRException">
            <summary>
             Common exception for the ECR service.
             </summary>
        </member>
        <member name="M:Amazon.ECR.AmazonECRException.#ctor(System.String)">
            <summary>
            Construct instance of AmazonECRException
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Amazon.ECR.AmazonECRException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of AmazonECRException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECR.AmazonECRException.#ctor(System.Exception)">
            <summary>
            Construct instance of AmazonECRException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECR.AmazonECRException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of AmazonECRException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECR.AmazonECRException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of AmazonECRException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.ECR.Internal.AmazonECRMetadata">
            <summary>
            Service metadata for  Amazon ECR service
            </summary>
        </member>
        <member name="P:Amazon.ECR.Internal.AmazonECRMetadata.ServiceId">
            <summary>
            Gets the value of the Service Id.
            </summary>
        </member>
        <member name="P:Amazon.ECR.Internal.AmazonECRMetadata.OperationNameMapping">
            <summary>
            Gets the dictionary that gives mapping of renamed operations
            </summary>
        </member>
        <member name="T:Amazon.ECR.AmazonECRRequest">
            <summary>
            Base class for ECR operation requests.
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.AuthorizationData">
            <summary>
            An object representing authorization data for an Amazon ECR registry.
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.AuthorizationData.AuthorizationToken">
            <summary>
            Gets and sets the property AuthorizationToken. 
            <para>
            A base64-encoded string that contains authorization data for the specified Amazon
            ECR registry. When the string is decoded, it is presented in the format <code>user:password</code>
            for private registry authentication using <code>docker login</code>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.AuthorizationData.ExpiresAt">
            <summary>
            Gets and sets the property ExpiresAt. 
            <para>
            The Unix time in seconds and milliseconds when the authorization token expires. Authorization
            tokens are valid for 12 hours.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.AuthorizationData.ProxyEndpoint">
            <summary>
            Gets and sets the property ProxyEndpoint. 
            <para>
            The registry URL to use for this authorization token in a <code>docker login</code>
            command. The Amazon ECR registry URL format is <code>https://aws_account_id.dkr.ecr.region.amazonaws.com</code>.
            For example, <code>https://012345678910.dkr.ecr.us-east-1.amazonaws.com</code>.. 
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.BatchCheckLayerAvailabilityRequest">
            <summary>
            Container for the parameters to the BatchCheckLayerAvailability operation.
            Check the availability of multiple image layers in a specified registry and repository.
            
             <note> 
            <para>
            This operation is used by the Amazon ECR proxy, and it is not intended for general
            use by customers for pulling and pushing images. In most cases, you should use the
            <code>docker</code> CLI to pull, tag, and push images.
            </para>
             </note>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.BatchCheckLayerAvailabilityRequest.LayerDigests">
            <summary>
            Gets and sets the property LayerDigests. 
            <para>
            The digests of the image layers to check.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.BatchCheckLayerAvailabilityRequest.RegistryId">
            <summary>
            Gets and sets the property RegistryId. 
            <para>
            The AWS account ID associated with the registry that contains the image layers to
            check. If you do not specify a registry, the default registry is assumed.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.BatchCheckLayerAvailabilityRequest.RepositoryName">
            <summary>
            Gets and sets the property RepositoryName. 
            <para>
            The name of the repository that is associated with the image layers to check.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.BatchCheckLayerAvailabilityResponse">
            <summary>
            This is the response object from the BatchCheckLayerAvailability operation.
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.BatchCheckLayerAvailabilityResponse.Failures">
            <summary>
            Gets and sets the property Failures. 
            <para>
            Any failures associated with the call.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.BatchCheckLayerAvailabilityResponse.Layers">
            <summary>
            Gets and sets the property Layers. 
            <para>
            A list of image layer objects corresponding to the image layer references in the request.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.BatchDeleteImageRequest">
            <summary>
            Container for the parameters to the BatchDeleteImage operation.
            Deletes a list of specified images within a specified repository. Images are specified
            with either <code>imageTag</code> or <code>imageDigest</code>.
            
             
            <para>
            You can remove a tag from an image by specifying the image's tag in your request.
            When you remove the last tag from an image, the image is deleted from your repository.
            </para>
             
            <para>
            You can completely delete an image (and all of its tags) by specifying the image's
            digest in your request.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.BatchDeleteImageRequest.ImageIds">
            <summary>
            Gets and sets the property ImageIds. 
            <para>
            A list of image ID references that correspond to images to delete. The format of the
            <code>imageIds</code> reference is <code>imageTag=tag</code> or <code>imageDigest=digest</code>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.BatchDeleteImageRequest.RegistryId">
            <summary>
            Gets and sets the property RegistryId. 
            <para>
            The AWS account ID associated with the registry that contains the image to delete.
            If you do not specify a registry, the default registry is assumed.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.BatchDeleteImageRequest.RepositoryName">
            <summary>
            Gets and sets the property RepositoryName. 
            <para>
            The repository that contains the image to delete.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.BatchDeleteImageResponse">
            <summary>
            This is the response object from the BatchDeleteImage operation.
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.BatchDeleteImageResponse.Failures">
            <summary>
            Gets and sets the property Failures. 
            <para>
            Any failures associated with the call.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.BatchDeleteImageResponse.ImageIds">
            <summary>
            Gets and sets the property ImageIds. 
            <para>
            The image IDs of the deleted images.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.BatchGetImageRequest">
            <summary>
            Container for the parameters to the BatchGetImage operation.
            Gets detailed information for specified images within a specified repository. Images
            are specified with either <code>imageTag</code> or <code>imageDigest</code>.
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.BatchGetImageRequest.AcceptedMediaTypes">
            <summary>
            Gets and sets the property AcceptedMediaTypes. 
            <para>
            The accepted media types for the request.
            </para>
             
            <para>
            Valid values: <code>application/vnd.docker.distribution.manifest.v1+json</code> |
            <code>application/vnd.docker.distribution.manifest.v2+json</code> | <code>application/vnd.oci.image.manifest.v1+json</code>
            
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.BatchGetImageRequest.ImageIds">
            <summary>
            Gets and sets the property ImageIds. 
            <para>
            A list of image ID references that correspond to images to describe. The format of
            the <code>imageIds</code> reference is <code>imageTag=tag</code> or <code>imageDigest=digest</code>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.BatchGetImageRequest.RegistryId">
            <summary>
            Gets and sets the property RegistryId. 
            <para>
            The AWS account ID associated with the registry that contains the images to describe.
            If you do not specify a registry, the default registry is assumed.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.BatchGetImageRequest.RepositoryName">
            <summary>
            Gets and sets the property RepositoryName. 
            <para>
            The repository that contains the images to describe.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.BatchGetImageResponse">
            <summary>
            This is the response object from the BatchGetImage operation.
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.BatchGetImageResponse.Failures">
            <summary>
            Gets and sets the property Failures. 
            <para>
            Any failures associated with the call.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.BatchGetImageResponse.Images">
            <summary>
            Gets and sets the property Images. 
            <para>
            A list of image objects corresponding to the image references in the request.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.CompleteLayerUploadRequest">
            <summary>
            Container for the parameters to the CompleteLayerUpload operation.
            Informs Amazon ECR that the image layer upload has completed for a specified registry,
            repository name, and upload ID. You can optionally provide a <code>sha256</code> digest
            of the image layer for data validation purposes.
            
             <note> 
            <para>
            This operation is used by the Amazon ECR proxy, and it is not intended for general
            use by customers for pulling and pushing images. In most cases, you should use the
            <code>docker</code> CLI to pull, tag, and push images.
            </para>
             </note>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.CompleteLayerUploadRequest.LayerDigests">
            <summary>
            Gets and sets the property LayerDigests. 
            <para>
            The <code>sha256</code> digest of the image layer.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.CompleteLayerUploadRequest.RegistryId">
            <summary>
            Gets and sets the property RegistryId. 
            <para>
            The AWS account ID associated with the registry to which to upload layers. If you
            do not specify a registry, the default registry is assumed.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.CompleteLayerUploadRequest.RepositoryName">
            <summary>
            Gets and sets the property RepositoryName. 
            <para>
            The name of the repository to associate with the image layer.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.CompleteLayerUploadRequest.UploadId">
            <summary>
            Gets and sets the property UploadId. 
            <para>
            The upload ID from a previous <a>InitiateLayerUpload</a> operation to associate with
            the image layer.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.CompleteLayerUploadResponse">
            <summary>
            This is the response object from the CompleteLayerUpload operation.
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.CompleteLayerUploadResponse.LayerDigest">
            <summary>
            Gets and sets the property LayerDigest. 
            <para>
            The <code>sha256</code> digest of the image layer.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.CompleteLayerUploadResponse.RegistryId">
            <summary>
            Gets and sets the property RegistryId. 
            <para>
            The registry ID associated with the request.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.CompleteLayerUploadResponse.RepositoryName">
            <summary>
            Gets and sets the property RepositoryName. 
            <para>
            The repository name associated with the request.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.CompleteLayerUploadResponse.UploadId">
            <summary>
            Gets and sets the property UploadId. 
            <para>
            The upload ID associated with the layer.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.CreateRepositoryRequest">
            <summary>
            Container for the parameters to the CreateRepository operation.
            Creates an image repository.
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.CreateRepositoryRequest.ImageTagMutability">
            <summary>
            Gets and sets the property ImageTagMutability. 
            <para>
            The tag mutability setting for the repository. If this parameter is omitted, the default
            setting of <code>MUTABLE</code> will be used which will allow image tags to be overwritten.
            If <code>IMMUTABLE</code> is specified, all image tags within the repository will
            be immutable which will prevent them from being overwritten.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.CreateRepositoryRequest.RepositoryName">
            <summary>
            Gets and sets the property RepositoryName. 
            <para>
            The name to use for the repository. The repository name may be specified on its own
            (such as <code>nginx-web-app</code>) or it can be prepended with a namespace to group
            the repository into a category (such as <code>project-a/nginx-web-app</code>).
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.CreateRepositoryRequest.Tags">
            <summary>
            Gets and sets the property Tags. 
            <para>
            The metadata that you apply to the repository to help you categorize and organize
            them. Each tag consists of a key and an optional value, both of which you define.
            Tag keys can have a maximum character length of 128 characters, and tag values can
            have a maximum length of 256 characters.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.CreateRepositoryResponse">
            <summary>
            This is the response object from the CreateRepository operation.
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.CreateRepositoryResponse.Repository">
            <summary>
            Gets and sets the property Repository. 
            <para>
            The repository that was created.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.DeleteLifecyclePolicyRequest">
            <summary>
            Container for the parameters to the DeleteLifecyclePolicy operation.
            Deletes the specified lifecycle policy.
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.DeleteLifecyclePolicyRequest.RegistryId">
            <summary>
            Gets and sets the property RegistryId. 
            <para>
            The AWS account ID associated with the registry that contains the repository. If you
            do not specify a registry, the default registry is assumed.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.DeleteLifecyclePolicyRequest.RepositoryName">
            <summary>
            Gets and sets the property RepositoryName. 
            <para>
            The name of the repository.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.DeleteLifecyclePolicyResponse">
            <summary>
            This is the response object from the DeleteLifecyclePolicy operation.
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.DeleteLifecyclePolicyResponse.LastEvaluatedAt">
            <summary>
            Gets and sets the property LastEvaluatedAt. 
            <para>
            The time stamp of the last time that the lifecycle policy was run.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.DeleteLifecyclePolicyResponse.LifecyclePolicyText">
            <summary>
            Gets and sets the property LifecyclePolicyText. 
            <para>
            The JSON lifecycle policy text.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.DeleteLifecyclePolicyResponse.RegistryId">
            <summary>
            Gets and sets the property RegistryId. 
            <para>
            The registry ID associated with the request.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.DeleteLifecyclePolicyResponse.RepositoryName">
            <summary>
            Gets and sets the property RepositoryName. 
            <para>
            The repository name associated with the request.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.DeleteRepositoryPolicyRequest">
            <summary>
            Container for the parameters to the DeleteRepositoryPolicy operation.
            Deletes the repository policy from a specified repository.
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.DeleteRepositoryPolicyRequest.RegistryId">
            <summary>
            Gets and sets the property RegistryId. 
            <para>
            The AWS account ID associated with the registry that contains the repository policy
            to delete. If you do not specify a registry, the default registry is assumed.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.DeleteRepositoryPolicyRequest.RepositoryName">
            <summary>
            Gets and sets the property RepositoryName. 
            <para>
            The name of the repository that is associated with the repository policy to delete.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.DeleteRepositoryPolicyResponse">
            <summary>
            This is the response object from the DeleteRepositoryPolicy operation.
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.DeleteRepositoryPolicyResponse.PolicyText">
            <summary>
            Gets and sets the property PolicyText. 
            <para>
            The JSON repository policy that was deleted from the repository.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.DeleteRepositoryPolicyResponse.RegistryId">
            <summary>
            Gets and sets the property RegistryId. 
            <para>
            The registry ID associated with the request.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.DeleteRepositoryPolicyResponse.RepositoryName">
            <summary>
            Gets and sets the property RepositoryName. 
            <para>
            The repository name associated with the request.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.DeleteRepositoryRequest">
            <summary>
            Container for the parameters to the DeleteRepository operation.
            Deletes an existing image repository. If a repository contains images, you must use
            the <code>force</code> option to delete it.
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.DeleteRepositoryRequest.Force">
            <summary>
            Gets and sets the property Force. 
            <para>
             If a repository contains images, forces the deletion.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.DeleteRepositoryRequest.RegistryId">
            <summary>
            Gets and sets the property RegistryId. 
            <para>
            The AWS account ID associated with the registry that contains the repository to delete.
            If you do not specify a registry, the default registry is assumed.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.DeleteRepositoryRequest.RepositoryName">
            <summary>
            Gets and sets the property RepositoryName. 
            <para>
            The name of the repository to delete.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.DeleteRepositoryResponse">
            <summary>
            This is the response object from the DeleteRepository operation.
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.DeleteRepositoryResponse.Repository">
            <summary>
            Gets and sets the property Repository. 
            <para>
            The repository that was deleted.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.DescribeImagesFilter">
            <summary>
            An object representing a filter on a <a>DescribeImages</a> operation.
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.DescribeImagesFilter.TagStatus">
            <summary>
            Gets and sets the property TagStatus. 
            <para>
            The tag status with which to filter your <a>DescribeImages</a> results. You can filter
            results based on whether they are <code>TAGGED</code> or <code>UNTAGGED</code>.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.DescribeImagesRequest">
            <summary>
            Container for the parameters to the DescribeImages operation.
            Returns metadata about the images in a repository, including image size, image tags,
            and creation date.
            
             <note> 
            <para>
            Beginning with Docker version 1.9, the Docker client compresses image layers before
            pushing them to a V2 Docker registry. The output of the <code>docker images</code>
            command shows the uncompressed image size, so it may return a larger image size than
            the image sizes returned by <a>DescribeImages</a>.
            </para>
             </note>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.DescribeImagesRequest.Filter">
            <summary>
            Gets and sets the property Filter. 
            <para>
            The filter key and value with which to filter your <code>DescribeImages</code> results.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.DescribeImagesRequest.ImageIds">
            <summary>
            Gets and sets the property ImageIds. 
            <para>
            The list of image IDs for the requested repository.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.DescribeImagesRequest.MaxResults">
            <summary>
            Gets and sets the property MaxResults. 
            <para>
            The maximum number of repository results returned by <code>DescribeImages</code> in
            paginated output. When this parameter is used, <code>DescribeImages</code> only returns
            <code>maxResults</code> results in a single page along with a <code>nextToken</code>
            response element. The remaining results of the initial request can be seen by sending
            another <code>DescribeImages</code> request with the returned <code>nextToken</code>
            value. This value can be between 1 and 1000. If this parameter is not used, then <code>DescribeImages</code>
            returns up to 100 results and a <code>nextToken</code> value, if applicable. This
            option cannot be used when you specify images with <code>imageIds</code>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.DescribeImagesRequest.NextToken">
            <summary>
            Gets and sets the property NextToken. 
            <para>
            The <code>nextToken</code> value returned from a previous paginated <code>DescribeImages</code>
            request where <code>maxResults</code> was used and the results exceeded the value
            of that parameter. Pagination continues from the end of the previous results that
            returned the <code>nextToken</code> value. This value is <code>null</code> when there
            are no more results to return. This option cannot be used when you specify images
            with <code>imageIds</code>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.DescribeImagesRequest.RegistryId">
            <summary>
            Gets and sets the property RegistryId. 
            <para>
            The AWS account ID associated with the registry that contains the repository in which
            to describe images. If you do not specify a registry, the default registry is assumed.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.DescribeImagesRequest.RepositoryName">
            <summary>
            Gets and sets the property RepositoryName. 
            <para>
            The repository that contains the images to describe.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.DescribeImagesResponse">
            <summary>
            This is the response object from the DescribeImages operation.
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.DescribeImagesResponse.ImageDetails">
            <summary>
            Gets and sets the property ImageDetails. 
            <para>
            A list of <a>ImageDetail</a> objects that contain data about the image.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.DescribeImagesResponse.NextToken">
            <summary>
            Gets and sets the property NextToken. 
            <para>
            The <code>nextToken</code> value to include in a future <code>DescribeImages</code>
            request. When the results of a <code>DescribeImages</code> request exceed <code>maxResults</code>,
            this value can be used to retrieve the next page of results. This value is <code>null</code>
            when there are no more results to return.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.DescribeRepositoriesRequest">
            <summary>
            Container for the parameters to the DescribeRepositories operation.
            Describes image repositories in a registry.
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.DescribeRepositoriesRequest.MaxResults">
            <summary>
            Gets and sets the property MaxResults. 
            <para>
            The maximum number of repository results returned by <code>DescribeRepositories</code>
            in paginated output. When this parameter is used, <code>DescribeRepositories</code>
            only returns <code>maxResults</code> results in a single page along with a <code>nextToken</code>
            response element. The remaining results of the initial request can be seen by sending
            another <code>DescribeRepositories</code> request with the returned <code>nextToken</code>
            value. This value can be between 1 and 1000. If this parameter is not used, then <code>DescribeRepositories</code>
            returns up to 100 results and a <code>nextToken</code> value, if applicable. This
            option cannot be used when you specify repositories with <code>repositoryNames</code>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.DescribeRepositoriesRequest.NextToken">
            <summary>
            Gets and sets the property NextToken. 
            <para>
            The <code>nextToken</code> value returned from a previous paginated <code>DescribeRepositories</code>
            request where <code>maxResults</code> was used and the results exceeded the value
            of that parameter. Pagination continues from the end of the previous results that
            returned the <code>nextToken</code> value. This value is <code>null</code> when there
            are no more results to return. This option cannot be used when you specify repositories
            with <code>repositoryNames</code>.
            </para>
             <note> 
            <para>
            This token should be treated as an opaque identifier that is only used to retrieve
            the next items in a list and not for other programmatic purposes.
            </para>
             </note>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.DescribeRepositoriesRequest.RegistryId">
            <summary>
            Gets and sets the property RegistryId. 
            <para>
            The AWS account ID associated with the registry that contains the repositories to
            be described. If you do not specify a registry, the default registry is assumed.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.DescribeRepositoriesRequest.RepositoryNames">
            <summary>
            Gets and sets the property RepositoryNames. 
            <para>
            A list of repositories to describe. If this parameter is omitted, then all repositories
            in a registry are described.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.DescribeRepositoriesResponse">
            <summary>
            This is the response object from the DescribeRepositories operation.
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.DescribeRepositoriesResponse.NextToken">
            <summary>
            Gets and sets the property NextToken. 
            <para>
            The <code>nextToken</code> value to include in a future <code>DescribeRepositories</code>
            request. When the results of a <code>DescribeRepositories</code> request exceed <code>maxResults</code>,
            this value can be used to retrieve the next page of results. This value is <code>null</code>
            when there are no more results to return.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.DescribeRepositoriesResponse.Repositories">
            <summary>
            Gets and sets the property Repositories. 
            <para>
            A list of repository objects corresponding to valid repositories.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.EmptyUploadException">
            <summary>
             ECR exception
             </summary>
        </member>
        <member name="M:Amazon.ECR.Model.EmptyUploadException.#ctor(System.String)">
            <summary>
            Constructs a new EmptyUploadException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.ECR.Model.EmptyUploadException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of EmptyUploadException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECR.Model.EmptyUploadException.#ctor(System.Exception)">
            <summary>
            Construct instance of EmptyUploadException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECR.Model.EmptyUploadException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of EmptyUploadException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECR.Model.EmptyUploadException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of EmptyUploadException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.ECR.Model.GetAuthorizationTokenRequest">
            <summary>
            Container for the parameters to the GetAuthorizationToken operation.
            Retrieves a token that is valid for a specified registry for 12 hours. This command
            allows you to use the <code>docker</code> CLI to push and pull images with Amazon
            ECR. If you do not specify a registry, the default registry is assumed.
            
             
            <para>
            The <code>authorizationToken</code> returned for each registry specified is a base64
            encoded string that can be decoded and used in a <code>docker login</code> command
            to authenticate to a registry. The AWS CLI offers an <code>aws ecr get-login</code>
            command that simplifies the login process.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.GetAuthorizationTokenRequest.RegistryIds">
            <summary>
            Gets and sets the property RegistryIds. 
            <para>
            A list of AWS account IDs that are associated with the registries for which to get
            authorization tokens. If you do not specify a registry, the default registry is assumed.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.GetAuthorizationTokenResponse">
            <summary>
            This is the response object from the GetAuthorizationToken operation.
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.GetAuthorizationTokenResponse.AuthorizationData">
            <summary>
            Gets and sets the property AuthorizationData. 
            <para>
            A list of authorization token data objects that correspond to the <code>registryIds</code>
            values in the request.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.GetDownloadUrlForLayerRequest">
            <summary>
            Container for the parameters to the GetDownloadUrlForLayer operation.
            Retrieves the pre-signed Amazon S3 download URL corresponding to an image layer. You
            can only get URLs for image layers that are referenced in an image.
            
             <note> 
            <para>
            This operation is used by the Amazon ECR proxy, and it is not intended for general
            use by customers for pulling and pushing images. In most cases, you should use the
            <code>docker</code> CLI to pull, tag, and push images.
            </para>
             </note>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.GetDownloadUrlForLayerRequest.LayerDigest">
            <summary>
            Gets and sets the property LayerDigest. 
            <para>
            The digest of the image layer to download.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.GetDownloadUrlForLayerRequest.RegistryId">
            <summary>
            Gets and sets the property RegistryId. 
            <para>
            The AWS account ID associated with the registry that contains the image layer to download.
            If you do not specify a registry, the default registry is assumed.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.GetDownloadUrlForLayerRequest.RepositoryName">
            <summary>
            Gets and sets the property RepositoryName. 
            <para>
            The name of the repository that is associated with the image layer to download.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.GetDownloadUrlForLayerResponse">
            <summary>
            This is the response object from the GetDownloadUrlForLayer operation.
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.GetDownloadUrlForLayerResponse.DownloadUrl">
            <summary>
            Gets and sets the property DownloadUrl. 
            <para>
            The pre-signed Amazon S3 download URL for the requested layer.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.GetDownloadUrlForLayerResponse.LayerDigest">
            <summary>
            Gets and sets the property LayerDigest. 
            <para>
            The digest of the image layer to download.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.GetLifecyclePolicyPreviewRequest">
            <summary>
            Container for the parameters to the GetLifecyclePolicyPreview operation.
            Retrieves the results of the specified lifecycle policy preview request.
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.GetLifecyclePolicyPreviewRequest.Filter">
            <summary>
            Gets and sets the property Filter. 
            <para>
            An optional parameter that filters results based on image tag status and all tags,
            if tagged.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.GetLifecyclePolicyPreviewRequest.ImageIds">
            <summary>
            Gets and sets the property ImageIds. 
            <para>
            The list of imageIDs to be included.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.GetLifecyclePolicyPreviewRequest.MaxResults">
            <summary>
            Gets and sets the property MaxResults. 
            <para>
            The maximum number of repository results returned by <code>GetLifecyclePolicyPreviewRequest</code>
            in&#x2028; paginated output. When this parameter is used, <code>GetLifecyclePolicyPreviewRequest</code>
            only returns&#x2028; <code>maxResults</code> results in a single page along with a
            <code>nextToken</code>&#x2028; response element. The remaining results of the initial
            request can be seen by sending&#x2028; another <code>GetLifecyclePolicyPreviewRequest</code>
            request with the returned <code>nextToken</code>&#x2028; value. This value can be
            between 1 and 1000. If this&#x2028; parameter is not used, then <code>GetLifecyclePolicyPreviewRequest</code>
            returns up to&#x2028; 100 results and a <code>nextToken</code> value, if&#x2028; applicable.
            This option cannot be used when you specify images with <code>imageIds</code>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.GetLifecyclePolicyPreviewRequest.NextToken">
            <summary>
            Gets and sets the property NextToken. 
            <para>
            The <code>nextToken</code> value returned from a previous paginated&#x2028; <code>GetLifecyclePolicyPreviewRequest</code>
            request where <code>maxResults</code> was used and the&#x2028; results exceeded the
            value of that parameter. Pagination continues from the end of the&#x2028; previous
            results that returned the <code>nextToken</code> value. This value is&#x2028; <code>null</code>
            when there are no more results to return. This option cannot be used when you specify
            images with <code>imageIds</code>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.GetLifecyclePolicyPreviewRequest.RegistryId">
            <summary>
            Gets and sets the property RegistryId. 
            <para>
            The AWS account ID associated with the registry that contains the repository. If you
            do not specify a registry, the default registry is assumed.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.GetLifecyclePolicyPreviewRequest.RepositoryName">
            <summary>
            Gets and sets the property RepositoryName. 
            <para>
            The name of the repository.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.GetLifecyclePolicyPreviewResponse">
            <summary>
            This is the response object from the GetLifecyclePolicyPreview operation.
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.GetLifecyclePolicyPreviewResponse.LifecyclePolicyText">
            <summary>
            Gets and sets the property LifecyclePolicyText. 
            <para>
            The JSON lifecycle policy text.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.GetLifecyclePolicyPreviewResponse.NextToken">
            <summary>
            Gets and sets the property NextToken. 
            <para>
            The <code>nextToken</code> value to include in a future <code>GetLifecyclePolicyPreview</code>
            request. When the results of a <code>GetLifecyclePolicyPreview</code> request exceed
            <code>maxResults</code>, this value can be used to retrieve the next page of results.
            This value is <code>null</code> when there are no more results to return.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.GetLifecyclePolicyPreviewResponse.PreviewResults">
            <summary>
            Gets and sets the property PreviewResults. 
            <para>
            The results of the lifecycle policy preview request.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.GetLifecyclePolicyPreviewResponse.RegistryId">
            <summary>
            Gets and sets the property RegistryId. 
            <para>
            The registry ID associated with the request.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.GetLifecyclePolicyPreviewResponse.RepositoryName">
            <summary>
            Gets and sets the property RepositoryName. 
            <para>
            The repository name associated with the request.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.GetLifecyclePolicyPreviewResponse.Status">
            <summary>
            Gets and sets the property Status. 
            <para>
            The status of the lifecycle policy preview request.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.GetLifecyclePolicyPreviewResponse.Summary">
            <summary>
            Gets and sets the property Summary. 
            <para>
            The list of images that is returned as a result of the action.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.GetLifecyclePolicyRequest">
            <summary>
            Container for the parameters to the GetLifecyclePolicy operation.
            Retrieves the specified lifecycle policy.
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.GetLifecyclePolicyRequest.RegistryId">
            <summary>
            Gets and sets the property RegistryId. 
            <para>
            The AWS account ID associated with the registry that contains the repository. If you
            do not specify a registry, the default registry is assumed.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.GetLifecyclePolicyRequest.RepositoryName">
            <summary>
            Gets and sets the property RepositoryName. 
            <para>
            The name of the repository.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.GetLifecyclePolicyResponse">
            <summary>
            This is the response object from the GetLifecyclePolicy operation.
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.GetLifecyclePolicyResponse.LastEvaluatedAt">
            <summary>
            Gets and sets the property LastEvaluatedAt. 
            <para>
            The time stamp of the last time that the lifecycle policy was run.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.GetLifecyclePolicyResponse.LifecyclePolicyText">
            <summary>
            Gets and sets the property LifecyclePolicyText. 
            <para>
            The JSON lifecycle policy text.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.GetLifecyclePolicyResponse.RegistryId">
            <summary>
            Gets and sets the property RegistryId. 
            <para>
            The registry ID associated with the request.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.GetLifecyclePolicyResponse.RepositoryName">
            <summary>
            Gets and sets the property RepositoryName. 
            <para>
            The repository name associated with the request.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.GetRepositoryPolicyRequest">
            <summary>
            Container for the parameters to the GetRepositoryPolicy operation.
            Retrieves the repository policy for a specified repository.
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.GetRepositoryPolicyRequest.RegistryId">
            <summary>
            Gets and sets the property RegistryId. 
            <para>
            The AWS account ID associated with the registry that contains the repository. If you
            do not specify a registry, the default registry is assumed.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.GetRepositoryPolicyRequest.RepositoryName">
            <summary>
            Gets and sets the property RepositoryName. 
            <para>
            The name of the repository with the policy to retrieve.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.GetRepositoryPolicyResponse">
            <summary>
            This is the response object from the GetRepositoryPolicy operation.
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.GetRepositoryPolicyResponse.PolicyText">
            <summary>
            Gets and sets the property PolicyText. 
            <para>
            The JSON repository policy text associated with the repository.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.GetRepositoryPolicyResponse.RegistryId">
            <summary>
            Gets and sets the property RegistryId. 
            <para>
            The registry ID associated with the request.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.GetRepositoryPolicyResponse.RepositoryName">
            <summary>
            Gets and sets the property RepositoryName. 
            <para>
            The repository name associated with the request.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.Image">
            <summary>
            An object representing an Amazon ECR image.
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.Image.ImageId">
            <summary>
            Gets and sets the property ImageId. 
            <para>
            An object containing the image tag and image digest associated with an image.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.Image.ImageManifest">
            <summary>
            Gets and sets the property ImageManifest. 
            <para>
            The image manifest associated with the image.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.Image.RegistryId">
            <summary>
            Gets and sets the property RegistryId. 
            <para>
            The AWS account ID associated with the registry containing the image.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.Image.RepositoryName">
            <summary>
            Gets and sets the property RepositoryName. 
            <para>
            The name of the repository associated with the image.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.ImageAlreadyExistsException">
            <summary>
             ECR exception
             </summary>
        </member>
        <member name="M:Amazon.ECR.Model.ImageAlreadyExistsException.#ctor(System.String)">
            <summary>
            Constructs a new ImageAlreadyExistsException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.ECR.Model.ImageAlreadyExistsException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of ImageAlreadyExistsException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECR.Model.ImageAlreadyExistsException.#ctor(System.Exception)">
            <summary>
            Construct instance of ImageAlreadyExistsException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECR.Model.ImageAlreadyExistsException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of ImageAlreadyExistsException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECR.Model.ImageAlreadyExistsException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of ImageAlreadyExistsException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.ECR.Model.ImageDetail">
            <summary>
            An object that describes an image returned by a <a>DescribeImages</a> operation.
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.ImageDetail.ImageDigest">
            <summary>
            Gets and sets the property ImageDigest. 
            <para>
            The <code>sha256</code> digest of the image manifest.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.ImageDetail.ImagePushedAt">
            <summary>
            Gets and sets the property ImagePushedAt. 
            <para>
            The date and time, expressed in standard JavaScript date format, at which the current
            image was pushed to the repository. 
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.ImageDetail.ImageSizeInBytes">
            <summary>
            Gets and sets the property ImageSizeInBytes. 
            <para>
            The size, in bytes, of the image in the repository.
            </para>
             <note> 
            <para>
            Beginning with Docker version 1.9, the Docker client compresses image layers before
            pushing them to a V2 Docker registry. The output of the <code>docker images</code>
            command shows the uncompressed image size, so it may return a larger image size than
            the image sizes returned by <a>DescribeImages</a>.
            </para>
             </note>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.ImageDetail.ImageTags">
            <summary>
            Gets and sets the property ImageTags. 
            <para>
            The list of tags associated with this image.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.ImageDetail.RegistryId">
            <summary>
            Gets and sets the property RegistryId. 
            <para>
            The AWS account ID associated with the registry to which this image belongs.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.ImageDetail.RepositoryName">
            <summary>
            Gets and sets the property RepositoryName. 
            <para>
            The name of the repository to which this image belongs.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.ImageFailure">
            <summary>
            An object representing an Amazon ECR image failure.
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.ImageFailure.FailureCode">
            <summary>
            Gets and sets the property FailureCode. 
            <para>
            The code associated with the failure.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.ImageFailure.FailureReason">
            <summary>
            Gets and sets the property FailureReason. 
            <para>
            The reason for the failure.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.ImageFailure.ImageId">
            <summary>
            Gets and sets the property ImageId. 
            <para>
            The image ID associated with the failure.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.ImageIdentifier">
            <summary>
            An object with identifying information for an Amazon ECR image.
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.ImageIdentifier.ImageDigest">
            <summary>
            Gets and sets the property ImageDigest. 
            <para>
            The <code>sha256</code> digest of the image manifest.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.ImageIdentifier.ImageTag">
            <summary>
            Gets and sets the property ImageTag. 
            <para>
            The tag used for the image.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.ImageNotFoundException">
            <summary>
             ECR exception
             </summary>
        </member>
        <member name="M:Amazon.ECR.Model.ImageNotFoundException.#ctor(System.String)">
            <summary>
            Constructs a new ImageNotFoundException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.ECR.Model.ImageNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of ImageNotFoundException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECR.Model.ImageNotFoundException.#ctor(System.Exception)">
            <summary>
            Construct instance of ImageNotFoundException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECR.Model.ImageNotFoundException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of ImageNotFoundException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECR.Model.ImageNotFoundException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of ImageNotFoundException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.ECR.Model.ImageTagAlreadyExistsException">
            <summary>
             ECR exception
             </summary>
        </member>
        <member name="M:Amazon.ECR.Model.ImageTagAlreadyExistsException.#ctor(System.String)">
            <summary>
            Constructs a new ImageTagAlreadyExistsException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.ECR.Model.ImageTagAlreadyExistsException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of ImageTagAlreadyExistsException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECR.Model.ImageTagAlreadyExistsException.#ctor(System.Exception)">
            <summary>
            Construct instance of ImageTagAlreadyExistsException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECR.Model.ImageTagAlreadyExistsException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of ImageTagAlreadyExistsException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECR.Model.ImageTagAlreadyExistsException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of ImageTagAlreadyExistsException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.ECR.Model.InitiateLayerUploadRequest">
            <summary>
            Container for the parameters to the InitiateLayerUpload operation.
            Notify Amazon ECR that you intend to upload an image layer.
            
             <note> 
            <para>
            This operation is used by the Amazon ECR proxy, and it is not intended for general
            use by customers for pulling and pushing images. In most cases, you should use the
            <code>docker</code> CLI to pull, tag, and push images.
            </para>
             </note>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.InitiateLayerUploadRequest.RegistryId">
            <summary>
            Gets and sets the property RegistryId. 
            <para>
            The AWS account ID associated with the registry to which you intend to upload layers.
            If you do not specify a registry, the default registry is assumed.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.InitiateLayerUploadRequest.RepositoryName">
            <summary>
            Gets and sets the property RepositoryName. 
            <para>
            The name of the repository to which you intend to upload layers.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.InitiateLayerUploadResponse">
            <summary>
            This is the response object from the InitiateLayerUpload operation.
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.InitiateLayerUploadResponse.PartSize">
            <summary>
            Gets and sets the property PartSize. 
            <para>
            The size, in bytes, that Amazon ECR expects future layer part uploads to be.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.InitiateLayerUploadResponse.UploadId">
            <summary>
            Gets and sets the property UploadId. 
            <para>
            The upload ID for the layer upload. This parameter is passed to further <a>UploadLayerPart</a>
            and <a>CompleteLayerUpload</a> operations.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.AuthorizationDataUnmarshaller">
            <summary>
            Response Unmarshaller for AuthorizationData Object
            </summary>  
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.AuthorizationDataUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#ECR#Model#AuthorizationData,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.AuthorizationDataUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.AuthorizationDataUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.BatchCheckLayerAvailabilityRequestMarshaller">
            <summary>
            BatchCheckLayerAvailability Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.BatchCheckLayerAvailabilityRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.BatchCheckLayerAvailabilityRequestMarshaller.Marshall(Amazon.ECR.Model.BatchCheckLayerAvailabilityRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.BatchCheckLayerAvailabilityRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.BatchCheckLayerAvailabilityResponseUnmarshaller">
            <summary>
            Response Unmarshaller for BatchCheckLayerAvailability operation
            </summary>  
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.BatchCheckLayerAvailabilityResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.BatchCheckLayerAvailabilityResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.BatchCheckLayerAvailabilityResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.BatchDeleteImageRequestMarshaller">
            <summary>
            BatchDeleteImage Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.BatchDeleteImageRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.BatchDeleteImageRequestMarshaller.Marshall(Amazon.ECR.Model.BatchDeleteImageRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.BatchDeleteImageRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.BatchDeleteImageResponseUnmarshaller">
            <summary>
            Response Unmarshaller for BatchDeleteImage operation
            </summary>  
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.BatchDeleteImageResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.BatchDeleteImageResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.BatchDeleteImageResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.BatchGetImageRequestMarshaller">
            <summary>
            BatchGetImage Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.BatchGetImageRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.BatchGetImageRequestMarshaller.Marshall(Amazon.ECR.Model.BatchGetImageRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.BatchGetImageRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.BatchGetImageResponseUnmarshaller">
            <summary>
            Response Unmarshaller for BatchGetImage operation
            </summary>  
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.BatchGetImageResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.BatchGetImageResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.BatchGetImageResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.CompleteLayerUploadRequestMarshaller">
            <summary>
            CompleteLayerUpload Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.CompleteLayerUploadRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.CompleteLayerUploadRequestMarshaller.Marshall(Amazon.ECR.Model.CompleteLayerUploadRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.CompleteLayerUploadRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.CompleteLayerUploadResponseUnmarshaller">
            <summary>
            Response Unmarshaller for CompleteLayerUpload operation
            </summary>  
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.CompleteLayerUploadResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.CompleteLayerUploadResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.CompleteLayerUploadResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.CreateRepositoryRequestMarshaller">
            <summary>
            CreateRepository Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.CreateRepositoryRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.CreateRepositoryRequestMarshaller.Marshall(Amazon.ECR.Model.CreateRepositoryRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.CreateRepositoryRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.CreateRepositoryResponseUnmarshaller">
            <summary>
            Response Unmarshaller for CreateRepository operation
            </summary>  
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.CreateRepositoryResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.CreateRepositoryResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.CreateRepositoryResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.DeleteLifecyclePolicyRequestMarshaller">
            <summary>
            DeleteLifecyclePolicy Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.DeleteLifecyclePolicyRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.DeleteLifecyclePolicyRequestMarshaller.Marshall(Amazon.ECR.Model.DeleteLifecyclePolicyRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.DeleteLifecyclePolicyRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.DeleteLifecyclePolicyResponseUnmarshaller">
            <summary>
            Response Unmarshaller for DeleteLifecyclePolicy operation
            </summary>  
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.DeleteLifecyclePolicyResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.DeleteLifecyclePolicyResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.DeleteLifecyclePolicyResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.DeleteRepositoryPolicyRequestMarshaller">
            <summary>
            DeleteRepositoryPolicy Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.DeleteRepositoryPolicyRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.DeleteRepositoryPolicyRequestMarshaller.Marshall(Amazon.ECR.Model.DeleteRepositoryPolicyRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.DeleteRepositoryPolicyRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.DeleteRepositoryPolicyResponseUnmarshaller">
            <summary>
            Response Unmarshaller for DeleteRepositoryPolicy operation
            </summary>  
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.DeleteRepositoryPolicyResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.DeleteRepositoryPolicyResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.DeleteRepositoryPolicyResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.DeleteRepositoryRequestMarshaller">
            <summary>
            DeleteRepository Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.DeleteRepositoryRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.DeleteRepositoryRequestMarshaller.Marshall(Amazon.ECR.Model.DeleteRepositoryRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.DeleteRepositoryRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.DeleteRepositoryResponseUnmarshaller">
            <summary>
            Response Unmarshaller for DeleteRepository operation
            </summary>  
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.DeleteRepositoryResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.DeleteRepositoryResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.DeleteRepositoryResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.DescribeImagesFilterMarshaller">
            <summary>
            DescribeImagesFilter Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.DescribeImagesFilterMarshaller.Marshall(Amazon.ECR.Model.DescribeImagesFilter,Amazon.Runtime.Internal.Transform.JsonMarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="requestObject"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="F:Amazon.ECR.Model.Internal.MarshallTransformations.DescribeImagesFilterMarshaller.Instance">
            <summary>
            Singleton Marshaller.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.DescribeImagesRequestMarshaller">
            <summary>
            DescribeImages Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.DescribeImagesRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.DescribeImagesRequestMarshaller.Marshall(Amazon.ECR.Model.DescribeImagesRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.DescribeImagesRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.DescribeImagesResponseUnmarshaller">
            <summary>
            Response Unmarshaller for DescribeImages operation
            </summary>  
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.DescribeImagesResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.DescribeImagesResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.DescribeImagesResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.DescribeRepositoriesRequestMarshaller">
            <summary>
            DescribeRepositories Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.DescribeRepositoriesRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.DescribeRepositoriesRequestMarshaller.Marshall(Amazon.ECR.Model.DescribeRepositoriesRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.DescribeRepositoriesRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.DescribeRepositoriesResponseUnmarshaller">
            <summary>
            Response Unmarshaller for DescribeRepositories operation
            </summary>  
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.DescribeRepositoriesResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.DescribeRepositoriesResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.DescribeRepositoriesResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.GetAuthorizationTokenRequestMarshaller">
            <summary>
            GetAuthorizationToken Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.GetAuthorizationTokenRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.GetAuthorizationTokenRequestMarshaller.Marshall(Amazon.ECR.Model.GetAuthorizationTokenRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.GetAuthorizationTokenRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.GetAuthorizationTokenResponseUnmarshaller">
            <summary>
            Response Unmarshaller for GetAuthorizationToken operation
            </summary>  
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.GetAuthorizationTokenResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.GetAuthorizationTokenResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.GetAuthorizationTokenResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.GetDownloadUrlForLayerRequestMarshaller">
            <summary>
            GetDownloadUrlForLayer Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.GetDownloadUrlForLayerRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.GetDownloadUrlForLayerRequestMarshaller.Marshall(Amazon.ECR.Model.GetDownloadUrlForLayerRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.GetDownloadUrlForLayerRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.GetDownloadUrlForLayerResponseUnmarshaller">
            <summary>
            Response Unmarshaller for GetDownloadUrlForLayer operation
            </summary>  
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.GetDownloadUrlForLayerResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.GetDownloadUrlForLayerResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.GetDownloadUrlForLayerResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.GetLifecyclePolicyPreviewRequestMarshaller">
            <summary>
            GetLifecyclePolicyPreview Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.GetLifecyclePolicyPreviewRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.GetLifecyclePolicyPreviewRequestMarshaller.Marshall(Amazon.ECR.Model.GetLifecyclePolicyPreviewRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.GetLifecyclePolicyPreviewRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.GetLifecyclePolicyPreviewResponseUnmarshaller">
            <summary>
            Response Unmarshaller for GetLifecyclePolicyPreview operation
            </summary>  
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.GetLifecyclePolicyPreviewResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.GetLifecyclePolicyPreviewResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.GetLifecyclePolicyPreviewResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.GetLifecyclePolicyRequestMarshaller">
            <summary>
            GetLifecyclePolicy Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.GetLifecyclePolicyRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.GetLifecyclePolicyRequestMarshaller.Marshall(Amazon.ECR.Model.GetLifecyclePolicyRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.GetLifecyclePolicyRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.GetLifecyclePolicyResponseUnmarshaller">
            <summary>
            Response Unmarshaller for GetLifecyclePolicy operation
            </summary>  
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.GetLifecyclePolicyResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.GetLifecyclePolicyResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.GetLifecyclePolicyResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.GetRepositoryPolicyRequestMarshaller">
            <summary>
            GetRepositoryPolicy Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.GetRepositoryPolicyRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.GetRepositoryPolicyRequestMarshaller.Marshall(Amazon.ECR.Model.GetRepositoryPolicyRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.GetRepositoryPolicyRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.GetRepositoryPolicyResponseUnmarshaller">
            <summary>
            Response Unmarshaller for GetRepositoryPolicy operation
            </summary>  
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.GetRepositoryPolicyResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.GetRepositoryPolicyResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.GetRepositoryPolicyResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.ImageDetailUnmarshaller">
            <summary>
            Response Unmarshaller for ImageDetail Object
            </summary>  
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.ImageDetailUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#ECR#Model#ImageDetail,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.ImageDetailUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.ImageDetailUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.ImageFailureUnmarshaller">
            <summary>
            Response Unmarshaller for ImageFailure Object
            </summary>  
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.ImageFailureUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#ECR#Model#ImageFailure,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.ImageFailureUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.ImageFailureUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.ImageIdentifierMarshaller">
            <summary>
            ImageIdentifier Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.ImageIdentifierMarshaller.Marshall(Amazon.ECR.Model.ImageIdentifier,Amazon.Runtime.Internal.Transform.JsonMarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="requestObject"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="F:Amazon.ECR.Model.Internal.MarshallTransformations.ImageIdentifierMarshaller.Instance">
            <summary>
            Singleton Marshaller.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.ImageIdentifierUnmarshaller">
            <summary>
            Response Unmarshaller for ImageIdentifier Object
            </summary>  
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.ImageIdentifierUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#ECR#Model#ImageIdentifier,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.ImageIdentifierUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.ImageIdentifierUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.ImageUnmarshaller">
            <summary>
            Response Unmarshaller for Image Object
            </summary>  
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.ImageUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#ECR#Model#Image,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.ImageUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.ImageUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.InitiateLayerUploadRequestMarshaller">
            <summary>
            InitiateLayerUpload Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.InitiateLayerUploadRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.InitiateLayerUploadRequestMarshaller.Marshall(Amazon.ECR.Model.InitiateLayerUploadRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.InitiateLayerUploadRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.InitiateLayerUploadResponseUnmarshaller">
            <summary>
            Response Unmarshaller for InitiateLayerUpload operation
            </summary>  
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.InitiateLayerUploadResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.InitiateLayerUploadResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.InitiateLayerUploadResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.LayerFailureUnmarshaller">
            <summary>
            Response Unmarshaller for LayerFailure Object
            </summary>  
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.LayerFailureUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#ECR#Model#LayerFailure,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.LayerFailureUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.LayerFailureUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.LayerUnmarshaller">
            <summary>
            Response Unmarshaller for Layer Object
            </summary>  
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.LayerUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#ECR#Model#Layer,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.LayerUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.LayerUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.LifecyclePolicyPreviewFilterMarshaller">
            <summary>
            LifecyclePolicyPreviewFilter Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.LifecyclePolicyPreviewFilterMarshaller.Marshall(Amazon.ECR.Model.LifecyclePolicyPreviewFilter,Amazon.Runtime.Internal.Transform.JsonMarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="requestObject"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="F:Amazon.ECR.Model.Internal.MarshallTransformations.LifecyclePolicyPreviewFilterMarshaller.Instance">
            <summary>
            Singleton Marshaller.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.LifecyclePolicyPreviewResultUnmarshaller">
            <summary>
            Response Unmarshaller for LifecyclePolicyPreviewResult Object
            </summary>  
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.LifecyclePolicyPreviewResultUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#ECR#Model#LifecyclePolicyPreviewResult,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.LifecyclePolicyPreviewResultUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.LifecyclePolicyPreviewResultUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.LifecyclePolicyPreviewSummaryUnmarshaller">
            <summary>
            Response Unmarshaller for LifecyclePolicyPreviewSummary Object
            </summary>  
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.LifecyclePolicyPreviewSummaryUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#ECR#Model#LifecyclePolicyPreviewSummary,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.LifecyclePolicyPreviewSummaryUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.LifecyclePolicyPreviewSummaryUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.LifecyclePolicyRuleActionUnmarshaller">
            <summary>
            Response Unmarshaller for LifecyclePolicyRuleAction Object
            </summary>  
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.LifecyclePolicyRuleActionUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#ECR#Model#LifecyclePolicyRuleAction,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.LifecyclePolicyRuleActionUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.LifecyclePolicyRuleActionUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.ListImagesFilterMarshaller">
            <summary>
            ListImagesFilter Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.ListImagesFilterMarshaller.Marshall(Amazon.ECR.Model.ListImagesFilter,Amazon.Runtime.Internal.Transform.JsonMarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="requestObject"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="F:Amazon.ECR.Model.Internal.MarshallTransformations.ListImagesFilterMarshaller.Instance">
            <summary>
            Singleton Marshaller.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.ListImagesRequestMarshaller">
            <summary>
            ListImages Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.ListImagesRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.ListImagesRequestMarshaller.Marshall(Amazon.ECR.Model.ListImagesRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.ListImagesRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.ListImagesResponseUnmarshaller">
            <summary>
            Response Unmarshaller for ListImages operation
            </summary>  
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.ListImagesResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.ListImagesResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.ListImagesResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.ListTagsForResourceRequestMarshaller">
            <summary>
            ListTagsForResource Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.ListTagsForResourceRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.ListTagsForResourceRequestMarshaller.Marshall(Amazon.ECR.Model.ListTagsForResourceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.ListTagsForResourceRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.ListTagsForResourceResponseUnmarshaller">
            <summary>
            Response Unmarshaller for ListTagsForResource operation
            </summary>  
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.ListTagsForResourceResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.ListTagsForResourceResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.ListTagsForResourceResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.PutImageRequestMarshaller">
            <summary>
            PutImage Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.PutImageRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.PutImageRequestMarshaller.Marshall(Amazon.ECR.Model.PutImageRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.PutImageRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.PutImageResponseUnmarshaller">
            <summary>
            Response Unmarshaller for PutImage operation
            </summary>  
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.PutImageResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.PutImageResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.PutImageResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.PutImageTagMutabilityRequestMarshaller">
            <summary>
            PutImageTagMutability Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.PutImageTagMutabilityRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.PutImageTagMutabilityRequestMarshaller.Marshall(Amazon.ECR.Model.PutImageTagMutabilityRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.PutImageTagMutabilityRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.PutImageTagMutabilityResponseUnmarshaller">
            <summary>
            Response Unmarshaller for PutImageTagMutability operation
            </summary>  
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.PutImageTagMutabilityResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.PutImageTagMutabilityResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.PutImageTagMutabilityResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.PutLifecyclePolicyRequestMarshaller">
            <summary>
            PutLifecyclePolicy Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.PutLifecyclePolicyRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.PutLifecyclePolicyRequestMarshaller.Marshall(Amazon.ECR.Model.PutLifecyclePolicyRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.PutLifecyclePolicyRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.PutLifecyclePolicyResponseUnmarshaller">
            <summary>
            Response Unmarshaller for PutLifecyclePolicy operation
            </summary>  
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.PutLifecyclePolicyResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.PutLifecyclePolicyResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.PutLifecyclePolicyResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.RepositoryUnmarshaller">
            <summary>
            Response Unmarshaller for Repository Object
            </summary>  
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.RepositoryUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#ECR#Model#Repository,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.RepositoryUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.RepositoryUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.SetRepositoryPolicyRequestMarshaller">
            <summary>
            SetRepositoryPolicy Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.SetRepositoryPolicyRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.SetRepositoryPolicyRequestMarshaller.Marshall(Amazon.ECR.Model.SetRepositoryPolicyRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.SetRepositoryPolicyRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.SetRepositoryPolicyResponseUnmarshaller">
            <summary>
            Response Unmarshaller for SetRepositoryPolicy operation
            </summary>  
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.SetRepositoryPolicyResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.SetRepositoryPolicyResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.SetRepositoryPolicyResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.StartLifecyclePolicyPreviewRequestMarshaller">
            <summary>
            StartLifecyclePolicyPreview Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.StartLifecyclePolicyPreviewRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.StartLifecyclePolicyPreviewRequestMarshaller.Marshall(Amazon.ECR.Model.StartLifecyclePolicyPreviewRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.StartLifecyclePolicyPreviewRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.StartLifecyclePolicyPreviewResponseUnmarshaller">
            <summary>
            Response Unmarshaller for StartLifecyclePolicyPreview operation
            </summary>  
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.StartLifecyclePolicyPreviewResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.StartLifecyclePolicyPreviewResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.StartLifecyclePolicyPreviewResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.TagMarshaller">
            <summary>
            Tag Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.TagMarshaller.Marshall(Amazon.ECR.Model.Tag,Amazon.Runtime.Internal.Transform.JsonMarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="requestObject"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="F:Amazon.ECR.Model.Internal.MarshallTransformations.TagMarshaller.Instance">
            <summary>
            Singleton Marshaller.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.TagResourceRequestMarshaller">
            <summary>
            TagResource Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.TagResourceRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.TagResourceRequestMarshaller.Marshall(Amazon.ECR.Model.TagResourceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.TagResourceRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.TagResourceResponseUnmarshaller">
            <summary>
            Response Unmarshaller for TagResource operation
            </summary>  
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.TagResourceResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.TagResourceResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.TagResourceResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.TagUnmarshaller">
            <summary>
            Response Unmarshaller for Tag Object
            </summary>  
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.TagUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#ECR#Model#Tag,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.TagUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.TagUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.UntagResourceRequestMarshaller">
            <summary>
            UntagResource Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.UntagResourceRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.UntagResourceRequestMarshaller.Marshall(Amazon.ECR.Model.UntagResourceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.UntagResourceRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.UntagResourceResponseUnmarshaller">
            <summary>
            Response Unmarshaller for UntagResource operation
            </summary>  
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.UntagResourceResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.UntagResourceResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.UntagResourceResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.UploadLayerPartRequestMarshaller">
            <summary>
            UploadLayerPart Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.UploadLayerPartRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.UploadLayerPartRequestMarshaller.Marshall(Amazon.ECR.Model.UploadLayerPartRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.UploadLayerPartRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.Internal.MarshallTransformations.UploadLayerPartResponseUnmarshaller">
            <summary>
            Response Unmarshaller for UploadLayerPart operation
            </summary>  
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.UploadLayerPartResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.ECR.Model.Internal.MarshallTransformations.UploadLayerPartResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.ECR.Model.Internal.MarshallTransformations.UploadLayerPartResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.ECR.Model.InvalidLayerException">
            <summary>
             ECR exception
             </summary>
        </member>
        <member name="M:Amazon.ECR.Model.InvalidLayerException.#ctor(System.String)">
            <summary>
            Constructs a new InvalidLayerException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.ECR.Model.InvalidLayerException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of InvalidLayerException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECR.Model.InvalidLayerException.#ctor(System.Exception)">
            <summary>
            Construct instance of InvalidLayerException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECR.Model.InvalidLayerException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of InvalidLayerException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECR.Model.InvalidLayerException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of InvalidLayerException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.ECR.Model.InvalidLayerPartException">
            <summary>
             ECR exception
             </summary>
        </member>
        <member name="M:Amazon.ECR.Model.InvalidLayerPartException.#ctor(System.String)">
            <summary>
            Constructs a new InvalidLayerPartException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.ECR.Model.InvalidLayerPartException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of InvalidLayerPartException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECR.Model.InvalidLayerPartException.#ctor(System.Exception)">
            <summary>
            Construct instance of InvalidLayerPartException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECR.Model.InvalidLayerPartException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of InvalidLayerPartException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECR.Model.InvalidLayerPartException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of InvalidLayerPartException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.ECR.Model.InvalidParameterException">
            <summary>
             ECR exception
             </summary>
        </member>
        <member name="M:Amazon.ECR.Model.InvalidParameterException.#ctor(System.String)">
            <summary>
            Constructs a new InvalidParameterException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.ECR.Model.InvalidParameterException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of InvalidParameterException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECR.Model.InvalidParameterException.#ctor(System.Exception)">
            <summary>
            Construct instance of InvalidParameterException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECR.Model.InvalidParameterException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of InvalidParameterException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECR.Model.InvalidParameterException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of InvalidParameterException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.ECR.Model.InvalidTagParameterException">
            <summary>
             ECR exception
             </summary>
        </member>
        <member name="M:Amazon.ECR.Model.InvalidTagParameterException.#ctor(System.String)">
            <summary>
            Constructs a new InvalidTagParameterException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.ECR.Model.InvalidTagParameterException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of InvalidTagParameterException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECR.Model.InvalidTagParameterException.#ctor(System.Exception)">
            <summary>
            Construct instance of InvalidTagParameterException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECR.Model.InvalidTagParameterException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of InvalidTagParameterException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECR.Model.InvalidTagParameterException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of InvalidTagParameterException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.ECR.Model.Layer">
            <summary>
            An object representing an Amazon ECR image layer.
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.Layer.LayerAvailability">
            <summary>
            Gets and sets the property LayerAvailability. 
            <para>
            The availability status of the image layer.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.Layer.LayerDigest">
            <summary>
            Gets and sets the property LayerDigest. 
            <para>
            The <code>sha256</code> digest of the image layer.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.Layer.LayerSize">
            <summary>
            Gets and sets the property LayerSize. 
            <para>
            The size, in bytes, of the image layer.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.Layer.MediaType">
            <summary>
            Gets and sets the property MediaType. 
            <para>
            The media type of the layer, such as <code>application/vnd.docker.image.rootfs.diff.tar.gzip</code>
            or <code>application/vnd.oci.image.layer.v1.tar+gzip</code>.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.LayerAlreadyExistsException">
            <summary>
             ECR exception
             </summary>
        </member>
        <member name="M:Amazon.ECR.Model.LayerAlreadyExistsException.#ctor(System.String)">
            <summary>
            Constructs a new LayerAlreadyExistsException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.ECR.Model.LayerAlreadyExistsException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of LayerAlreadyExistsException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECR.Model.LayerAlreadyExistsException.#ctor(System.Exception)">
            <summary>
            Construct instance of LayerAlreadyExistsException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECR.Model.LayerAlreadyExistsException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of LayerAlreadyExistsException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECR.Model.LayerAlreadyExistsException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of LayerAlreadyExistsException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.ECR.Model.LayerFailure">
            <summary>
            An object representing an Amazon ECR image layer failure.
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.LayerFailure.FailureCode">
            <summary>
            Gets and sets the property FailureCode. 
            <para>
            The failure code associated with the failure.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.LayerFailure.FailureReason">
            <summary>
            Gets and sets the property FailureReason. 
            <para>
            The reason for the failure.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.LayerFailure.LayerDigest">
            <summary>
            Gets and sets the property LayerDigest. 
            <para>
            The layer digest associated with the failure.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.LayerInaccessibleException">
            <summary>
             ECR exception
             </summary>
        </member>
        <member name="M:Amazon.ECR.Model.LayerInaccessibleException.#ctor(System.String)">
            <summary>
            Constructs a new LayerInaccessibleException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.ECR.Model.LayerInaccessibleException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of LayerInaccessibleException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECR.Model.LayerInaccessibleException.#ctor(System.Exception)">
            <summary>
            Construct instance of LayerInaccessibleException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECR.Model.LayerInaccessibleException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of LayerInaccessibleException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECR.Model.LayerInaccessibleException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of LayerInaccessibleException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.ECR.Model.LayerPartTooSmallException">
            <summary>
             ECR exception
             </summary>
        </member>
        <member name="M:Amazon.ECR.Model.LayerPartTooSmallException.#ctor(System.String)">
            <summary>
            Constructs a new LayerPartTooSmallException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.ECR.Model.LayerPartTooSmallException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of LayerPartTooSmallException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECR.Model.LayerPartTooSmallException.#ctor(System.Exception)">
            <summary>
            Construct instance of LayerPartTooSmallException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECR.Model.LayerPartTooSmallException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of LayerPartTooSmallException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECR.Model.LayerPartTooSmallException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of LayerPartTooSmallException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.ECR.Model.LayersNotFoundException">
            <summary>
             ECR exception
             </summary>
        </member>
        <member name="M:Amazon.ECR.Model.LayersNotFoundException.#ctor(System.String)">
            <summary>
            Constructs a new LayersNotFoundException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.ECR.Model.LayersNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of LayersNotFoundException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECR.Model.LayersNotFoundException.#ctor(System.Exception)">
            <summary>
            Construct instance of LayersNotFoundException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECR.Model.LayersNotFoundException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of LayersNotFoundException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECR.Model.LayersNotFoundException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of LayersNotFoundException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.ECR.Model.LifecyclePolicyNotFoundException">
            <summary>
             ECR exception
             </summary>
        </member>
        <member name="M:Amazon.ECR.Model.LifecyclePolicyNotFoundException.#ctor(System.String)">
            <summary>
            Constructs a new LifecyclePolicyNotFoundException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.ECR.Model.LifecyclePolicyNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of LifecyclePolicyNotFoundException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECR.Model.LifecyclePolicyNotFoundException.#ctor(System.Exception)">
            <summary>
            Construct instance of LifecyclePolicyNotFoundException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECR.Model.LifecyclePolicyNotFoundException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of LifecyclePolicyNotFoundException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECR.Model.LifecyclePolicyNotFoundException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of LifecyclePolicyNotFoundException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.ECR.Model.LifecyclePolicyPreviewFilter">
            <summary>
            The filter for the lifecycle policy preview.
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.LifecyclePolicyPreviewFilter.TagStatus">
            <summary>
            Gets and sets the property TagStatus. 
            <para>
            The tag status of the image.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.LifecyclePolicyPreviewInProgressException">
            <summary>
             ECR exception
             </summary>
        </member>
        <member name="M:Amazon.ECR.Model.LifecyclePolicyPreviewInProgressException.#ctor(System.String)">
            <summary>
            Constructs a new LifecyclePolicyPreviewInProgressException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.ECR.Model.LifecyclePolicyPreviewInProgressException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of LifecyclePolicyPreviewInProgressException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECR.Model.LifecyclePolicyPreviewInProgressException.#ctor(System.Exception)">
            <summary>
            Construct instance of LifecyclePolicyPreviewInProgressException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECR.Model.LifecyclePolicyPreviewInProgressException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of LifecyclePolicyPreviewInProgressException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECR.Model.LifecyclePolicyPreviewInProgressException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of LifecyclePolicyPreviewInProgressException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.ECR.Model.LifecyclePolicyPreviewNotFoundException">
            <summary>
             ECR exception
             </summary>
        </member>
        <member name="M:Amazon.ECR.Model.LifecyclePolicyPreviewNotFoundException.#ctor(System.String)">
            <summary>
            Constructs a new LifecyclePolicyPreviewNotFoundException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.ECR.Model.LifecyclePolicyPreviewNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of LifecyclePolicyPreviewNotFoundException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECR.Model.LifecyclePolicyPreviewNotFoundException.#ctor(System.Exception)">
            <summary>
            Construct instance of LifecyclePolicyPreviewNotFoundException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECR.Model.LifecyclePolicyPreviewNotFoundException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of LifecyclePolicyPreviewNotFoundException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECR.Model.LifecyclePolicyPreviewNotFoundException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of LifecyclePolicyPreviewNotFoundException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.ECR.Model.LifecyclePolicyPreviewResult">
            <summary>
            The result of the lifecycle policy preview.
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.LifecyclePolicyPreviewResult.Action">
            <summary>
            Gets and sets the property Action. 
            <para>
            The type of action to be taken.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.LifecyclePolicyPreviewResult.AppliedRulePriority">
            <summary>
            Gets and sets the property AppliedRulePriority. 
            <para>
            The priority of the applied rule.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.LifecyclePolicyPreviewResult.ImageDigest">
            <summary>
            Gets and sets the property ImageDigest. 
            <para>
            The <code>sha256</code> digest of the image manifest.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.LifecyclePolicyPreviewResult.ImagePushedAt">
            <summary>
            Gets and sets the property ImagePushedAt. 
            <para>
            The date and time, expressed in standard JavaScript date format, at which the current
            image was pushed to the repository.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.LifecyclePolicyPreviewResult.ImageTags">
            <summary>
            Gets and sets the property ImageTags. 
            <para>
            The list of tags associated with this image.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.LifecyclePolicyPreviewSummary">
            <summary>
            The summary of the lifecycle policy preview request.
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.LifecyclePolicyPreviewSummary.ExpiringImageTotalCount">
            <summary>
            Gets and sets the property ExpiringImageTotalCount. 
            <para>
            The number of expiring images.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.LifecyclePolicyRuleAction">
            <summary>
            The type of action to be taken.
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.LifecyclePolicyRuleAction.Type">
            <summary>
            Gets and sets the property Type. 
            <para>
            The type of action to be taken.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.LimitExceededException">
            <summary>
             ECR exception
             </summary>
        </member>
        <member name="M:Amazon.ECR.Model.LimitExceededException.#ctor(System.String)">
            <summary>
            Constructs a new LimitExceededException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.ECR.Model.LimitExceededException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of LimitExceededException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECR.Model.LimitExceededException.#ctor(System.Exception)">
            <summary>
            Construct instance of LimitExceededException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECR.Model.LimitExceededException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of LimitExceededException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECR.Model.LimitExceededException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of LimitExceededException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.ECR.Model.ListImagesFilter">
            <summary>
            An object representing a filter on a <a>ListImages</a> operation.
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.ListImagesFilter.TagStatus">
            <summary>
            Gets and sets the property TagStatus. 
            <para>
            The tag status with which to filter your <a>ListImages</a> results. You can filter
            results based on whether they are <code>TAGGED</code> or <code>UNTAGGED</code>.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.ListImagesRequest">
            <summary>
            Container for the parameters to the ListImages operation.
            Lists all the image IDs for a given repository.
            
             
            <para>
            You can filter images based on whether or not they are tagged by setting the <code>tagStatus</code>
            parameter to <code>TAGGED</code> or <code>UNTAGGED</code>. For example, you can filter
            your results to return only <code>UNTAGGED</code> images and then pipe that result
            to a <a>BatchDeleteImage</a> operation to delete them. Or, you can filter your results
            to return only <code>TAGGED</code> images to list all of the tags in your repository.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.ListImagesRequest.Filter">
            <summary>
            Gets and sets the property Filter. 
            <para>
            The filter key and value with which to filter your <code>ListImages</code> results.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.ListImagesRequest.MaxResults">
            <summary>
            Gets and sets the property MaxResults. 
            <para>
            The maximum number of image results returned by <code>ListImages</code> in paginated
            output. When this parameter is used, <code>ListImages</code> only returns <code>maxResults</code>
            results in a single page along with a <code>nextToken</code> response element. The
            remaining results of the initial request can be seen by sending another <code>ListImages</code>
            request with the returned <code>nextToken</code> value. This value can be between
            1 and 1000. If this parameter is not used, then <code>ListImages</code> returns up
            to 100 results and a <code>nextToken</code> value, if applicable.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.ListImagesRequest.NextToken">
            <summary>
            Gets and sets the property NextToken. 
            <para>
            The <code>nextToken</code> value returned from a previous paginated <code>ListImages</code>
            request where <code>maxResults</code> was used and the results exceeded the value
            of that parameter. Pagination continues from the end of the previous results that
            returned the <code>nextToken</code> value. This value is <code>null</code> when there
            are no more results to return.
            </para>
             <note> 
            <para>
            This token should be treated as an opaque identifier that is only used to retrieve
            the next items in a list and not for other programmatic purposes.
            </para>
             </note>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.ListImagesRequest.RegistryId">
            <summary>
            Gets and sets the property RegistryId. 
            <para>
            The AWS account ID associated with the registry that contains the repository in which
            to list images. If you do not specify a registry, the default registry is assumed.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.ListImagesRequest.RepositoryName">
            <summary>
            Gets and sets the property RepositoryName. 
            <para>
            The repository with image IDs to be listed.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.ListImagesResponse">
            <summary>
            This is the response object from the ListImages operation.
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.ListImagesResponse.ImageIds">
            <summary>
            Gets and sets the property ImageIds. 
            <para>
            The list of image IDs for the requested repository.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.ListImagesResponse.NextToken">
            <summary>
            Gets and sets the property NextToken. 
            <para>
            The <code>nextToken</code> value to include in a future <code>ListImages</code> request.
            When the results of a <code>ListImages</code> request exceed <code>maxResults</code>,
            this value can be used to retrieve the next page of results. This value is <code>null</code>
            when there are no more results to return.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.ListTagsForResourceRequest">
            <summary>
            Container for the parameters to the ListTagsForResource operation.
            List the tags for an Amazon ECR resource.
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.ListTagsForResourceRequest.ResourceArn">
            <summary>
            Gets and sets the property ResourceArn. 
            <para>
            The Amazon Resource Name (ARN) that identifies the resource for which to list the
            tags. Currently, the only supported resource is an Amazon ECR repository.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.ListTagsForResourceResponse">
            <summary>
            This is the response object from the ListTagsForResource operation.
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.ListTagsForResourceResponse.Tags">
            <summary>
            Gets and sets the property Tags. 
            <para>
            The tags for the resource.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.PutImageRequest">
            <summary>
            Container for the parameters to the PutImage operation.
            Creates or updates the image manifest and tags associated with an image.
            
             <note> 
            <para>
            This operation is used by the Amazon ECR proxy, and it is not intended for general
            use by customers for pulling and pushing images. In most cases, you should use the
            <code>docker</code> CLI to pull, tag, and push images.
            </para>
             </note>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.PutImageRequest.ImageManifest">
            <summary>
            Gets and sets the property ImageManifest. 
            <para>
            The image manifest corresponding to the image to be uploaded.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.PutImageRequest.ImageTag">
            <summary>
            Gets and sets the property ImageTag. 
            <para>
            The tag to associate with the image. This parameter is required for images that use
            the Docker Image Manifest V2 Schema 2 or OCI formats.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.PutImageRequest.RegistryId">
            <summary>
            Gets and sets the property RegistryId. 
            <para>
            The AWS account ID associated with the registry that contains the repository in which
            to put the image. If you do not specify a registry, the default registry is assumed.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.PutImageRequest.RepositoryName">
            <summary>
            Gets and sets the property RepositoryName. 
            <para>
            The name of the repository in which to put the image.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.PutImageResponse">
            <summary>
            This is the response object from the PutImage operation.
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.PutImageResponse.Image">
            <summary>
            Gets and sets the property Image. 
            <para>
            Details of the image uploaded.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.PutImageTagMutabilityRequest">
            <summary>
            Container for the parameters to the PutImageTagMutability operation.
            Updates the image tag mutability settings for a repository.
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.PutImageTagMutabilityRequest.ImageTagMutability">
            <summary>
            Gets and sets the property ImageTagMutability. 
            <para>
            The tag mutability setting for the repository. If <code>MUTABLE</code> is specified,
            image tags can be overwritten. If <code>IMMUTABLE</code> is specified, all image tags
            within the repository will be immutable which will prevent them from being overwritten.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.PutImageTagMutabilityRequest.RegistryId">
            <summary>
            Gets and sets the property RegistryId. 
            <para>
            The AWS account ID associated with the registry that contains the repository in which
            to update the image tag mutability settings. If you do not specify a registry, the
            default registry is assumed.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.PutImageTagMutabilityRequest.RepositoryName">
            <summary>
            Gets and sets the property RepositoryName. 
            <para>
            The name of the repository in which to update the image tag mutability settings.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.PutImageTagMutabilityResponse">
            <summary>
            This is the response object from the PutImageTagMutability operation.
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.PutImageTagMutabilityResponse.ImageTagMutability">
            <summary>
            Gets and sets the property ImageTagMutability. 
            <para>
            The image tag mutability setting for the repository.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.PutImageTagMutabilityResponse.RegistryId">
            <summary>
            Gets and sets the property RegistryId. 
            <para>
            The registry ID associated with the request.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.PutImageTagMutabilityResponse.RepositoryName">
            <summary>
            Gets and sets the property RepositoryName. 
            <para>
            The repository name associated with the request.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.PutLifecyclePolicyRequest">
            <summary>
            Container for the parameters to the PutLifecyclePolicy operation.
            Creates or updates a lifecycle policy. For information about lifecycle policy syntax,
            see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/LifecyclePolicies.html">Lifecycle
            Policy Template</a>.
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.PutLifecyclePolicyRequest.LifecyclePolicyText">
            <summary>
            Gets and sets the property LifecyclePolicyText. 
            <para>
            The JSON repository policy text to apply to the repository.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.PutLifecyclePolicyRequest.RegistryId">
            <summary>
            Gets and sets the property RegistryId. 
            <para>
            The AWS account ID associated with the registry that contains the repository. If you
            do&#x2028; not specify a registry, the default registry is assumed.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.PutLifecyclePolicyRequest.RepositoryName">
            <summary>
            Gets and sets the property RepositoryName. 
            <para>
            The name of the repository to receive the policy.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.PutLifecyclePolicyResponse">
            <summary>
            This is the response object from the PutLifecyclePolicy operation.
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.PutLifecyclePolicyResponse.LifecyclePolicyText">
            <summary>
            Gets and sets the property LifecyclePolicyText. 
            <para>
            The JSON repository policy text.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.PutLifecyclePolicyResponse.RegistryId">
            <summary>
            Gets and sets the property RegistryId. 
            <para>
            The registry ID associated with the request.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.PutLifecyclePolicyResponse.RepositoryName">
            <summary>
            Gets and sets the property RepositoryName. 
            <para>
            The repository name associated with the request.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.Repository">
            <summary>
            An object representing a repository.
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.Repository.CreatedAt">
            <summary>
            Gets and sets the property CreatedAt. 
            <para>
            The date and time, in JavaScript date format, when the repository was created.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.Repository.ImageTagMutability">
            <summary>
            Gets and sets the property ImageTagMutability. 
            <para>
            The tag mutability setting for the repository.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.Repository.RegistryId">
            <summary>
            Gets and sets the property RegistryId. 
            <para>
            The AWS account ID associated with the registry that contains the repository.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.Repository.RepositoryArn">
            <summary>
            Gets and sets the property RepositoryArn. 
            <para>
            The Amazon Resource Name (ARN) that identifies the repository. The ARN contains the
            <code>arn:aws:ecr</code> namespace, followed by the region of the repository, AWS
            account ID of the repository owner, repository namespace, and repository name. For
            example, <code>arn:aws:ecr:region:012345678910:repository/test</code>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.Repository.RepositoryName">
            <summary>
            Gets and sets the property RepositoryName. 
            <para>
            The name of the repository.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.Repository.RepositoryUri">
            <summary>
            Gets and sets the property RepositoryUri. 
            <para>
            The URI for the repository. You can use this URI for Docker <code>push</code> or <code>pull</code>
            operations.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.RepositoryAlreadyExistsException">
            <summary>
             ECR exception
             </summary>
        </member>
        <member name="M:Amazon.ECR.Model.RepositoryAlreadyExistsException.#ctor(System.String)">
            <summary>
            Constructs a new RepositoryAlreadyExistsException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.ECR.Model.RepositoryAlreadyExistsException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of RepositoryAlreadyExistsException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECR.Model.RepositoryAlreadyExistsException.#ctor(System.Exception)">
            <summary>
            Construct instance of RepositoryAlreadyExistsException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECR.Model.RepositoryAlreadyExistsException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of RepositoryAlreadyExistsException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECR.Model.RepositoryAlreadyExistsException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of RepositoryAlreadyExistsException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.ECR.Model.RepositoryNotEmptyException">
            <summary>
             ECR exception
             </summary>
        </member>
        <member name="M:Amazon.ECR.Model.RepositoryNotEmptyException.#ctor(System.String)">
            <summary>
            Constructs a new RepositoryNotEmptyException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.ECR.Model.RepositoryNotEmptyException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of RepositoryNotEmptyException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECR.Model.RepositoryNotEmptyException.#ctor(System.Exception)">
            <summary>
            Construct instance of RepositoryNotEmptyException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECR.Model.RepositoryNotEmptyException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of RepositoryNotEmptyException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECR.Model.RepositoryNotEmptyException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of RepositoryNotEmptyException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.ECR.Model.RepositoryNotFoundException">
            <summary>
             ECR exception
             </summary>
        </member>
        <member name="M:Amazon.ECR.Model.RepositoryNotFoundException.#ctor(System.String)">
            <summary>
            Constructs a new RepositoryNotFoundException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.ECR.Model.RepositoryNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of RepositoryNotFoundException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECR.Model.RepositoryNotFoundException.#ctor(System.Exception)">
            <summary>
            Construct instance of RepositoryNotFoundException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECR.Model.RepositoryNotFoundException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of RepositoryNotFoundException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECR.Model.RepositoryNotFoundException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of RepositoryNotFoundException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.ECR.Model.RepositoryPolicyNotFoundException">
            <summary>
             ECR exception
             </summary>
        </member>
        <member name="M:Amazon.ECR.Model.RepositoryPolicyNotFoundException.#ctor(System.String)">
            <summary>
            Constructs a new RepositoryPolicyNotFoundException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.ECR.Model.RepositoryPolicyNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of RepositoryPolicyNotFoundException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECR.Model.RepositoryPolicyNotFoundException.#ctor(System.Exception)">
            <summary>
            Construct instance of RepositoryPolicyNotFoundException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECR.Model.RepositoryPolicyNotFoundException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of RepositoryPolicyNotFoundException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECR.Model.RepositoryPolicyNotFoundException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of RepositoryPolicyNotFoundException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.ECR.Model.ServerException">
            <summary>
             ECR exception
             </summary>
        </member>
        <member name="M:Amazon.ECR.Model.ServerException.#ctor(System.String)">
            <summary>
            Constructs a new ServerException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.ECR.Model.ServerException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of ServerException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECR.Model.ServerException.#ctor(System.Exception)">
            <summary>
            Construct instance of ServerException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECR.Model.ServerException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of ServerException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECR.Model.ServerException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of ServerException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.ECR.Model.SetRepositoryPolicyRequest">
            <summary>
            Container for the parameters to the SetRepositoryPolicy operation.
            Applies a repository policy on a specified repository to control access permissions.
            For more information, see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/RepositoryPolicies.html">Amazon
            ECR Repository Policies</a> in the <i>Amazon Elastic Container Registry User Guide</i>.
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.SetRepositoryPolicyRequest.Force">
            <summary>
            Gets and sets the property Force. 
            <para>
            If the policy you are attempting to set on a repository policy would prevent you from
            setting another policy in the future, you must force the <a>SetRepositoryPolicy</a>
            operation. This is intended to prevent accidental repository lock outs.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.SetRepositoryPolicyRequest.PolicyText">
            <summary>
            Gets and sets the property PolicyText. 
            <para>
            The JSON repository policy text to apply to the repository. For more information,
            see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/RepositoryPolicyExamples.html">Amazon
            ECR Repository Policy Examples</a> in the <i>Amazon Elastic Container Registry User
            Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.SetRepositoryPolicyRequest.RegistryId">
            <summary>
            Gets and sets the property RegistryId. 
            <para>
            The AWS account ID associated with the registry that contains the repository. If you
            do not specify a registry, the default registry is assumed.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.SetRepositoryPolicyRequest.RepositoryName">
            <summary>
            Gets and sets the property RepositoryName. 
            <para>
            The name of the repository to receive the policy.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.SetRepositoryPolicyResponse">
            <summary>
            This is the response object from the SetRepositoryPolicy operation.
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.SetRepositoryPolicyResponse.PolicyText">
            <summary>
            Gets and sets the property PolicyText. 
            <para>
            The JSON repository policy text applied to the repository.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.SetRepositoryPolicyResponse.RegistryId">
            <summary>
            Gets and sets the property RegistryId. 
            <para>
            The registry ID associated with the request.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.SetRepositoryPolicyResponse.RepositoryName">
            <summary>
            Gets and sets the property RepositoryName. 
            <para>
            The repository name associated with the request.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.StartLifecyclePolicyPreviewRequest">
            <summary>
            Container for the parameters to the StartLifecyclePolicyPreview operation.
            Starts a preview of the specified lifecycle policy. This allows you to see the results
            before creating the lifecycle policy.
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.StartLifecyclePolicyPreviewRequest.LifecyclePolicyText">
            <summary>
            Gets and sets the property LifecyclePolicyText. 
            <para>
            The policy to be evaluated against. If you do not specify a policy, the current policy
            for the repository is used.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.StartLifecyclePolicyPreviewRequest.RegistryId">
            <summary>
            Gets and sets the property RegistryId. 
            <para>
            The AWS account ID associated with the registry that contains the repository. If you
            do not specify a registry, the default registry is assumed.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.StartLifecyclePolicyPreviewRequest.RepositoryName">
            <summary>
            Gets and sets the property RepositoryName. 
            <para>
            The name of the repository to be evaluated.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.StartLifecyclePolicyPreviewResponse">
            <summary>
            This is the response object from the StartLifecyclePolicyPreview operation.
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.StartLifecyclePolicyPreviewResponse.LifecyclePolicyText">
            <summary>
            Gets and sets the property LifecyclePolicyText. 
            <para>
            The JSON repository policy text.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.StartLifecyclePolicyPreviewResponse.RegistryId">
            <summary>
            Gets and sets the property RegistryId. 
            <para>
            The registry ID associated with the request.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.StartLifecyclePolicyPreviewResponse.RepositoryName">
            <summary>
            Gets and sets the property RepositoryName. 
            <para>
            The repository name associated with the request.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.StartLifecyclePolicyPreviewResponse.Status">
            <summary>
            Gets and sets the property Status. 
            <para>
            The status of the lifecycle policy preview request.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.Tag">
            <summary>
            The metadata that you apply to a resource to help you categorize and organize them.
            Each tag consists of a key and an optional value, both of which you define. Tag keys
            can have a maximum character length of 128 characters, and tag values can have a maximum
            length of 256 characters.
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.Tag.Key">
            <summary>
            Gets and sets the property Key. 
            <para>
            One part of a key-value pair that make up a tag. A <code>key</code> is a general label
            that acts like a category for more specific tag values.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.Tag.Value">
            <summary>
            Gets and sets the property Value. 
            <para>
            The optional part of a key-value pair that make up a tag. A <code>value</code> acts
            as a descriptor within a tag category (key).
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.TagResourceRequest">
            <summary>
            Container for the parameters to the TagResource operation.
            Adds specified tags to a resource with the specified ARN. Existing tags on a resource
            are not changed if they are not specified in the request parameters.
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.TagResourceRequest.ResourceArn">
            <summary>
            Gets and sets the property ResourceArn. 
            <para>
            The Amazon Resource Name (ARN) of the the resource to which to add tags. Currently,
            the only supported resource is an Amazon ECR repository.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.TagResourceRequest.Tags">
            <summary>
            Gets and sets the property Tags. 
            <para>
            The tags to add to the resource. A tag is an array of key-value pairs. Tag keys can
            have a maximum character length of 128 characters, and tag values can have a maximum
            length of 256 characters.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.TagResourceResponse">
            <summary>
            This is the response object from the TagResource operation.
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.TooManyTagsException">
            <summary>
             ECR exception
             </summary>
        </member>
        <member name="M:Amazon.ECR.Model.TooManyTagsException.#ctor(System.String)">
            <summary>
            Constructs a new TooManyTagsException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.ECR.Model.TooManyTagsException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of TooManyTagsException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECR.Model.TooManyTagsException.#ctor(System.Exception)">
            <summary>
            Construct instance of TooManyTagsException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECR.Model.TooManyTagsException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of TooManyTagsException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECR.Model.TooManyTagsException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of TooManyTagsException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.ECR.Model.UntagResourceRequest">
            <summary>
            Container for the parameters to the UntagResource operation.
            Deletes specified tags from a resource.
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.UntagResourceRequest.ResourceArn">
            <summary>
            Gets and sets the property ResourceArn. 
            <para>
            The Amazon Resource Name (ARN) of the resource from which to remove tags. Currently,
            the only supported resource is an Amazon ECR repository.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.UntagResourceRequest.TagKeys">
            <summary>
            Gets and sets the property TagKeys. 
            <para>
            The keys of the tags to be removed.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.UntagResourceResponse">
            <summary>
            This is the response object from the UntagResource operation.
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.UploadLayerPartRequest">
            <summary>
            Container for the parameters to the UploadLayerPart operation.
            Uploads an image layer part to Amazon ECR.
            
             <note> 
            <para>
            This operation is used by the Amazon ECR proxy, and it is not intended for general
            use by customers for pulling and pushing images. In most cases, you should use the
            <code>docker</code> CLI to pull, tag, and push images.
            </para>
             </note>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.UploadLayerPartRequest.LayerPartBlob">
            <summary>
            Gets and sets the property LayerPartBlob. 
            <para>
            The base64-encoded layer part payload.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.UploadLayerPartRequest.PartFirstByte">
            <summary>
            Gets and sets the property PartFirstByte. 
            <para>
            The integer value of the first byte of the layer part.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.UploadLayerPartRequest.PartLastByte">
            <summary>
            Gets and sets the property PartLastByte. 
            <para>
            The integer value of the last byte of the layer part.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.UploadLayerPartRequest.RegistryId">
            <summary>
            Gets and sets the property RegistryId. 
            <para>
            The AWS account ID associated with the registry to which you are uploading layer parts.
            If you do not specify a registry, the default registry is assumed.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.UploadLayerPartRequest.RepositoryName">
            <summary>
            Gets and sets the property RepositoryName. 
            <para>
            The name of the repository to which you are uploading layer parts.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.UploadLayerPartRequest.UploadId">
            <summary>
            Gets and sets the property UploadId. 
            <para>
            The upload ID from a previous <a>InitiateLayerUpload</a> operation to associate with
            the layer part upload.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.UploadLayerPartResponse">
            <summary>
            This is the response object from the UploadLayerPart operation.
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.UploadLayerPartResponse.LastByteReceived">
            <summary>
            Gets and sets the property LastByteReceived. 
            <para>
            The integer value of the last byte received in the request.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.UploadLayerPartResponse.RegistryId">
            <summary>
            Gets and sets the property RegistryId. 
            <para>
            The registry ID associated with the request.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.UploadLayerPartResponse.RepositoryName">
            <summary>
            Gets and sets the property RepositoryName. 
            <para>
            The repository name associated with the request.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.ECR.Model.UploadLayerPartResponse.UploadId">
            <summary>
            Gets and sets the property UploadId. 
            <para>
            The upload ID associated with the request.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.ECR.Model.UploadNotFoundException">
            <summary>
             ECR exception
             </summary>
        </member>
        <member name="M:Amazon.ECR.Model.UploadNotFoundException.#ctor(System.String)">
            <summary>
            Constructs a new UploadNotFoundException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.ECR.Model.UploadNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of UploadNotFoundException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECR.Model.UploadNotFoundException.#ctor(System.Exception)">
            <summary>
            Construct instance of UploadNotFoundException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.ECR.Model.UploadNotFoundException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of UploadNotFoundException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.ECR.Model.UploadNotFoundException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of UploadNotFoundException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.ECR.ImageActionType">
            <summary>
            Constants used for properties of type ImageActionType.
            </summary>
        </member>
        <member name="F:Amazon.ECR.ImageActionType.EXPIRE">
            <summary>
            Constant EXPIRE for ImageActionType
            </summary>
        </member>
        <member name="M:Amazon.ECR.ImageActionType.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.ECR.ImageActionType.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.ECR.ImageActionType.op_Implicit(System.String)~Amazon.ECR.ImageActionType">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.ECR.ImageFailureCode">
            <summary>
            Constants used for properties of type ImageFailureCode.
            </summary>
        </member>
        <member name="F:Amazon.ECR.ImageFailureCode.ImageNotFound">
            <summary>
            Constant ImageNotFound for ImageFailureCode
            </summary>
        </member>
        <member name="F:Amazon.ECR.ImageFailureCode.ImageTagDoesNotMatchDigest">
            <summary>
            Constant ImageTagDoesNotMatchDigest for ImageFailureCode
            </summary>
        </member>
        <member name="F:Amazon.ECR.ImageFailureCode.InvalidImageDigest">
            <summary>
            Constant InvalidImageDigest for ImageFailureCode
            </summary>
        </member>
        <member name="F:Amazon.ECR.ImageFailureCode.InvalidImageTag">
            <summary>
            Constant InvalidImageTag for ImageFailureCode
            </summary>
        </member>
        <member name="F:Amazon.ECR.ImageFailureCode.MissingDigestAndTag">
            <summary>
            Constant MissingDigestAndTag for ImageFailureCode
            </summary>
        </member>
        <member name="M:Amazon.ECR.ImageFailureCode.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.ECR.ImageFailureCode.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.ECR.ImageFailureCode.op_Implicit(System.String)~Amazon.ECR.ImageFailureCode">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.ECR.ImageTagMutability">
            <summary>
            Constants used for properties of type ImageTagMutability.
            </summary>
        </member>
        <member name="F:Amazon.ECR.ImageTagMutability.IMMUTABLE">
            <summary>
            Constant IMMUTABLE for ImageTagMutability
            </summary>
        </member>
        <member name="F:Amazon.ECR.ImageTagMutability.MUTABLE">
            <summary>
            Constant MUTABLE for ImageTagMutability
            </summary>
        </member>
        <member name="M:Amazon.ECR.ImageTagMutability.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.ECR.ImageTagMutability.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.ECR.ImageTagMutability.op_Implicit(System.String)~Amazon.ECR.ImageTagMutability">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.ECR.LayerAvailability">
            <summary>
            Constants used for properties of type LayerAvailability.
            </summary>
        </member>
        <member name="F:Amazon.ECR.LayerAvailability.AVAILABLE">
            <summary>
            Constant AVAILABLE for LayerAvailability
            </summary>
        </member>
        <member name="F:Amazon.ECR.LayerAvailability.UNAVAILABLE">
            <summary>
            Constant UNAVAILABLE for LayerAvailability
            </summary>
        </member>
        <member name="M:Amazon.ECR.LayerAvailability.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.ECR.LayerAvailability.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.ECR.LayerAvailability.op_Implicit(System.String)~Amazon.ECR.LayerAvailability">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.ECR.LayerFailureCode">
            <summary>
            Constants used for properties of type LayerFailureCode.
            </summary>
        </member>
        <member name="F:Amazon.ECR.LayerFailureCode.InvalidLayerDigest">
            <summary>
            Constant InvalidLayerDigest for LayerFailureCode
            </summary>
        </member>
        <member name="F:Amazon.ECR.LayerFailureCode.MissingLayerDigest">
            <summary>
            Constant MissingLayerDigest for LayerFailureCode
            </summary>
        </member>
        <member name="M:Amazon.ECR.LayerFailureCode.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.ECR.LayerFailureCode.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.ECR.LayerFailureCode.op_Implicit(System.String)~Amazon.ECR.LayerFailureCode">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.ECR.LifecyclePolicyPreviewStatus">
            <summary>
            Constants used for properties of type LifecyclePolicyPreviewStatus.
            </summary>
        </member>
        <member name="F:Amazon.ECR.LifecyclePolicyPreviewStatus.COMPLETE">
            <summary>
            Constant COMPLETE for LifecyclePolicyPreviewStatus
            </summary>
        </member>
        <member name="F:Amazon.ECR.LifecyclePolicyPreviewStatus.EXPIRED">
            <summary>
            Constant EXPIRED for LifecyclePolicyPreviewStatus
            </summary>
        </member>
        <member name="F:Amazon.ECR.LifecyclePolicyPreviewStatus.FAILED">
            <summary>
            Constant FAILED for LifecyclePolicyPreviewStatus
            </summary>
        </member>
        <member name="F:Amazon.ECR.LifecyclePolicyPreviewStatus.IN_PROGRESS">
            <summary>
            Constant IN_PROGRESS for LifecyclePolicyPreviewStatus
            </summary>
        </member>
        <member name="M:Amazon.ECR.LifecyclePolicyPreviewStatus.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.ECR.LifecyclePolicyPreviewStatus.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.ECR.LifecyclePolicyPreviewStatus.op_Implicit(System.String)~Amazon.ECR.LifecyclePolicyPreviewStatus">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.ECR.TagStatus">
            <summary>
            Constants used for properties of type TagStatus.
            </summary>
        </member>
        <member name="F:Amazon.ECR.TagStatus.ANY">
            <summary>
            Constant ANY for TagStatus
            </summary>
        </member>
        <member name="F:Amazon.ECR.TagStatus.TAGGED">
            <summary>
            Constant TAGGED for TagStatus
            </summary>
        </member>
        <member name="F:Amazon.ECR.TagStatus.UNTAGGED">
            <summary>
            Constant UNTAGGED for TagStatus
            </summary>
        </member>
        <member name="M:Amazon.ECR.TagStatus.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.ECR.TagStatus.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.ECR.TagStatus.op_Implicit(System.String)~Amazon.ECR.TagStatus">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.ECR.AmazonECRClient">
             <summary>
             Implementation for accessing ECR
            
             Amazon Elastic Container Registry 
             <para>
             Amazon Elastic Container Registry (Amazon ECR) is a managed Docker registry service.
             Customers can use the familiar Docker CLI to push, pull, and manage images. Amazon
             ECR provides a secure, scalable, and reliable registry. Amazon ECR supports private
             Docker repositories with resource-based permissions using IAM so that specific users
             or Amazon EC2 instances can access repositories and images. Developers can use the
             Docker CLI to author and manage images.
             </para>
             </summary>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.#ctor">
             <summary>
             Constructs AmazonECRClient with the credentials loaded from the application's
             default configuration, and if unsuccessful from the Instance Profile service on an EC2 instance.
             
             Example App.config with credentials set. 
             <code>
             &lt;?xml version="1.0" encoding="utf-8" ?&gt;
             &lt;configuration&gt;
                 &lt;appSettings&gt;
                     &lt;add key="AWSProfileName" value="AWS Default"/&gt;
                 &lt;/appSettings&gt;
             &lt;/configuration&gt;
             </code>
            
             </summary>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.#ctor(Amazon.RegionEndpoint)">
             <summary>
             Constructs AmazonECRClient with the credentials loaded from the application's
             default configuration, and if unsuccessful from the Instance Profile service on an EC2 instance.
             
             Example App.config with credentials set. 
             <code>
             &lt;?xml version="1.0" encoding="utf-8" ?&gt;
             &lt;configuration&gt;
                 &lt;appSettings&gt;
                     &lt;add key="AWSProfileName" value="AWS Default"/&gt;
                 &lt;/appSettings&gt;
             &lt;/configuration&gt;
             </code>
            
             </summary>
             <param name="region">The region to connect.</param>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.#ctor(Amazon.ECR.AmazonECRConfig)">
             <summary>
             Constructs AmazonECRClient with the credentials loaded from the application's
             default configuration, and if unsuccessful from the Instance Profile service on an EC2 instance.
             
             Example App.config with credentials set. 
             <code>
             &lt;?xml version="1.0" encoding="utf-8" ?&gt;
             &lt;configuration&gt;
                 &lt;appSettings&gt;
                     &lt;add key="AWSProfileName" value="AWS Default"/&gt;
                 &lt;/appSettings&gt;
             &lt;/configuration&gt;
             </code>
            
             </summary>
             <param name="config">The AmazonECRClient Configuration Object</param>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.#ctor(Amazon.Runtime.AWSCredentials)">
            <summary>
            Constructs AmazonECRClient with AWS Credentials
            </summary>
            <param name="credentials">AWS Credentials</param>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.#ctor(Amazon.Runtime.AWSCredentials,Amazon.RegionEndpoint)">
            <summary>
            Constructs AmazonECRClient with AWS Credentials
            </summary>
            <param name="credentials">AWS Credentials</param>
            <param name="region">The region to connect.</param>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.#ctor(Amazon.Runtime.AWSCredentials,Amazon.ECR.AmazonECRConfig)">
            <summary>
            Constructs AmazonECRClient with AWS Credentials and an
            AmazonECRClient Configuration object.
            </summary>
            <param name="credentials">AWS Credentials</param>
            <param name="clientConfig">The AmazonECRClient Configuration Object</param>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.#ctor(System.String,System.String)">
            <summary>
            Constructs AmazonECRClient with AWS Access Key ID and AWS Secret Key
            </summary>
            <param name="awsAccessKeyId">AWS Access Key ID</param>
            <param name="awsSecretAccessKey">AWS Secret Access Key</param>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.#ctor(System.String,System.String,Amazon.RegionEndpoint)">
            <summary>
            Constructs AmazonECRClient with AWS Access Key ID and AWS Secret Key
            </summary>
            <param name="awsAccessKeyId">AWS Access Key ID</param>
            <param name="awsSecretAccessKey">AWS Secret Access Key</param>
            <param name="region">The region to connect.</param>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.#ctor(System.String,System.String,Amazon.ECR.AmazonECRConfig)">
            <summary>
            Constructs AmazonECRClient with AWS Access Key ID, AWS Secret Key and an
            AmazonECRClient Configuration object. 
            </summary>
            <param name="awsAccessKeyId">AWS Access Key ID</param>
            <param name="awsSecretAccessKey">AWS Secret Access Key</param>
            <param name="clientConfig">The AmazonECRClient Configuration Object</param>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructs AmazonECRClient with AWS Access Key ID and AWS Secret Key
            </summary>
            <param name="awsAccessKeyId">AWS Access Key ID</param>
            <param name="awsSecretAccessKey">AWS Secret Access Key</param>
            <param name="awsSessionToken">AWS Session Token</param>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.#ctor(System.String,System.String,System.String,Amazon.RegionEndpoint)">
            <summary>
            Constructs AmazonECRClient with AWS Access Key ID and AWS Secret Key
            </summary>
            <param name="awsAccessKeyId">AWS Access Key ID</param>
            <param name="awsSecretAccessKey">AWS Secret Access Key</param>
            <param name="awsSessionToken">AWS Session Token</param>
            <param name="region">The region to connect.</param>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.#ctor(System.String,System.String,System.String,Amazon.ECR.AmazonECRConfig)">
            <summary>
            Constructs AmazonECRClient with AWS Access Key ID, AWS Secret Key and an
            AmazonECRClient Configuration object. 
            </summary>
            <param name="awsAccessKeyId">AWS Access Key ID</param>
            <param name="awsSecretAccessKey">AWS Secret Access Key</param>
            <param name="awsSessionToken">AWS Session Token</param>
            <param name="clientConfig">The AmazonECRClient Configuration Object</param>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.CreateSigner">
            <summary>
            Creates the signer for the service.
            </summary>
        </member>
        <member name="P:Amazon.ECR.AmazonECRClient.ServiceMetadata">
            <summary>
            Capture metadata for the service.
            </summary>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.Dispose(System.Boolean)">
            <summary>
            Disposes the service client.
            </summary>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.BatchCheckLayerAvailabilityAsync(Amazon.ECR.Model.BatchCheckLayerAvailabilityRequest,System.Threading.CancellationToken)">
            <summary>
            Check the availability of multiple image layers in a specified registry and repository.
            
             <note> 
            <para>
            This operation is used by the Amazon ECR proxy, and it is not intended for general
            use by customers for pulling and pushing images. In most cases, you should use the
            <code>docker</code> CLI to pull, tag, and push images.
            </para>
             </note>
            </summary>
            <param name="request">Container for the necessary parameters to execute the BatchCheckLayerAvailability service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the BatchCheckLayerAvailability service method, as returned by ECR.</returns>
            <exception cref="T:Amazon.ECR.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/BatchCheckLayerAvailability">REST API Reference for BatchCheckLayerAvailability Operation</seealso>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.BatchDeleteImageAsync(Amazon.ECR.Model.BatchDeleteImageRequest,System.Threading.CancellationToken)">
            <summary>
            Deletes a list of specified images within a specified repository. Images are specified
            with either <code>imageTag</code> or <code>imageDigest</code>.
            
             
            <para>
            You can remove a tag from an image by specifying the image's tag in your request.
            When you remove the last tag from an image, the image is deleted from your repository.
            </para>
             
            <para>
            You can completely delete an image (and all of its tags) by specifying the image's
            digest in your request.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the BatchDeleteImage service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the BatchDeleteImage service method, as returned by ECR.</returns>
            <exception cref="T:Amazon.ECR.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/BatchDeleteImage">REST API Reference for BatchDeleteImage Operation</seealso>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.BatchGetImageAsync(Amazon.ECR.Model.BatchGetImageRequest,System.Threading.CancellationToken)">
            <summary>
            Gets detailed information for specified images within a specified repository. Images
            are specified with either <code>imageTag</code> or <code>imageDigest</code>.
            </summary>
            <param name="request">Container for the necessary parameters to execute the BatchGetImage service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the BatchGetImage service method, as returned by ECR.</returns>
            <exception cref="T:Amazon.ECR.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/BatchGetImage">REST API Reference for BatchGetImage Operation</seealso>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.CompleteLayerUploadAsync(Amazon.ECR.Model.CompleteLayerUploadRequest,System.Threading.CancellationToken)">
            <summary>
            Informs Amazon ECR that the image layer upload has completed for a specified registry,
            repository name, and upload ID. You can optionally provide a <code>sha256</code> digest
            of the image layer for data validation purposes.
            
             <note> 
            <para>
            This operation is used by the Amazon ECR proxy, and it is not intended for general
            use by customers for pulling and pushing images. In most cases, you should use the
            <code>docker</code> CLI to pull, tag, and push images.
            </para>
             </note>
            </summary>
            <param name="request">Container for the necessary parameters to execute the CompleteLayerUpload service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the CompleteLayerUpload service method, as returned by ECR.</returns>
            <exception cref="T:Amazon.ECR.Model.EmptyUploadException">
            The specified layer upload does not contain any layer parts.
            </exception>
            <exception cref="T:Amazon.ECR.Model.InvalidLayerException">
            The layer digest calculation performed by Amazon ECR upon receipt of the image layer
            does not match the digest specified.
            </exception>
            <exception cref="T:Amazon.ECR.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECR.Model.LayerAlreadyExistsException">
            The image layer already exists in the associated repository.
            </exception>
            <exception cref="T:Amazon.ECR.Model.LayerPartTooSmallException">
            Layer parts must be at least 5 MiB in size.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <exception cref="T:Amazon.ECR.Model.UploadNotFoundException">
            The upload could not be found, or the specified upload id is not valid for this repository.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/CompleteLayerUpload">REST API Reference for CompleteLayerUpload Operation</seealso>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.CreateRepositoryAsync(Amazon.ECR.Model.CreateRepositoryRequest,System.Threading.CancellationToken)">
            <summary>
            Creates an image repository.
            </summary>
            <param name="request">Container for the necessary parameters to execute the CreateRepository service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the CreateRepository service method, as returned by ECR.</returns>
            <exception cref="T:Amazon.ECR.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECR.Model.InvalidTagParameterException">
            An invalid parameter has been specified. Tag keys can have a maximum character length
            of 128 characters, and tag values can have a maximum length of 256 characters.
            </exception>
            <exception cref="T:Amazon.ECR.Model.LimitExceededException">
            The operation did not succeed because it would have exceeded a service limit for your
            account. For more information, see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/service_limits.html">Amazon
            ECR Default Service Limits</a> in the Amazon Elastic Container Registry User Guide.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryAlreadyExistsException">
            The specified repository already exists in the specified registry.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <exception cref="T:Amazon.ECR.Model.TooManyTagsException">
            The list of tags on the repository is over the limit. The maximum number of tags that
            can be applied to a repository is 50.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/CreateRepository">REST API Reference for CreateRepository Operation</seealso>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.DeleteLifecyclePolicyAsync(Amazon.ECR.Model.DeleteLifecyclePolicyRequest,System.Threading.CancellationToken)">
            <summary>
            Deletes the specified lifecycle policy.
            </summary>
            <param name="request">Container for the necessary parameters to execute the DeleteLifecyclePolicy service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DeleteLifecyclePolicy service method, as returned by ECR.</returns>
            <exception cref="T:Amazon.ECR.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECR.Model.LifecyclePolicyNotFoundException">
            The lifecycle policy could not be found, and no policy is set to the repository.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/DeleteLifecyclePolicy">REST API Reference for DeleteLifecyclePolicy Operation</seealso>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.DeleteRepositoryAsync(Amazon.ECR.Model.DeleteRepositoryRequest,System.Threading.CancellationToken)">
            <summary>
            Deletes an existing image repository. If a repository contains images, you must use
            the <code>force</code> option to delete it.
            </summary>
            <param name="request">Container for the necessary parameters to execute the DeleteRepository service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DeleteRepository service method, as returned by ECR.</returns>
            <exception cref="T:Amazon.ECR.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryNotEmptyException">
            The specified repository contains images. To delete a repository that contains images,
            you must force the deletion with the <code>force</code> parameter.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/DeleteRepository">REST API Reference for DeleteRepository Operation</seealso>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.DeleteRepositoryPolicyAsync(Amazon.ECR.Model.DeleteRepositoryPolicyRequest,System.Threading.CancellationToken)">
            <summary>
            Deletes the repository policy from a specified repository.
            </summary>
            <param name="request">Container for the necessary parameters to execute the DeleteRepositoryPolicy service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DeleteRepositoryPolicy service method, as returned by ECR.</returns>
            <exception cref="T:Amazon.ECR.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryPolicyNotFoundException">
            The specified repository and registry combination does not have an associated repository
            policy.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/DeleteRepositoryPolicy">REST API Reference for DeleteRepositoryPolicy Operation</seealso>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.DescribeImagesAsync(Amazon.ECR.Model.DescribeImagesRequest,System.Threading.CancellationToken)">
            <summary>
            Returns metadata about the images in a repository, including image size, image tags,
            and creation date.
            
             <note> 
            <para>
            Beginning with Docker version 1.9, the Docker client compresses image layers before
            pushing them to a V2 Docker registry. The output of the <code>docker images</code>
            command shows the uncompressed image size, so it may return a larger image size than
            the image sizes returned by <a>DescribeImages</a>.
            </para>
             </note>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DescribeImages service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DescribeImages service method, as returned by ECR.</returns>
            <exception cref="T:Amazon.ECR.Model.ImageNotFoundException">
            The image requested does not exist in the specified repository.
            </exception>
            <exception cref="T:Amazon.ECR.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/DescribeImages">REST API Reference for DescribeImages Operation</seealso>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.DescribeRepositoriesAsync(Amazon.ECR.Model.DescribeRepositoriesRequest,System.Threading.CancellationToken)">
            <summary>
            Describes image repositories in a registry.
            </summary>
            <param name="request">Container for the necessary parameters to execute the DescribeRepositories service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DescribeRepositories service method, as returned by ECR.</returns>
            <exception cref="T:Amazon.ECR.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/DescribeRepositories">REST API Reference for DescribeRepositories Operation</seealso>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.GetAuthorizationTokenAsync(Amazon.ECR.Model.GetAuthorizationTokenRequest,System.Threading.CancellationToken)">
            <summary>
            Retrieves a token that is valid for a specified registry for 12 hours. This command
            allows you to use the <code>docker</code> CLI to push and pull images with Amazon
            ECR. If you do not specify a registry, the default registry is assumed.
            
             
            <para>
            The <code>authorizationToken</code> returned for each registry specified is a base64
            encoded string that can be decoded and used in a <code>docker login</code> command
            to authenticate to a registry. The AWS CLI offers an <code>aws ecr get-login</code>
            command that simplifies the login process.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the GetAuthorizationToken service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the GetAuthorizationToken service method, as returned by ECR.</returns>
            <exception cref="T:Amazon.ECR.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/GetAuthorizationToken">REST API Reference for GetAuthorizationToken Operation</seealso>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.GetDownloadUrlForLayerAsync(Amazon.ECR.Model.GetDownloadUrlForLayerRequest,System.Threading.CancellationToken)">
            <summary>
            Retrieves the pre-signed Amazon S3 download URL corresponding to an image layer. You
            can only get URLs for image layers that are referenced in an image.
            
             <note> 
            <para>
            This operation is used by the Amazon ECR proxy, and it is not intended for general
            use by customers for pulling and pushing images. In most cases, you should use the
            <code>docker</code> CLI to pull, tag, and push images.
            </para>
             </note>
            </summary>
            <param name="request">Container for the necessary parameters to execute the GetDownloadUrlForLayer service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the GetDownloadUrlForLayer service method, as returned by ECR.</returns>
            <exception cref="T:Amazon.ECR.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECR.Model.LayerInaccessibleException">
            The specified layer is not available because it is not associated with an image. Unassociated
            image layers may be cleaned up at any time.
            </exception>
            <exception cref="T:Amazon.ECR.Model.LayersNotFoundException">
            The specified layers could not be found, or the specified layer is not valid for this
            repository.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/GetDownloadUrlForLayer">REST API Reference for GetDownloadUrlForLayer Operation</seealso>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.GetLifecyclePolicyAsync(Amazon.ECR.Model.GetLifecyclePolicyRequest,System.Threading.CancellationToken)">
            <summary>
            Retrieves the specified lifecycle policy.
            </summary>
            <param name="request">Container for the necessary parameters to execute the GetLifecyclePolicy service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the GetLifecyclePolicy service method, as returned by ECR.</returns>
            <exception cref="T:Amazon.ECR.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECR.Model.LifecyclePolicyNotFoundException">
            The lifecycle policy could not be found, and no policy is set to the repository.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/GetLifecyclePolicy">REST API Reference for GetLifecyclePolicy Operation</seealso>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.GetLifecyclePolicyPreviewAsync(Amazon.ECR.Model.GetLifecyclePolicyPreviewRequest,System.Threading.CancellationToken)">
            <summary>
            Retrieves the results of the specified lifecycle policy preview request.
            </summary>
            <param name="request">Container for the necessary parameters to execute the GetLifecyclePolicyPreview service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the GetLifecyclePolicyPreview service method, as returned by ECR.</returns>
            <exception cref="T:Amazon.ECR.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECR.Model.LifecyclePolicyPreviewNotFoundException">
            There is no dry run for this repository.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/GetLifecyclePolicyPreview">REST API Reference for GetLifecyclePolicyPreview Operation</seealso>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.GetRepositoryPolicyAsync(Amazon.ECR.Model.GetRepositoryPolicyRequest,System.Threading.CancellationToken)">
            <summary>
            Retrieves the repository policy for a specified repository.
            </summary>
            <param name="request">Container for the necessary parameters to execute the GetRepositoryPolicy service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the GetRepositoryPolicy service method, as returned by ECR.</returns>
            <exception cref="T:Amazon.ECR.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryPolicyNotFoundException">
            The specified repository and registry combination does not have an associated repository
            policy.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/GetRepositoryPolicy">REST API Reference for GetRepositoryPolicy Operation</seealso>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.InitiateLayerUploadAsync(Amazon.ECR.Model.InitiateLayerUploadRequest,System.Threading.CancellationToken)">
            <summary>
            Notify Amazon ECR that you intend to upload an image layer.
            
             <note> 
            <para>
            This operation is used by the Amazon ECR proxy, and it is not intended for general
            use by customers for pulling and pushing images. In most cases, you should use the
            <code>docker</code> CLI to pull, tag, and push images.
            </para>
             </note>
            </summary>
            <param name="request">Container for the necessary parameters to execute the InitiateLayerUpload service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the InitiateLayerUpload service method, as returned by ECR.</returns>
            <exception cref="T:Amazon.ECR.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/InitiateLayerUpload">REST API Reference for InitiateLayerUpload Operation</seealso>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.ListImagesAsync(Amazon.ECR.Model.ListImagesRequest,System.Threading.CancellationToken)">
            <summary>
            Lists all the image IDs for a given repository.
            
             
            <para>
            You can filter images based on whether or not they are tagged by setting the <code>tagStatus</code>
            parameter to <code>TAGGED</code> or <code>UNTAGGED</code>. For example, you can filter
            your results to return only <code>UNTAGGED</code> images and then pipe that result
            to a <a>BatchDeleteImage</a> operation to delete them. Or, you can filter your results
            to return only <code>TAGGED</code> images to list all of the tags in your repository.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the ListImages service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the ListImages service method, as returned by ECR.</returns>
            <exception cref="T:Amazon.ECR.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/ListImages">REST API Reference for ListImages Operation</seealso>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.ListTagsForResourceAsync(Amazon.ECR.Model.ListTagsForResourceRequest,System.Threading.CancellationToken)">
            <summary>
            List the tags for an Amazon ECR resource.
            </summary>
            <param name="request">Container for the necessary parameters to execute the ListTagsForResource service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the ListTagsForResource service method, as returned by ECR.</returns>
            <exception cref="T:Amazon.ECR.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/ListTagsForResource">REST API Reference for ListTagsForResource Operation</seealso>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.PutImageAsync(Amazon.ECR.Model.PutImageRequest,System.Threading.CancellationToken)">
            <summary>
            Creates or updates the image manifest and tags associated with an image.
            
             <note> 
            <para>
            This operation is used by the Amazon ECR proxy, and it is not intended for general
            use by customers for pulling and pushing images. In most cases, you should use the
            <code>docker</code> CLI to pull, tag, and push images.
            </para>
             </note>
            </summary>
            <param name="request">Container for the necessary parameters to execute the PutImage service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the PutImage service method, as returned by ECR.</returns>
            <exception cref="T:Amazon.ECR.Model.ImageAlreadyExistsException">
            The specified image has already been pushed, and there were no changes to the manifest
            or image tag after the last push.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ImageTagAlreadyExistsException">
            The specified image is tagged with a tag that already exists. The repository is configured
            for tag immutability.
            </exception>
            <exception cref="T:Amazon.ECR.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECR.Model.LayersNotFoundException">
            The specified layers could not be found, or the specified layer is not valid for this
            repository.
            </exception>
            <exception cref="T:Amazon.ECR.Model.LimitExceededException">
            The operation did not succeed because it would have exceeded a service limit for your
            account. For more information, see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/service_limits.html">Amazon
            ECR Default Service Limits</a> in the Amazon Elastic Container Registry User Guide.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/PutImage">REST API Reference for PutImage Operation</seealso>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.PutImageTagMutabilityAsync(Amazon.ECR.Model.PutImageTagMutabilityRequest,System.Threading.CancellationToken)">
            <summary>
            Updates the image tag mutability settings for a repository.
            </summary>
            <param name="request">Container for the necessary parameters to execute the PutImageTagMutability service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the PutImageTagMutability service method, as returned by ECR.</returns>
            <exception cref="T:Amazon.ECR.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/PutImageTagMutability">REST API Reference for PutImageTagMutability Operation</seealso>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.PutLifecyclePolicyAsync(Amazon.ECR.Model.PutLifecyclePolicyRequest,System.Threading.CancellationToken)">
            <summary>
            Creates or updates a lifecycle policy. For information about lifecycle policy syntax,
            see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/LifecyclePolicies.html">Lifecycle
            Policy Template</a>.
            </summary>
            <param name="request">Container for the necessary parameters to execute the PutLifecyclePolicy service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the PutLifecyclePolicy service method, as returned by ECR.</returns>
            <exception cref="T:Amazon.ECR.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/PutLifecyclePolicy">REST API Reference for PutLifecyclePolicy Operation</seealso>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.SetRepositoryPolicyAsync(Amazon.ECR.Model.SetRepositoryPolicyRequest,System.Threading.CancellationToken)">
            <summary>
            Applies a repository policy on a specified repository to control access permissions.
            For more information, see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/RepositoryPolicies.html">Amazon
            ECR Repository Policies</a> in the <i>Amazon Elastic Container Registry User Guide</i>.
            </summary>
            <param name="request">Container for the necessary parameters to execute the SetRepositoryPolicy service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the SetRepositoryPolicy service method, as returned by ECR.</returns>
            <exception cref="T:Amazon.ECR.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/SetRepositoryPolicy">REST API Reference for SetRepositoryPolicy Operation</seealso>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.StartLifecyclePolicyPreviewAsync(Amazon.ECR.Model.StartLifecyclePolicyPreviewRequest,System.Threading.CancellationToken)">
            <summary>
            Starts a preview of the specified lifecycle policy. This allows you to see the results
            before creating the lifecycle policy.
            </summary>
            <param name="request">Container for the necessary parameters to execute the StartLifecyclePolicyPreview service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the StartLifecyclePolicyPreview service method, as returned by ECR.</returns>
            <exception cref="T:Amazon.ECR.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECR.Model.LifecyclePolicyNotFoundException">
            The lifecycle policy could not be found, and no policy is set to the repository.
            </exception>
            <exception cref="T:Amazon.ECR.Model.LifecyclePolicyPreviewInProgressException">
            The previous lifecycle policy preview request has not completed. Please try again
            later.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/StartLifecyclePolicyPreview">REST API Reference for StartLifecyclePolicyPreview Operation</seealso>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.TagResourceAsync(Amazon.ECR.Model.TagResourceRequest,System.Threading.CancellationToken)">
            <summary>
            Adds specified tags to a resource with the specified ARN. Existing tags on a resource
            are not changed if they are not specified in the request parameters.
            </summary>
            <param name="request">Container for the necessary parameters to execute the TagResource service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the TagResource service method, as returned by ECR.</returns>
            <exception cref="T:Amazon.ECR.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECR.Model.InvalidTagParameterException">
            An invalid parameter has been specified. Tag keys can have a maximum character length
            of 128 characters, and tag values can have a maximum length of 256 characters.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <exception cref="T:Amazon.ECR.Model.TooManyTagsException">
            The list of tags on the repository is over the limit. The maximum number of tags that
            can be applied to a repository is 50.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/TagResource">REST API Reference for TagResource Operation</seealso>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.UntagResourceAsync(Amazon.ECR.Model.UntagResourceRequest,System.Threading.CancellationToken)">
            <summary>
            Deletes specified tags from a resource.
            </summary>
            <param name="request">Container for the necessary parameters to execute the UntagResource service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the UntagResource service method, as returned by ECR.</returns>
            <exception cref="T:Amazon.ECR.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECR.Model.InvalidTagParameterException">
            An invalid parameter has been specified. Tag keys can have a maximum character length
            of 128 characters, and tag values can have a maximum length of 256 characters.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <exception cref="T:Amazon.ECR.Model.TooManyTagsException">
            The list of tags on the repository is over the limit. The maximum number of tags that
            can be applied to a repository is 50.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/UntagResource">REST API Reference for UntagResource Operation</seealso>
        </member>
        <member name="M:Amazon.ECR.AmazonECRClient.UploadLayerPartAsync(Amazon.ECR.Model.UploadLayerPartRequest,System.Threading.CancellationToken)">
            <summary>
            Uploads an image layer part to Amazon ECR.
            
             <note> 
            <para>
            This operation is used by the Amazon ECR proxy, and it is not intended for general
            use by customers for pulling and pushing images. In most cases, you should use the
            <code>docker</code> CLI to pull, tag, and push images.
            </para>
             </note>
            </summary>
            <param name="request">Container for the necessary parameters to execute the UploadLayerPart service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the UploadLayerPart service method, as returned by ECR.</returns>
            <exception cref="T:Amazon.ECR.Model.InvalidLayerPartException">
            The layer part size is not valid, or the first byte specified is not consecutive to
            the last byte of a previous layer part upload.
            </exception>
            <exception cref="T:Amazon.ECR.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECR.Model.LimitExceededException">
            The operation did not succeed because it would have exceeded a service limit for your
            account. For more information, see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/service_limits.html">Amazon
            ECR Default Service Limits</a> in the Amazon Elastic Container Registry User Guide.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <exception cref="T:Amazon.ECR.Model.UploadNotFoundException">
            The upload could not be found, or the specified upload id is not valid for this repository.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/UploadLayerPart">REST API Reference for UploadLayerPart Operation</seealso>
        </member>
        <member name="T:Amazon.ECR.IAmazonECR">
             <summary>
             Interface for accessing ECR
            
             Amazon Elastic Container Registry 
             <para>
             Amazon Elastic Container Registry (Amazon ECR) is a managed Docker registry service.
             Customers can use the familiar Docker CLI to push, pull, and manage images. Amazon
             ECR provides a secure, scalable, and reliable registry. Amazon ECR supports private
             Docker repositories with resource-based permissions using IAM so that specific users
             or Amazon EC2 instances can access repositories and images. Developers can use the
             Docker CLI to author and manage images.
             </para>
             </summary>
        </member>
        <member name="M:Amazon.ECR.IAmazonECR.BatchCheckLayerAvailabilityAsync(Amazon.ECR.Model.BatchCheckLayerAvailabilityRequest,System.Threading.CancellationToken)">
            <summary>
            Check the availability of multiple image layers in a specified registry and repository.
            
             <note> 
            <para>
            This operation is used by the Amazon ECR proxy, and it is not intended for general
            use by customers for pulling and pushing images. In most cases, you should use the
            <code>docker</code> CLI to pull, tag, and push images.
            </para>
             </note>
            </summary>
            <param name="request">Container for the necessary parameters to execute the BatchCheckLayerAvailability service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the BatchCheckLayerAvailability service method, as returned by ECR.</returns>
            <exception cref="T:Amazon.ECR.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/BatchCheckLayerAvailability">REST API Reference for BatchCheckLayerAvailability Operation</seealso>
        </member>
        <member name="M:Amazon.ECR.IAmazonECR.BatchDeleteImageAsync(Amazon.ECR.Model.BatchDeleteImageRequest,System.Threading.CancellationToken)">
            <summary>
            Deletes a list of specified images within a specified repository. Images are specified
            with either <code>imageTag</code> or <code>imageDigest</code>.
            
             
            <para>
            You can remove a tag from an image by specifying the image's tag in your request.
            When you remove the last tag from an image, the image is deleted from your repository.
            </para>
             
            <para>
            You can completely delete an image (and all of its tags) by specifying the image's
            digest in your request.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the BatchDeleteImage service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the BatchDeleteImage service method, as returned by ECR.</returns>
            <exception cref="T:Amazon.ECR.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/BatchDeleteImage">REST API Reference for BatchDeleteImage Operation</seealso>
        </member>
        <member name="M:Amazon.ECR.IAmazonECR.BatchGetImageAsync(Amazon.ECR.Model.BatchGetImageRequest,System.Threading.CancellationToken)">
            <summary>
            Gets detailed information for specified images within a specified repository. Images
            are specified with either <code>imageTag</code> or <code>imageDigest</code>.
            </summary>
            <param name="request">Container for the necessary parameters to execute the BatchGetImage service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the BatchGetImage service method, as returned by ECR.</returns>
            <exception cref="T:Amazon.ECR.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/BatchGetImage">REST API Reference for BatchGetImage Operation</seealso>
        </member>
        <member name="M:Amazon.ECR.IAmazonECR.CompleteLayerUploadAsync(Amazon.ECR.Model.CompleteLayerUploadRequest,System.Threading.CancellationToken)">
            <summary>
            Informs Amazon ECR that the image layer upload has completed for a specified registry,
            repository name, and upload ID. You can optionally provide a <code>sha256</code> digest
            of the image layer for data validation purposes.
            
             <note> 
            <para>
            This operation is used by the Amazon ECR proxy, and it is not intended for general
            use by customers for pulling and pushing images. In most cases, you should use the
            <code>docker</code> CLI to pull, tag, and push images.
            </para>
             </note>
            </summary>
            <param name="request">Container for the necessary parameters to execute the CompleteLayerUpload service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the CompleteLayerUpload service method, as returned by ECR.</returns>
            <exception cref="T:Amazon.ECR.Model.EmptyUploadException">
            The specified layer upload does not contain any layer parts.
            </exception>
            <exception cref="T:Amazon.ECR.Model.InvalidLayerException">
            The layer digest calculation performed by Amazon ECR upon receipt of the image layer
            does not match the digest specified.
            </exception>
            <exception cref="T:Amazon.ECR.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECR.Model.LayerAlreadyExistsException">
            The image layer already exists in the associated repository.
            </exception>
            <exception cref="T:Amazon.ECR.Model.LayerPartTooSmallException">
            Layer parts must be at least 5 MiB in size.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <exception cref="T:Amazon.ECR.Model.UploadNotFoundException">
            The upload could not be found, or the specified upload id is not valid for this repository.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/CompleteLayerUpload">REST API Reference for CompleteLayerUpload Operation</seealso>
        </member>
        <member name="M:Amazon.ECR.IAmazonECR.CreateRepositoryAsync(Amazon.ECR.Model.CreateRepositoryRequest,System.Threading.CancellationToken)">
            <summary>
            Creates an image repository.
            </summary>
            <param name="request">Container for the necessary parameters to execute the CreateRepository service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the CreateRepository service method, as returned by ECR.</returns>
            <exception cref="T:Amazon.ECR.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECR.Model.InvalidTagParameterException">
            An invalid parameter has been specified. Tag keys can have a maximum character length
            of 128 characters, and tag values can have a maximum length of 256 characters.
            </exception>
            <exception cref="T:Amazon.ECR.Model.LimitExceededException">
            The operation did not succeed because it would have exceeded a service limit for your
            account. For more information, see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/service_limits.html">Amazon
            ECR Default Service Limits</a> in the Amazon Elastic Container Registry User Guide.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryAlreadyExistsException">
            The specified repository already exists in the specified registry.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <exception cref="T:Amazon.ECR.Model.TooManyTagsException">
            The list of tags on the repository is over the limit. The maximum number of tags that
            can be applied to a repository is 50.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/CreateRepository">REST API Reference for CreateRepository Operation</seealso>
        </member>
        <member name="M:Amazon.ECR.IAmazonECR.DeleteLifecyclePolicyAsync(Amazon.ECR.Model.DeleteLifecyclePolicyRequest,System.Threading.CancellationToken)">
            <summary>
            Deletes the specified lifecycle policy.
            </summary>
            <param name="request">Container for the necessary parameters to execute the DeleteLifecyclePolicy service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DeleteLifecyclePolicy service method, as returned by ECR.</returns>
            <exception cref="T:Amazon.ECR.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECR.Model.LifecyclePolicyNotFoundException">
            The lifecycle policy could not be found, and no policy is set to the repository.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/DeleteLifecyclePolicy">REST API Reference for DeleteLifecyclePolicy Operation</seealso>
        </member>
        <member name="M:Amazon.ECR.IAmazonECR.DeleteRepositoryAsync(Amazon.ECR.Model.DeleteRepositoryRequest,System.Threading.CancellationToken)">
            <summary>
            Deletes an existing image repository. If a repository contains images, you must use
            the <code>force</code> option to delete it.
            </summary>
            <param name="request">Container for the necessary parameters to execute the DeleteRepository service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DeleteRepository service method, as returned by ECR.</returns>
            <exception cref="T:Amazon.ECR.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryNotEmptyException">
            The specified repository contains images. To delete a repository that contains images,
            you must force the deletion with the <code>force</code> parameter.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/DeleteRepository">REST API Reference for DeleteRepository Operation</seealso>
        </member>
        <member name="M:Amazon.ECR.IAmazonECR.DeleteRepositoryPolicyAsync(Amazon.ECR.Model.DeleteRepositoryPolicyRequest,System.Threading.CancellationToken)">
            <summary>
            Deletes the repository policy from a specified repository.
            </summary>
            <param name="request">Container for the necessary parameters to execute the DeleteRepositoryPolicy service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DeleteRepositoryPolicy service method, as returned by ECR.</returns>
            <exception cref="T:Amazon.ECR.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryPolicyNotFoundException">
            The specified repository and registry combination does not have an associated repository
            policy.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/DeleteRepositoryPolicy">REST API Reference for DeleteRepositoryPolicy Operation</seealso>
        </member>
        <member name="M:Amazon.ECR.IAmazonECR.DescribeImagesAsync(Amazon.ECR.Model.DescribeImagesRequest,System.Threading.CancellationToken)">
            <summary>
            Returns metadata about the images in a repository, including image size, image tags,
            and creation date.
            
             <note> 
            <para>
            Beginning with Docker version 1.9, the Docker client compresses image layers before
            pushing them to a V2 Docker registry. The output of the <code>docker images</code>
            command shows the uncompressed image size, so it may return a larger image size than
            the image sizes returned by <a>DescribeImages</a>.
            </para>
             </note>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DescribeImages service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DescribeImages service method, as returned by ECR.</returns>
            <exception cref="T:Amazon.ECR.Model.ImageNotFoundException">
            The image requested does not exist in the specified repository.
            </exception>
            <exception cref="T:Amazon.ECR.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/DescribeImages">REST API Reference for DescribeImages Operation</seealso>
        </member>
        <member name="M:Amazon.ECR.IAmazonECR.DescribeRepositoriesAsync(Amazon.ECR.Model.DescribeRepositoriesRequest,System.Threading.CancellationToken)">
            <summary>
            Describes image repositories in a registry.
            </summary>
            <param name="request">Container for the necessary parameters to execute the DescribeRepositories service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DescribeRepositories service method, as returned by ECR.</returns>
            <exception cref="T:Amazon.ECR.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/DescribeRepositories">REST API Reference for DescribeRepositories Operation</seealso>
        </member>
        <member name="M:Amazon.ECR.IAmazonECR.GetAuthorizationTokenAsync(Amazon.ECR.Model.GetAuthorizationTokenRequest,System.Threading.CancellationToken)">
            <summary>
            Retrieves a token that is valid for a specified registry for 12 hours. This command
            allows you to use the <code>docker</code> CLI to push and pull images with Amazon
            ECR. If you do not specify a registry, the default registry is assumed.
            
             
            <para>
            The <code>authorizationToken</code> returned for each registry specified is a base64
            encoded string that can be decoded and used in a <code>docker login</code> command
            to authenticate to a registry. The AWS CLI offers an <code>aws ecr get-login</code>
            command that simplifies the login process.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the GetAuthorizationToken service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the GetAuthorizationToken service method, as returned by ECR.</returns>
            <exception cref="T:Amazon.ECR.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/GetAuthorizationToken">REST API Reference for GetAuthorizationToken Operation</seealso>
        </member>
        <member name="M:Amazon.ECR.IAmazonECR.GetDownloadUrlForLayerAsync(Amazon.ECR.Model.GetDownloadUrlForLayerRequest,System.Threading.CancellationToken)">
            <summary>
            Retrieves the pre-signed Amazon S3 download URL corresponding to an image layer. You
            can only get URLs for image layers that are referenced in an image.
            
             <note> 
            <para>
            This operation is used by the Amazon ECR proxy, and it is not intended for general
            use by customers for pulling and pushing images. In most cases, you should use the
            <code>docker</code> CLI to pull, tag, and push images.
            </para>
             </note>
            </summary>
            <param name="request">Container for the necessary parameters to execute the GetDownloadUrlForLayer service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the GetDownloadUrlForLayer service method, as returned by ECR.</returns>
            <exception cref="T:Amazon.ECR.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECR.Model.LayerInaccessibleException">
            The specified layer is not available because it is not associated with an image. Unassociated
            image layers may be cleaned up at any time.
            </exception>
            <exception cref="T:Amazon.ECR.Model.LayersNotFoundException">
            The specified layers could not be found, or the specified layer is not valid for this
            repository.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/GetDownloadUrlForLayer">REST API Reference for GetDownloadUrlForLayer Operation</seealso>
        </member>
        <member name="M:Amazon.ECR.IAmazonECR.GetLifecyclePolicyAsync(Amazon.ECR.Model.GetLifecyclePolicyRequest,System.Threading.CancellationToken)">
            <summary>
            Retrieves the specified lifecycle policy.
            </summary>
            <param name="request">Container for the necessary parameters to execute the GetLifecyclePolicy service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the GetLifecyclePolicy service method, as returned by ECR.</returns>
            <exception cref="T:Amazon.ECR.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECR.Model.LifecyclePolicyNotFoundException">
            The lifecycle policy could not be found, and no policy is set to the repository.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/GetLifecyclePolicy">REST API Reference for GetLifecyclePolicy Operation</seealso>
        </member>
        <member name="M:Amazon.ECR.IAmazonECR.GetLifecyclePolicyPreviewAsync(Amazon.ECR.Model.GetLifecyclePolicyPreviewRequest,System.Threading.CancellationToken)">
            <summary>
            Retrieves the results of the specified lifecycle policy preview request.
            </summary>
            <param name="request">Container for the necessary parameters to execute the GetLifecyclePolicyPreview service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the GetLifecyclePolicyPreview service method, as returned by ECR.</returns>
            <exception cref="T:Amazon.ECR.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECR.Model.LifecyclePolicyPreviewNotFoundException">
            There is no dry run for this repository.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/GetLifecyclePolicyPreview">REST API Reference for GetLifecyclePolicyPreview Operation</seealso>
        </member>
        <member name="M:Amazon.ECR.IAmazonECR.GetRepositoryPolicyAsync(Amazon.ECR.Model.GetRepositoryPolicyRequest,System.Threading.CancellationToken)">
            <summary>
            Retrieves the repository policy for a specified repository.
            </summary>
            <param name="request">Container for the necessary parameters to execute the GetRepositoryPolicy service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the GetRepositoryPolicy service method, as returned by ECR.</returns>
            <exception cref="T:Amazon.ECR.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryPolicyNotFoundException">
            The specified repository and registry combination does not have an associated repository
            policy.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/GetRepositoryPolicy">REST API Reference for GetRepositoryPolicy Operation</seealso>
        </member>
        <member name="M:Amazon.ECR.IAmazonECR.InitiateLayerUploadAsync(Amazon.ECR.Model.InitiateLayerUploadRequest,System.Threading.CancellationToken)">
            <summary>
            Notify Amazon ECR that you intend to upload an image layer.
            
             <note> 
            <para>
            This operation is used by the Amazon ECR proxy, and it is not intended for general
            use by customers for pulling and pushing images. In most cases, you should use the
            <code>docker</code> CLI to pull, tag, and push images.
            </para>
             </note>
            </summary>
            <param name="request">Container for the necessary parameters to execute the InitiateLayerUpload service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the InitiateLayerUpload service method, as returned by ECR.</returns>
            <exception cref="T:Amazon.ECR.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/InitiateLayerUpload">REST API Reference for InitiateLayerUpload Operation</seealso>
        </member>
        <member name="M:Amazon.ECR.IAmazonECR.ListImagesAsync(Amazon.ECR.Model.ListImagesRequest,System.Threading.CancellationToken)">
            <summary>
            Lists all the image IDs for a given repository.
            
             
            <para>
            You can filter images based on whether or not they are tagged by setting the <code>tagStatus</code>
            parameter to <code>TAGGED</code> or <code>UNTAGGED</code>. For example, you can filter
            your results to return only <code>UNTAGGED</code> images and then pipe that result
            to a <a>BatchDeleteImage</a> operation to delete them. Or, you can filter your results
            to return only <code>TAGGED</code> images to list all of the tags in your repository.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the ListImages service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the ListImages service method, as returned by ECR.</returns>
            <exception cref="T:Amazon.ECR.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/ListImages">REST API Reference for ListImages Operation</seealso>
        </member>
        <member name="M:Amazon.ECR.IAmazonECR.ListTagsForResourceAsync(Amazon.ECR.Model.ListTagsForResourceRequest,System.Threading.CancellationToken)">
            <summary>
            List the tags for an Amazon ECR resource.
            </summary>
            <param name="request">Container for the necessary parameters to execute the ListTagsForResource service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the ListTagsForResource service method, as returned by ECR.</returns>
            <exception cref="T:Amazon.ECR.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/ListTagsForResource">REST API Reference for ListTagsForResource Operation</seealso>
        </member>
        <member name="M:Amazon.ECR.IAmazonECR.PutImageAsync(Amazon.ECR.Model.PutImageRequest,System.Threading.CancellationToken)">
            <summary>
            Creates or updates the image manifest and tags associated with an image.
            
             <note> 
            <para>
            This operation is used by the Amazon ECR proxy, and it is not intended for general
            use by customers for pulling and pushing images. In most cases, you should use the
            <code>docker</code> CLI to pull, tag, and push images.
            </para>
             </note>
            </summary>
            <param name="request">Container for the necessary parameters to execute the PutImage service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the PutImage service method, as returned by ECR.</returns>
            <exception cref="T:Amazon.ECR.Model.ImageAlreadyExistsException">
            The specified image has already been pushed, and there were no changes to the manifest
            or image tag after the last push.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ImageTagAlreadyExistsException">
            The specified image is tagged with a tag that already exists. The repository is configured
            for tag immutability.
            </exception>
            <exception cref="T:Amazon.ECR.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECR.Model.LayersNotFoundException">
            The specified layers could not be found, or the specified layer is not valid for this
            repository.
            </exception>
            <exception cref="T:Amazon.ECR.Model.LimitExceededException">
            The operation did not succeed because it would have exceeded a service limit for your
            account. For more information, see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/service_limits.html">Amazon
            ECR Default Service Limits</a> in the Amazon Elastic Container Registry User Guide.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/PutImage">REST API Reference for PutImage Operation</seealso>
        </member>
        <member name="M:Amazon.ECR.IAmazonECR.PutImageTagMutabilityAsync(Amazon.ECR.Model.PutImageTagMutabilityRequest,System.Threading.CancellationToken)">
            <summary>
            Updates the image tag mutability settings for a repository.
            </summary>
            <param name="request">Container for the necessary parameters to execute the PutImageTagMutability service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the PutImageTagMutability service method, as returned by ECR.</returns>
            <exception cref="T:Amazon.ECR.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/PutImageTagMutability">REST API Reference for PutImageTagMutability Operation</seealso>
        </member>
        <member name="M:Amazon.ECR.IAmazonECR.PutLifecyclePolicyAsync(Amazon.ECR.Model.PutLifecyclePolicyRequest,System.Threading.CancellationToken)">
            <summary>
            Creates or updates a lifecycle policy. For information about lifecycle policy syntax,
            see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/LifecyclePolicies.html">Lifecycle
            Policy Template</a>.
            </summary>
            <param name="request">Container for the necessary parameters to execute the PutLifecyclePolicy service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the PutLifecyclePolicy service method, as returned by ECR.</returns>
            <exception cref="T:Amazon.ECR.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/PutLifecyclePolicy">REST API Reference for PutLifecyclePolicy Operation</seealso>
        </member>
        <member name="M:Amazon.ECR.IAmazonECR.SetRepositoryPolicyAsync(Amazon.ECR.Model.SetRepositoryPolicyRequest,System.Threading.CancellationToken)">
            <summary>
            Applies a repository policy on a specified repository to control access permissions.
            For more information, see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/RepositoryPolicies.html">Amazon
            ECR Repository Policies</a> in the <i>Amazon Elastic Container Registry User Guide</i>.
            </summary>
            <param name="request">Container for the necessary parameters to execute the SetRepositoryPolicy service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the SetRepositoryPolicy service method, as returned by ECR.</returns>
            <exception cref="T:Amazon.ECR.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/SetRepositoryPolicy">REST API Reference for SetRepositoryPolicy Operation</seealso>
        </member>
        <member name="M:Amazon.ECR.IAmazonECR.StartLifecyclePolicyPreviewAsync(Amazon.ECR.Model.StartLifecyclePolicyPreviewRequest,System.Threading.CancellationToken)">
            <summary>
            Starts a preview of the specified lifecycle policy. This allows you to see the results
            before creating the lifecycle policy.
            </summary>
            <param name="request">Container for the necessary parameters to execute the StartLifecyclePolicyPreview service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the StartLifecyclePolicyPreview service method, as returned by ECR.</returns>
            <exception cref="T:Amazon.ECR.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECR.Model.LifecyclePolicyNotFoundException">
            The lifecycle policy could not be found, and no policy is set to the repository.
            </exception>
            <exception cref="T:Amazon.ECR.Model.LifecyclePolicyPreviewInProgressException">
            The previous lifecycle policy preview request has not completed. Please try again
            later.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/StartLifecyclePolicyPreview">REST API Reference for StartLifecyclePolicyPreview Operation</seealso>
        </member>
        <member name="M:Amazon.ECR.IAmazonECR.TagResourceAsync(Amazon.ECR.Model.TagResourceRequest,System.Threading.CancellationToken)">
            <summary>
            Adds specified tags to a resource with the specified ARN. Existing tags on a resource
            are not changed if they are not specified in the request parameters.
            </summary>
            <param name="request">Container for the necessary parameters to execute the TagResource service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the TagResource service method, as returned by ECR.</returns>
            <exception cref="T:Amazon.ECR.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECR.Model.InvalidTagParameterException">
            An invalid parameter has been specified. Tag keys can have a maximum character length
            of 128 characters, and tag values can have a maximum length of 256 characters.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <exception cref="T:Amazon.ECR.Model.TooManyTagsException">
            The list of tags on the repository is over the limit. The maximum number of tags that
            can be applied to a repository is 50.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/TagResource">REST API Reference for TagResource Operation</seealso>
        </member>
        <member name="M:Amazon.ECR.IAmazonECR.UntagResourceAsync(Amazon.ECR.Model.UntagResourceRequest,System.Threading.CancellationToken)">
            <summary>
            Deletes specified tags from a resource.
            </summary>
            <param name="request">Container for the necessary parameters to execute the UntagResource service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the UntagResource service method, as returned by ECR.</returns>
            <exception cref="T:Amazon.ECR.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECR.Model.InvalidTagParameterException">
            An invalid parameter has been specified. Tag keys can have a maximum character length
            of 128 characters, and tag values can have a maximum length of 256 characters.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <exception cref="T:Amazon.ECR.Model.TooManyTagsException">
            The list of tags on the repository is over the limit. The maximum number of tags that
            can be applied to a repository is 50.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/UntagResource">REST API Reference for UntagResource Operation</seealso>
        </member>
        <member name="M:Amazon.ECR.IAmazonECR.UploadLayerPartAsync(Amazon.ECR.Model.UploadLayerPartRequest,System.Threading.CancellationToken)">
            <summary>
            Uploads an image layer part to Amazon ECR.
            
             <note> 
            <para>
            This operation is used by the Amazon ECR proxy, and it is not intended for general
            use by customers for pulling and pushing images. In most cases, you should use the
            <code>docker</code> CLI to pull, tag, and push images.
            </para>
             </note>
            </summary>
            <param name="request">Container for the necessary parameters to execute the UploadLayerPart service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the UploadLayerPart service method, as returned by ECR.</returns>
            <exception cref="T:Amazon.ECR.Model.InvalidLayerPartException">
            The layer part size is not valid, or the first byte specified is not consecutive to
            the last byte of a previous layer part upload.
            </exception>
            <exception cref="T:Amazon.ECR.Model.InvalidParameterException">
            The specified parameter is invalid. Review the available parameters for the API request.
            </exception>
            <exception cref="T:Amazon.ECR.Model.LimitExceededException">
            The operation did not succeed because it would have exceeded a service limit for your
            account. For more information, see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/service_limits.html">Amazon
            ECR Default Service Limits</a> in the Amazon Elastic Container Registry User Guide.
            </exception>
            <exception cref="T:Amazon.ECR.Model.RepositoryNotFoundException">
            The specified repository could not be found. Check the spelling of the specified repository
            and ensure that you are performing operations on the correct registry.
            </exception>
            <exception cref="T:Amazon.ECR.Model.ServerException">
            These errors are usually caused by a server-side issue.
            </exception>
            <exception cref="T:Amazon.ECR.Model.UploadNotFoundException">
            The upload could not be found, or the specified upload id is not valid for this repository.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/ecr-2015-09-21/UploadLayerPart">REST API Reference for UploadLayerPart Operation</seealso>
        </member>
    </members>
</doc>
