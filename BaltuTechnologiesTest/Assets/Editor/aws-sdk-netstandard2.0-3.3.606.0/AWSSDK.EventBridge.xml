<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AWSSDK.EventBridge</name>
    </assembly>
    <members>
        <member name="T:Amazon.EventBridge.AmazonEventBridgeConfig">
            <summary>
            Configuration for accessing Amazon EventBridge service
            </summary>
        </member>
        <member name="M:Amazon.EventBridge.AmazonEventBridgeConfig.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.AmazonEventBridgeConfig.RegionEndpointServiceName">
            <summary>
            The constant used to lookup in the region hash the endpoint.
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.AmazonEventBridgeConfig.ServiceVersion">
            <summary>
            Gets the ServiceVersion property.
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.AmazonEventBridgeConfig.UserAgent">
            <summary>
            Gets the value of UserAgent property.
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.AmazonEventBridgeException">
            <summary>
             Common exception for the EventBridge service.
             </summary>
        </member>
        <member name="M:Amazon.EventBridge.AmazonEventBridgeException.#ctor(System.String)">
            <summary>
            Construct instance of AmazonEventBridgeException
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Amazon.EventBridge.AmazonEventBridgeException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of AmazonEventBridgeException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.EventBridge.AmazonEventBridgeException.#ctor(System.Exception)">
            <summary>
            Construct instance of AmazonEventBridgeException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.EventBridge.AmazonEventBridgeException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of AmazonEventBridgeException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.EventBridge.AmazonEventBridgeException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of AmazonEventBridgeException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.EventBridge.Internal.AmazonEventBridgeMetadata">
            <summary>
            Service metadata for  Amazon EventBridge service
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Internal.AmazonEventBridgeMetadata.ServiceId">
            <summary>
            Gets the value of the Service Id.
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Internal.AmazonEventBridgeMetadata.OperationNameMapping">
            <summary>
            Gets the dictionary that gives mapping of renamed operations
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.ActivateEventSourceRequest">
            <summary>
            Container for the parameters to the ActivateEventSource operation.
            Activates a partner event source that has been deactivated. Once activated, your matching
            event bus will start receiving events from the event source.
            
             <note> 
            <para>
            This operation is performed by AWS customers, not by SaaS partners.
            </para>
             </note>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.ActivateEventSourceRequest.Name">
            <summary>
            Gets and sets the property Name. 
            <para>
            The name of the partner event source to activate.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.ActivateEventSourceResponse">
            <summary>
            This is the response object from the ActivateEventSource operation.
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.AwsVpcConfiguration">
            <summary>
            This structure specifies the VPC subnets and security groups for the task and whether
            a public IP address is to be used. This structure is relevant only for ECS tasks that
            use the <code>awsvpc</code> network mode.
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.AwsVpcConfiguration.AssignPublicIp">
            <summary>
            Gets and sets the property AssignPublicIp. 
            <para>
            Specifies whether the task's elastic network interface receives a public IP address.
            You can specify <code>ENABLED</code> only when <code>LaunchType</code> in <code>EcsParameters</code>
            is set to <code>FARGATE</code>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.AwsVpcConfiguration.SecurityGroups">
            <summary>
            Gets and sets the property SecurityGroups. 
            <para>
            Specifies the security groups associated with the task. These security groups must
            all be in the same VPC. You can specify as many as five security groups. If you don't
            specify a security group, the default security group for the VPC is used.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.AwsVpcConfiguration.Subnets">
            <summary>
            Gets and sets the property Subnets. 
            <para>
            Specifies the subnets associated with the task. These subnets must all be in the same
            VPC. You can specify as many as 16 subnets.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.BatchArrayProperties">
            <summary>
            The array properties for the submitted job, such as the size of the array. The array
            size can be between 2 and 10,000. If you specify array properties for a job, it becomes
            an array job. This parameter is used only if the target is an AWS Batch job.
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.BatchArrayProperties.Size">
            <summary>
            Gets and sets the property Size. 
            <para>
            The size of the array, if this is an array batch job. Valid values are integers between
            2 and 10,000.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.BatchParameters">
            <summary>
            The custom parameters to be used when the target is an AWS Batch job.
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.BatchParameters.ArrayProperties">
            <summary>
            Gets and sets the property ArrayProperties. 
            <para>
            The array properties for the submitted job, such as the size of the array. The array
            size can be between 2 and 10,000. If you specify array properties for a job, it becomes
            an array job. This parameter is used only if the target is an AWS Batch job.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.BatchParameters.JobDefinition">
            <summary>
            Gets and sets the property JobDefinition. 
            <para>
            The ARN or name of the job definition to use if the event target is an AWS Batch job.
            This job definition must already exist.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.BatchParameters.JobName">
            <summary>
            Gets and sets the property JobName. 
            <para>
            The name to use for this execution of the job, if the target is an AWS Batch job.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.BatchParameters.RetryStrategy">
            <summary>
            Gets and sets the property RetryStrategy. 
            <para>
            The retry strategy to use for failed jobs if the target is an AWS Batch job. The retry
            strategy is the number of times to retry the failed job execution. Valid values are
            1â€“10. When you specify a retry strategy here, it overrides the retry strategy defined
            in the job definition.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.BatchRetryStrategy">
            <summary>
            The retry strategy to use for failed jobs if the target is an AWS Batch job. If you
            specify a retry strategy here, it overrides the retry strategy defined in the job
            definition.
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.BatchRetryStrategy.Attempts">
            <summary>
            Gets and sets the property Attempts. 
            <para>
            The number of times to attempt to retry, if the job fails. Valid values are 1â€“10.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.ConcurrentModificationException">
            <summary>
             EventBridge exception
             </summary>
        </member>
        <member name="M:Amazon.EventBridge.Model.ConcurrentModificationException.#ctor(System.String)">
            <summary>
            Constructs a new ConcurrentModificationException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.EventBridge.Model.ConcurrentModificationException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of ConcurrentModificationException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.EventBridge.Model.ConcurrentModificationException.#ctor(System.Exception)">
            <summary>
            Construct instance of ConcurrentModificationException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.EventBridge.Model.ConcurrentModificationException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of ConcurrentModificationException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.EventBridge.Model.ConcurrentModificationException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of ConcurrentModificationException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.EventBridge.Model.Condition">
            <summary>
            A JSON string that you can use to limit the event bus permissions that you're granting
            to only accounts that fulfill the condition. Currently, the only supported condition
            is membership in a certain AWS organization. The string must contain <code>Type</code>,
            <code>Key</code>, and <code>Value</code> fields. The <code>Value</code> field specifies
            the ID of the AWS organization. The following is an example value for <code>Condition</code>:
            
             
            <para>
             <code>'{"Type" : "StringEquals", "Key": "aws:PrincipalOrgID", "Value": "o-1234567890"}'</code>
            
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.Condition.Key">
            <summary>
            Gets and sets the property Key. 
            <para>
            The key for the condition. Currently, the only supported key is <code>aws:PrincipalOrgID</code>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.Condition.Type">
            <summary>
            Gets and sets the property Type. 
            <para>
            The type of condition. Currently, the only supported value is <code>StringEquals</code>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.Condition.Value">
            <summary>
            Gets and sets the property Value. 
            <para>
            The value for the key. Currently, this must be the ID of the organization.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.CreateEventBusRequest">
            <summary>
            Container for the parameters to the CreateEventBus operation.
            Creates a new event bus within your account. This can be a custom event bus which
            you can use to receive events from your own custom applications and services, or it
            can be a partner event bus which can be matched to a partner event source.
            
             <note> 
            <para>
            This operation is used by AWS customers, not by SaaS partners.
            </para>
             </note>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.CreateEventBusRequest.EventSourceName">
            <summary>
            Gets and sets the property EventSourceName. 
            <para>
            If you're creating a partner event bus, this specifies the partner event source that
            the new event bus will be matched with.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.CreateEventBusRequest.Name">
            <summary>
            Gets and sets the property Name. 
            <para>
            The name of the new event bus. 
            </para>
             
            <para>
            The names of custom event buses can't contain the <code>/</code> character. You can't
            use the name <code>default</code> for a custom event bus because this name is already
            used for your account's default event bus.
            </para>
             
            <para>
            If this is a partner event bus, the name must exactly match the name of the partner
            event source that this event bus is matched to. This name will include the <code>/</code>
            character.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.CreateEventBusResponse">
            <summary>
            This is the response object from the CreateEventBus operation.
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.CreateEventBusResponse.EventBusArn">
            <summary>
            Gets and sets the property EventBusArn. 
            <para>
            The ARN of the new event bus.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.CreatePartnerEventSourceRequest">
            <summary>
            Container for the parameters to the CreatePartnerEventSource operation.
            Called by an SaaS partner to create a partner event source.
            
             <note> 
            <para>
            This operation is not used by AWS customers.
            </para>
             </note> 
            <para>
            Each partner event source can be used by one AWS account to create a matching partner
            event bus in that AWS account. A SaaS partner must create one partner event source
            for each AWS account that wants to receive those event types. 
            </para>
             
            <para>
            A partner event source creates events based on resources in the SaaS partner's service
            or application.
            </para>
             
            <para>
            An AWS account that creates a partner event bus that matches the partner event source
            can use that event bus to receive events from the partner, and then process them using
            AWS Events rules and targets.
            </para>
             
            <para>
            Partner event source names follow this format:
            </para>
             
            <para>
             <code>aws.partner/<i>partner_name</i>/<i>event_namespace</i>/<i>event_name</i> </code>
            
            </para>
             <ul> <li> 
            <para>
             <i>partner_name</i> is determined during partner registration and identifies the
            partner to AWS customers.
            </para>
             </li> <li> 
            <para>
            For <i>event_namespace</i>, we recommend that partners use a string that identifies
            the AWS customer within the partner's system. This should not be the customer's AWS
            account ID.
            </para>
             </li> <li> 
            <para>
             <i>event_name</i> is determined by the partner, and should uniquely identify an event-generating
            resource within the partner system. This should help AWS customers decide whether
            to create an event bus to receive these events.
            </para>
             </li> </ul>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.CreatePartnerEventSourceRequest.Account">
            <summary>
            Gets and sets the property Account. 
            <para>
            The AWS account ID of the customer who is permitted to create a matching partner event
            bus for this partner event source.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.CreatePartnerEventSourceRequest.Name">
            <summary>
            Gets and sets the property Name. 
            <para>
            The name of the partner event source. This name must be unique and must be in the
            format <code> <i>partner_name</i>/<i>event_namespace</i>/<i>event_name</i> </code>.
            The AWS account that wants to use this partner event source must create a partner
            event bus with a name that matches the name of the partner event source.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.CreatePartnerEventSourceResponse">
            <summary>
            This is the response object from the CreatePartnerEventSource operation.
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.CreatePartnerEventSourceResponse.EventSourceArn">
            <summary>
            Gets and sets the property EventSourceArn. 
            <para>
            The ARN of the partner event source.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.DeactivateEventSourceRequest">
            <summary>
            Container for the parameters to the DeactivateEventSource operation.
            An AWS customer uses this operation to temporarily stop receiving events from the
            specified partner event source. The matching event bus isn't deleted. 
            
             
            <para>
            When you deactivate a partner event source, the source goes into <code>PENDING</code>
            state. If it remains in <code>PENDING</code> state for more than two weeks, it's deleted.
            </para>
             
            <para>
            To activate a deactivated partner event source, use <a>ActivateEventSource</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.DeactivateEventSourceRequest.Name">
            <summary>
            Gets and sets the property Name. 
            <para>
            The name of the partner event source to deactivate.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.DeactivateEventSourceResponse">
            <summary>
            This is the response object from the DeactivateEventSource operation.
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.DeleteEventBusRequest">
            <summary>
            Container for the parameters to the DeleteEventBus operation.
            Deletes the specified custom event bus or partner event bus. All rules associated
            with this event bus are also deleted. You can't delete your account's default event
            bus.
            
             <note> 
            <para>
            This operation is performed by AWS customers, not by SaaS partners.
            </para>
             </note>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.DeleteEventBusRequest.Name">
            <summary>
            Gets and sets the property Name. 
            <para>
            The name of the event bus to delete.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.DeleteEventBusResponse">
            <summary>
            This is the response object from the DeleteEventBus operation.
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.DeletePartnerEventSourceRequest">
            <summary>
            Container for the parameters to the DeletePartnerEventSource operation.
            This operation is used by SaaS partners to delete a partner event source. AWS customers
            don't use this operation.
            
             
            <para>
            When you delete an event source, the status of the corresponding partner event bus
            in the AWS customer account becomes <code>DELETED</code>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.DeletePartnerEventSourceRequest.Account">
            <summary>
            Gets and sets the property Account. 
            <para>
            The AWS account ID of the AWS customer that the event source was created for.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.DeletePartnerEventSourceRequest.Name">
            <summary>
            Gets and sets the property Name. 
            <para>
            The name of the event source to delete.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.DeletePartnerEventSourceResponse">
            <summary>
            This is the response object from the DeletePartnerEventSource operation.
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.DeleteRuleRequest">
            <summary>
            Container for the parameters to the DeleteRule operation.
            Deletes the specified rule.
            
             
            <para>
            Before you can delete the rule, you must remove all targets, using <a>RemoveTargets</a>.
            </para>
             
            <para>
            When you delete a rule, incoming events might continue to match to the deleted rule.
            Allow a short period of time for changes to take effect.
            </para>
             
            <para>
            Managed rules are rules created and managed by another AWS service on your behalf.
            These rules are created by those other AWS services to support functionality in those
            services. You can delete these rules using the <code>Force</code> option, but you
            should do so only if you're sure that the other service isn't still using that rule.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.DeleteRuleRequest.EventBusName">
            <summary>
            Gets and sets the property EventBusName. 
            <para>
            The event bus associated with the rule. If you omit this, the default event bus is
            used.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.DeleteRuleRequest.Force">
            <summary>
            Gets and sets the property Force. 
            <para>
            If this is a managed rule, created by an AWS service on your behalf, you must specify
            <code>Force</code> as <code>True</code> to delete the rule. This parameter is ignored
            for rules that are not managed rules. You can check whether a rule is a managed rule
            by using <code>DescribeRule</code> or <code>ListRules</code> and checking the <code>ManagedBy</code>
            field of the response.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.DeleteRuleRequest.Name">
            <summary>
            Gets and sets the property Name. 
            <para>
            The name of the rule.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.DeleteRuleResponse">
            <summary>
            This is the response object from the DeleteRule operation.
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.DescribeEventBusRequest">
            <summary>
            Container for the parameters to the DescribeEventBus operation.
            Displays details about an event bus in your account. This can include the external
            AWS accounts that are permitted to write events to your default event bus, and the
            associated policy. For custom event buses and partner event buses, it displays the
            name, ARN, policy, state, and creation time.
            
             
            <para>
             To enable your account to receive events from other accounts on its default event
            bus, use <a>PutPermission</a>.
            </para>
             
            <para>
            For more information about partner event buses, see <a>CreateEventBus</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.DescribeEventBusRequest.Name">
            <summary>
            Gets and sets the property Name. 
            <para>
            The name of the event bus to show details for. If you omit this, the default event
            bus is displayed.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.DescribeEventBusResponse">
            <summary>
            This is the response object from the DescribeEventBus operation.
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.DescribeEventBusResponse.Arn">
            <summary>
            Gets and sets the property Arn. 
            <para>
            The Amazon Resource Name (ARN) of the account permitted to write events to the current
            account.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.DescribeEventBusResponse.Name">
            <summary>
            Gets and sets the property Name. 
            <para>
            The name of the event bus. Currently, this is always <code>default</code>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.DescribeEventBusResponse.Policy">
            <summary>
            Gets and sets the property Policy. 
            <para>
            The policy that enables the external account to send events to your account.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.DescribeEventSourceRequest">
            <summary>
            Container for the parameters to the DescribeEventSource operation.
            This operation lists details about a partner event source that is shared with your
            account.
            
             <note> 
            <para>
            This operation is run by AWS customers, not by SaaS partners.
            </para>
             </note>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.DescribeEventSourceRequest.Name">
            <summary>
            Gets and sets the property Name. 
            <para>
            The name of the partner event source to display the details of.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.DescribeEventSourceResponse">
            <summary>
            This is the response object from the DescribeEventSource operation.
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.DescribeEventSourceResponse.Arn">
            <summary>
            Gets and sets the property Arn. 
            <para>
            The ARN of the partner event source.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.DescribeEventSourceResponse.CreatedBy">
            <summary>
            Gets and sets the property CreatedBy. 
            <para>
            The name of the SaaS partner that created the event source.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.DescribeEventSourceResponse.CreationTime">
            <summary>
            Gets and sets the property CreationTime. 
            <para>
            The date and time that the event source was created.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.DescribeEventSourceResponse.ExpirationTime">
            <summary>
            Gets and sets the property ExpirationTime. 
            <para>
            The date and time that the event source will expire if you don't create a matching
            event bus.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.DescribeEventSourceResponse.Name">
            <summary>
            Gets and sets the property Name. 
            <para>
            The name of the partner event source.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.DescribeEventSourceResponse.State">
            <summary>
            Gets and sets the property State. 
            <para>
            The state of the event source. If it's <code>ACTIVE</code>, you have already created
            a matching event bus for this event source, and that event bus is active. If it's
            <code>PENDING</code>, either you haven't yet created a matching event bus, or that
            event bus is deactivated. If it's <code>DELETED</code>, you have created a matching
            event bus, but the event source has since been deleted.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.DescribePartnerEventSourceRequest">
            <summary>
            Container for the parameters to the DescribePartnerEventSource operation.
            An SaaS partner can use this operation to list details about a partner event source
            that they have created.
            
             <note> 
            <para>
            AWS customers do not use this operation. Instead, AWS customers can use <a>DescribeEventSource</a>
            to see details about a partner event source that is shared with them.
            </para>
             </note>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.DescribePartnerEventSourceRequest.Name">
            <summary>
            Gets and sets the property Name. 
            <para>
            The name of the event source to display.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.DescribePartnerEventSourceResponse">
            <summary>
            This is the response object from the DescribePartnerEventSource operation.
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.DescribePartnerEventSourceResponse.Arn">
            <summary>
            Gets and sets the property Arn. 
            <para>
            The ARN of the event source.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.DescribePartnerEventSourceResponse.Name">
            <summary>
            Gets and sets the property Name. 
            <para>
            The name of the event source.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.DescribeRuleRequest">
            <summary>
            Container for the parameters to the DescribeRule operation.
            Describes the specified rule.
            
             
            <para>
             <code>DescribeRule</code> doesn't list the targets of a rule. To see the targets
            associated with a rule, use <a>ListTargetsByRule</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.DescribeRuleRequest.EventBusName">
            <summary>
            Gets and sets the property EventBusName. 
            <para>
            The event bus associated with the rule. If you omit this, the default event bus is
            used.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.DescribeRuleRequest.Name">
            <summary>
            Gets and sets the property Name. 
            <para>
            The name of the rule.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.DescribeRuleResponse">
            <summary>
            This is the response object from the DescribeRule operation.
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.DescribeRuleResponse.Arn">
            <summary>
            Gets and sets the property Arn. 
            <para>
            The Amazon Resource Name (ARN) of the rule.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.DescribeRuleResponse.Description">
            <summary>
            Gets and sets the property Description. 
            <para>
            The description of the rule.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.DescribeRuleResponse.EventBusName">
            <summary>
            Gets and sets the property EventBusName. 
            <para>
            The event bus associated with the rule.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.DescribeRuleResponse.EventPattern">
            <summary>
            Gets and sets the property EventPattern. 
            <para>
            The event pattern. For more information, see <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eventbridge-and-event-patterns.html">Event
            Patterns</a> in the <i>Amazon EventBridge User Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.DescribeRuleResponse.ManagedBy">
            <summary>
            Gets and sets the property ManagedBy. 
            <para>
            If this is a managed rule, created by an AWS service on your behalf, this field displays
            the principal name of the AWS service that created the rule.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.DescribeRuleResponse.Name">
            <summary>
            Gets and sets the property Name. 
            <para>
            The name of the rule.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.DescribeRuleResponse.RoleArn">
            <summary>
            Gets and sets the property RoleArn. 
            <para>
            The Amazon Resource Name (ARN) of the IAM role associated with the rule.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.DescribeRuleResponse.ScheduleExpression">
            <summary>
            Gets and sets the property ScheduleExpression. 
            <para>
            The scheduling expression: for example, <code>"cron(0 20 * * ? *)"</code> or <code>"rate(5
            minutes)"</code>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.DescribeRuleResponse.State">
            <summary>
            Gets and sets the property State. 
            <para>
            Specifies whether the rule is enabled or disabled.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.DisableRuleRequest">
            <summary>
            Container for the parameters to the DisableRule operation.
            Disables the specified rule. A disabled rule won't match any events and won't self-trigger
            if it has a schedule expression.
            
             
            <para>
            When you disable a rule, incoming events might continue to match to the disabled rule.
            Allow a short period of time for changes to take effect.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.DisableRuleRequest.EventBusName">
            <summary>
            Gets and sets the property EventBusName. 
            <para>
            The event bus associated with the rule. If you omit this, the default event bus is
            used.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.DisableRuleRequest.Name">
            <summary>
            Gets and sets the property Name. 
            <para>
            The name of the rule.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.DisableRuleResponse">
            <summary>
            This is the response object from the DisableRule operation.
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.EcsParameters">
            <summary>
            The custom parameters to be used when the target is an Amazon ECS task.
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.EcsParameters.Group">
            <summary>
            Gets and sets the property Group. 
            <para>
            Specifies an ECS task group for the task. The maximum length is 255 characters.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.EcsParameters.LaunchType">
            <summary>
            Gets and sets the property LaunchType. 
            <para>
            Specifies the launch type on which your task is running. The launch type that you
            specify here must match one of the launch type (compatibilities) of the target task.
            The <code>FARGATE</code> value is supported only in the Regions where AWS Fargate
            with Amazon ECS is supported. For more information, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/AWS-Fargate.html">AWS
            Fargate on Amazon ECS</a> in the <i>Amazon Elastic Container Service Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.EcsParameters.NetworkConfiguration">
            <summary>
            Gets and sets the property NetworkConfiguration. 
            <para>
            Use this structure if the ECS task uses the <code>awsvpc</code> network mode. This
            structure specifies the VPC subnets and security groups associated with the task and
            whether a public IP address is to be used. This structure is required if <code>LaunchType</code>
            is <code>FARGATE</code> because the <code>awsvpc</code> mode is required for Fargate
            tasks.
            </para>
             
            <para>
            If you specify <code>NetworkConfiguration</code> when the target ECS task doesn't
            use the <code>awsvpc</code> network mode, the task fails.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.EcsParameters.PlatformVersion">
            <summary>
            Gets and sets the property PlatformVersion. 
            <para>
            Specifies the platform version for the task. Specify only the numeric portion of the
            platform version, such as <code>1.1.0</code>.
            </para>
             
            <para>
            This structure is used only if <code>LaunchType</code> is <code>FARGATE</code>. For
            more information about valid platform versions, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html">AWS
            Fargate Platform Versions</a> in the <i>Amazon Elastic Container Service Developer
            Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.EcsParameters.TaskCount">
            <summary>
            Gets and sets the property TaskCount. 
            <para>
            The number of tasks to create based on <code>TaskDefinition</code>. The default is
            1.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.EcsParameters.TaskDefinitionArn">
            <summary>
            Gets and sets the property TaskDefinitionArn. 
            <para>
            The ARN of the task definition to use if the event target is an Amazon ECS task. 
            </para>
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.EnableRuleRequest">
            <summary>
            Container for the parameters to the EnableRule operation.
            Enables the specified rule. If the rule doesn't exist, the operation fails.
            
             
            <para>
            When you enable a rule, incoming events might not immediately start matching to a
            newly enabled rule. Allow a short period of time for changes to take effect.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.EnableRuleRequest.EventBusName">
            <summary>
            Gets and sets the property EventBusName. 
            <para>
            The event bus associated with the rule. If you omit this, the default event bus is
            used.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.EnableRuleRequest.Name">
            <summary>
            Gets and sets the property Name. 
            <para>
            The name of the rule.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.EnableRuleResponse">
            <summary>
            This is the response object from the EnableRule operation.
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.EventBus">
            <summary>
            An event bus receives events from a source and routes them to rules associated with
            that event bus. Your account's default event bus receives rules from AWS services.
            A custom event bus can receive rules from AWS services as well as your custom applications
            and services. A partner event bus receives events from an event source created by
            an SaaS partner. These events come from the partners services or applications.
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.EventBus.Arn">
            <summary>
            Gets and sets the property Arn. 
            <para>
            The ARN of the event bus.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.EventBus.Name">
            <summary>
            Gets and sets the property Name. 
            <para>
            The name of the event bus.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.EventBus.Policy">
            <summary>
            Gets and sets the property Policy. 
            <para>
            The permissions policy of the event bus, describing which other AWS accounts can write
            events to this event bus.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.EventSource">
            <summary>
            A partner event source is created by an SaaS partner. If a customer creates a partner
            event bus that matches this event source, that AWS account can receive events from
            the partner's applications or services.
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.EventSource.Arn">
            <summary>
            Gets and sets the property Arn. 
            <para>
            The ARN of the event source.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.EventSource.CreatedBy">
            <summary>
            Gets and sets the property CreatedBy. 
            <para>
            The name of the partner that created the event source.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.EventSource.CreationTime">
            <summary>
            Gets and sets the property CreationTime. 
            <para>
            The date and time when the event source was created.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.EventSource.ExpirationTime">
            <summary>
            Gets and sets the property ExpirationTime. 
            <para>
            The date and time when the event source will expire if the AWS account doesn't create
            a matching event bus for it.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.EventSource.Name">
            <summary>
            Gets and sets the property Name. 
            <para>
            The name of the event source.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.EventSource.State">
            <summary>
            Gets and sets the property State. 
            <para>
            The state of the event source. If it's <code>ACTIVE</code>, you have already created
            a matching event bus for this event source, and that event bus is active. If it's
            <code>PENDING</code>, either you haven't yet created a matching event bus, or that
            event bus is deactivated. If it's <code>DELETED</code>, you have created a matching
            event bus, but the event source has since been deleted.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.InputTransformer">
            <summary>
            Contains the parameters needed for you to provide custom input to a target based on
            one or more pieces of data extracted from the event.
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.InputTransformer.InputPathsMap">
            <summary>
            Gets and sets the property InputPathsMap. 
            <para>
            Map of JSON paths to be extracted from the event. You can then insert these in the
            template in <code>InputTemplate</code> to produce the output to be sent to the target.
            </para>
             
            <para>
             <code>InputPathsMap</code> is an array key-value pairs, where each value is a valid
            JSON path. You can have as many as 10 key-value pairs. You must use JSON dot notation,
            not bracket notation.
            </para>
             
            <para>
            The keys can't start with <code>"AWS"</code>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.InputTransformer.InputTemplate">
            <summary>
            Gets and sets the property InputTemplate. 
            <para>
            Input template where you specify placeholders that will be filled with the values
            of the keys from <code>InputPathsMap</code> to customize the data sent to the target.
            Enclose each <code>InputPathsMaps</code> value in brackets: &lt;<i>value</i>&gt;.
            The InputTemplate must be valid JSON.
            </para>
             
            <para>
            If <code>InputTemplate</code> is a JSON object (surrounded by curly braces), the following
            restrictions apply:
            </para>
             <ul> <li> 
            <para>
            The placeholder can't be used as an object key
            </para>
             </li> <li> 
            <para>
            Object values can't include quote marks
            </para>
             </li> </ul> 
            <para>
            The following example shows the syntax for using <code>InputPathsMap</code> and <code>InputTemplate</code>.
            </para>
             
            <para>
             <code> "InputTransformer":</code> 
            </para>
             
            <para>
             <code>{</code> 
            </para>
             
            <para>
             <code>"InputPathsMap": {"instance": "$.detail.instance","status": "$.detail.status"},</code>
            
            </para>
             
            <para>
             <code>"InputTemplate": "&lt;instance&gt; is in state &lt;status&gt;"</code> 
            </para>
             
            <para>
             <code>}</code> 
            </para>
             
            <para>
            To have the <code>InputTemplate</code> include quote marks within a JSON string, escape
            each quote marks with a slash, as in the following example:
            </para>
             
            <para>
             <code> "InputTransformer":</code> 
            </para>
             
            <para>
             <code>{</code> 
            </para>
             
            <para>
             <code>"InputPathsMap": {"instance": "$.detail.instance","status": "$.detail.status"},</code>
            
            </para>
             
            <para>
             <code>"InputTemplate": "&lt;instance&gt; is in state \"&lt;status&gt;\""</code> 
            </para>
             
            <para>
             <code>}</code> 
            </para>
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.InternalException">
            <summary>
             EventBridge exception
             </summary>
        </member>
        <member name="M:Amazon.EventBridge.Model.InternalException.#ctor(System.String)">
            <summary>
            Constructs a new InternalException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.EventBridge.Model.InternalException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of InternalException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.EventBridge.Model.InternalException.#ctor(System.Exception)">
            <summary>
            Construct instance of InternalException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.EventBridge.Model.InternalException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of InternalException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.EventBridge.Model.InternalException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of InternalException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.ActivateEventSourceRequestMarshaller">
            <summary>
            ActivateEventSource Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.ActivateEventSourceRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.ActivateEventSourceRequestMarshaller.Marshall(Amazon.EventBridge.Model.ActivateEventSourceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.EventBridge.Model.Internal.MarshallTransformations.ActivateEventSourceRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.ActivateEventSourceResponseUnmarshaller">
            <summary>
            Response Unmarshaller for ActivateEventSource operation
            </summary>  
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.ActivateEventSourceResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.ActivateEventSourceResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.EventBridge.Model.Internal.MarshallTransformations.ActivateEventSourceResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.AwsVpcConfigurationMarshaller">
            <summary>
            AwsVpcConfiguration Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.AwsVpcConfigurationMarshaller.Marshall(Amazon.EventBridge.Model.AwsVpcConfiguration,Amazon.Runtime.Internal.Transform.JsonMarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="requestObject"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="F:Amazon.EventBridge.Model.Internal.MarshallTransformations.AwsVpcConfigurationMarshaller.Instance">
            <summary>
            Singleton Marshaller.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.AwsVpcConfigurationUnmarshaller">
            <summary>
            Response Unmarshaller for AwsVpcConfiguration Object
            </summary>  
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.AwsVpcConfigurationUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#EventBridge#Model#AwsVpcConfiguration,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.AwsVpcConfigurationUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.EventBridge.Model.Internal.MarshallTransformations.AwsVpcConfigurationUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.BatchArrayPropertiesMarshaller">
            <summary>
            BatchArrayProperties Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.BatchArrayPropertiesMarshaller.Marshall(Amazon.EventBridge.Model.BatchArrayProperties,Amazon.Runtime.Internal.Transform.JsonMarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="requestObject"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="F:Amazon.EventBridge.Model.Internal.MarshallTransformations.BatchArrayPropertiesMarshaller.Instance">
            <summary>
            Singleton Marshaller.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.BatchArrayPropertiesUnmarshaller">
            <summary>
            Response Unmarshaller for BatchArrayProperties Object
            </summary>  
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.BatchArrayPropertiesUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#EventBridge#Model#BatchArrayProperties,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.BatchArrayPropertiesUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.EventBridge.Model.Internal.MarshallTransformations.BatchArrayPropertiesUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.BatchParametersMarshaller">
            <summary>
            BatchParameters Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.BatchParametersMarshaller.Marshall(Amazon.EventBridge.Model.BatchParameters,Amazon.Runtime.Internal.Transform.JsonMarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="requestObject"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="F:Amazon.EventBridge.Model.Internal.MarshallTransformations.BatchParametersMarshaller.Instance">
            <summary>
            Singleton Marshaller.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.BatchParametersUnmarshaller">
            <summary>
            Response Unmarshaller for BatchParameters Object
            </summary>  
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.BatchParametersUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#EventBridge#Model#BatchParameters,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.BatchParametersUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.EventBridge.Model.Internal.MarshallTransformations.BatchParametersUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.BatchRetryStrategyMarshaller">
            <summary>
            BatchRetryStrategy Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.BatchRetryStrategyMarshaller.Marshall(Amazon.EventBridge.Model.BatchRetryStrategy,Amazon.Runtime.Internal.Transform.JsonMarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="requestObject"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="F:Amazon.EventBridge.Model.Internal.MarshallTransformations.BatchRetryStrategyMarshaller.Instance">
            <summary>
            Singleton Marshaller.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.BatchRetryStrategyUnmarshaller">
            <summary>
            Response Unmarshaller for BatchRetryStrategy Object
            </summary>  
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.BatchRetryStrategyUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#EventBridge#Model#BatchRetryStrategy,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.BatchRetryStrategyUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.EventBridge.Model.Internal.MarshallTransformations.BatchRetryStrategyUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.ConditionMarshaller">
            <summary>
            Condition Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.ConditionMarshaller.Marshall(Amazon.EventBridge.Model.Condition,Amazon.Runtime.Internal.Transform.JsonMarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="requestObject"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="F:Amazon.EventBridge.Model.Internal.MarshallTransformations.ConditionMarshaller.Instance">
            <summary>
            Singleton Marshaller.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.CreateEventBusRequestMarshaller">
            <summary>
            CreateEventBus Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.CreateEventBusRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.CreateEventBusRequestMarshaller.Marshall(Amazon.EventBridge.Model.CreateEventBusRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.EventBridge.Model.Internal.MarshallTransformations.CreateEventBusRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.CreateEventBusResponseUnmarshaller">
            <summary>
            Response Unmarshaller for CreateEventBus operation
            </summary>  
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.CreateEventBusResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.CreateEventBusResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.EventBridge.Model.Internal.MarshallTransformations.CreateEventBusResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.CreatePartnerEventSourceRequestMarshaller">
            <summary>
            CreatePartnerEventSource Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.CreatePartnerEventSourceRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.CreatePartnerEventSourceRequestMarshaller.Marshall(Amazon.EventBridge.Model.CreatePartnerEventSourceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.EventBridge.Model.Internal.MarshallTransformations.CreatePartnerEventSourceRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.CreatePartnerEventSourceResponseUnmarshaller">
            <summary>
            Response Unmarshaller for CreatePartnerEventSource operation
            </summary>  
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.CreatePartnerEventSourceResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.CreatePartnerEventSourceResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.EventBridge.Model.Internal.MarshallTransformations.CreatePartnerEventSourceResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.DeactivateEventSourceRequestMarshaller">
            <summary>
            DeactivateEventSource Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.DeactivateEventSourceRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.DeactivateEventSourceRequestMarshaller.Marshall(Amazon.EventBridge.Model.DeactivateEventSourceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.EventBridge.Model.Internal.MarshallTransformations.DeactivateEventSourceRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.DeactivateEventSourceResponseUnmarshaller">
            <summary>
            Response Unmarshaller for DeactivateEventSource operation
            </summary>  
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.DeactivateEventSourceResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.DeactivateEventSourceResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.EventBridge.Model.Internal.MarshallTransformations.DeactivateEventSourceResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.DeleteEventBusRequestMarshaller">
            <summary>
            DeleteEventBus Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.DeleteEventBusRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.DeleteEventBusRequestMarshaller.Marshall(Amazon.EventBridge.Model.DeleteEventBusRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.EventBridge.Model.Internal.MarshallTransformations.DeleteEventBusRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.DeleteEventBusResponseUnmarshaller">
            <summary>
            Response Unmarshaller for DeleteEventBus operation
            </summary>  
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.DeleteEventBusResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.DeleteEventBusResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.EventBridge.Model.Internal.MarshallTransformations.DeleteEventBusResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.DeletePartnerEventSourceRequestMarshaller">
            <summary>
            DeletePartnerEventSource Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.DeletePartnerEventSourceRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.DeletePartnerEventSourceRequestMarshaller.Marshall(Amazon.EventBridge.Model.DeletePartnerEventSourceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.EventBridge.Model.Internal.MarshallTransformations.DeletePartnerEventSourceRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.DeletePartnerEventSourceResponseUnmarshaller">
            <summary>
            Response Unmarshaller for DeletePartnerEventSource operation
            </summary>  
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.DeletePartnerEventSourceResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.DeletePartnerEventSourceResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.EventBridge.Model.Internal.MarshallTransformations.DeletePartnerEventSourceResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.DeleteRuleRequestMarshaller">
            <summary>
            DeleteRule Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.DeleteRuleRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.DeleteRuleRequestMarshaller.Marshall(Amazon.EventBridge.Model.DeleteRuleRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.EventBridge.Model.Internal.MarshallTransformations.DeleteRuleRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.DeleteRuleResponseUnmarshaller">
            <summary>
            Response Unmarshaller for DeleteRule operation
            </summary>  
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.DeleteRuleResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.DeleteRuleResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.EventBridge.Model.Internal.MarshallTransformations.DeleteRuleResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.DescribeEventBusRequestMarshaller">
            <summary>
            DescribeEventBus Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.DescribeEventBusRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.DescribeEventBusRequestMarshaller.Marshall(Amazon.EventBridge.Model.DescribeEventBusRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.EventBridge.Model.Internal.MarshallTransformations.DescribeEventBusRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.DescribeEventBusResponseUnmarshaller">
            <summary>
            Response Unmarshaller for DescribeEventBus operation
            </summary>  
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.DescribeEventBusResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.DescribeEventBusResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.EventBridge.Model.Internal.MarshallTransformations.DescribeEventBusResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.DescribeEventSourceRequestMarshaller">
            <summary>
            DescribeEventSource Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.DescribeEventSourceRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.DescribeEventSourceRequestMarshaller.Marshall(Amazon.EventBridge.Model.DescribeEventSourceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.EventBridge.Model.Internal.MarshallTransformations.DescribeEventSourceRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.DescribeEventSourceResponseUnmarshaller">
            <summary>
            Response Unmarshaller for DescribeEventSource operation
            </summary>  
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.DescribeEventSourceResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.DescribeEventSourceResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.EventBridge.Model.Internal.MarshallTransformations.DescribeEventSourceResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.DescribePartnerEventSourceRequestMarshaller">
            <summary>
            DescribePartnerEventSource Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.DescribePartnerEventSourceRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.DescribePartnerEventSourceRequestMarshaller.Marshall(Amazon.EventBridge.Model.DescribePartnerEventSourceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.EventBridge.Model.Internal.MarshallTransformations.DescribePartnerEventSourceRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.DescribePartnerEventSourceResponseUnmarshaller">
            <summary>
            Response Unmarshaller for DescribePartnerEventSource operation
            </summary>  
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.DescribePartnerEventSourceResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.DescribePartnerEventSourceResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.EventBridge.Model.Internal.MarshallTransformations.DescribePartnerEventSourceResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.DescribeRuleRequestMarshaller">
            <summary>
            DescribeRule Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.DescribeRuleRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.DescribeRuleRequestMarshaller.Marshall(Amazon.EventBridge.Model.DescribeRuleRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.EventBridge.Model.Internal.MarshallTransformations.DescribeRuleRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.DescribeRuleResponseUnmarshaller">
            <summary>
            Response Unmarshaller for DescribeRule operation
            </summary>  
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.DescribeRuleResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.DescribeRuleResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.EventBridge.Model.Internal.MarshallTransformations.DescribeRuleResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.DisableRuleRequestMarshaller">
            <summary>
            DisableRule Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.DisableRuleRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.DisableRuleRequestMarshaller.Marshall(Amazon.EventBridge.Model.DisableRuleRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.EventBridge.Model.Internal.MarshallTransformations.DisableRuleRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.DisableRuleResponseUnmarshaller">
            <summary>
            Response Unmarshaller for DisableRule operation
            </summary>  
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.DisableRuleResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.DisableRuleResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.EventBridge.Model.Internal.MarshallTransformations.DisableRuleResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.EcsParametersMarshaller">
            <summary>
            EcsParameters Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.EcsParametersMarshaller.Marshall(Amazon.EventBridge.Model.EcsParameters,Amazon.Runtime.Internal.Transform.JsonMarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="requestObject"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="F:Amazon.EventBridge.Model.Internal.MarshallTransformations.EcsParametersMarshaller.Instance">
            <summary>
            Singleton Marshaller.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.EcsParametersUnmarshaller">
            <summary>
            Response Unmarshaller for EcsParameters Object
            </summary>  
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.EcsParametersUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#EventBridge#Model#EcsParameters,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.EcsParametersUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.EventBridge.Model.Internal.MarshallTransformations.EcsParametersUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.EnableRuleRequestMarshaller">
            <summary>
            EnableRule Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.EnableRuleRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.EnableRuleRequestMarshaller.Marshall(Amazon.EventBridge.Model.EnableRuleRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.EventBridge.Model.Internal.MarshallTransformations.EnableRuleRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.EnableRuleResponseUnmarshaller">
            <summary>
            Response Unmarshaller for EnableRule operation
            </summary>  
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.EnableRuleResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.EnableRuleResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.EventBridge.Model.Internal.MarshallTransformations.EnableRuleResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.EventBusUnmarshaller">
            <summary>
            Response Unmarshaller for EventBus Object
            </summary>  
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.EventBusUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#EventBridge#Model#EventBus,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.EventBusUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.EventBridge.Model.Internal.MarshallTransformations.EventBusUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.EventSourceUnmarshaller">
            <summary>
            Response Unmarshaller for EventSource Object
            </summary>  
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.EventSourceUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#EventBridge#Model#EventSource,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.EventSourceUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.EventBridge.Model.Internal.MarshallTransformations.EventSourceUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.InputTransformerMarshaller">
            <summary>
            InputTransformer Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.InputTransformerMarshaller.Marshall(Amazon.EventBridge.Model.InputTransformer,Amazon.Runtime.Internal.Transform.JsonMarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="requestObject"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="F:Amazon.EventBridge.Model.Internal.MarshallTransformations.InputTransformerMarshaller.Instance">
            <summary>
            Singleton Marshaller.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.InputTransformerUnmarshaller">
            <summary>
            Response Unmarshaller for InputTransformer Object
            </summary>  
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.InputTransformerUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#EventBridge#Model#InputTransformer,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.InputTransformerUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.EventBridge.Model.Internal.MarshallTransformations.InputTransformerUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.KinesisParametersMarshaller">
            <summary>
            KinesisParameters Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.KinesisParametersMarshaller.Marshall(Amazon.EventBridge.Model.KinesisParameters,Amazon.Runtime.Internal.Transform.JsonMarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="requestObject"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="F:Amazon.EventBridge.Model.Internal.MarshallTransformations.KinesisParametersMarshaller.Instance">
            <summary>
            Singleton Marshaller.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.KinesisParametersUnmarshaller">
            <summary>
            Response Unmarshaller for KinesisParameters Object
            </summary>  
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.KinesisParametersUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#EventBridge#Model#KinesisParameters,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.KinesisParametersUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.EventBridge.Model.Internal.MarshallTransformations.KinesisParametersUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.ListEventBusesRequestMarshaller">
            <summary>
            ListEventBuses Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.ListEventBusesRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.ListEventBusesRequestMarshaller.Marshall(Amazon.EventBridge.Model.ListEventBusesRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.EventBridge.Model.Internal.MarshallTransformations.ListEventBusesRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.ListEventBusesResponseUnmarshaller">
            <summary>
            Response Unmarshaller for ListEventBuses operation
            </summary>  
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.ListEventBusesResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.ListEventBusesResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.EventBridge.Model.Internal.MarshallTransformations.ListEventBusesResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.ListEventSourcesRequestMarshaller">
            <summary>
            ListEventSources Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.ListEventSourcesRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.ListEventSourcesRequestMarshaller.Marshall(Amazon.EventBridge.Model.ListEventSourcesRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.EventBridge.Model.Internal.MarshallTransformations.ListEventSourcesRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.ListEventSourcesResponseUnmarshaller">
            <summary>
            Response Unmarshaller for ListEventSources operation
            </summary>  
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.ListEventSourcesResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.ListEventSourcesResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.EventBridge.Model.Internal.MarshallTransformations.ListEventSourcesResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.ListPartnerEventSourceAccountsRequestMarshaller">
            <summary>
            ListPartnerEventSourceAccounts Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.ListPartnerEventSourceAccountsRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.ListPartnerEventSourceAccountsRequestMarshaller.Marshall(Amazon.EventBridge.Model.ListPartnerEventSourceAccountsRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.EventBridge.Model.Internal.MarshallTransformations.ListPartnerEventSourceAccountsRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.ListPartnerEventSourceAccountsResponseUnmarshaller">
            <summary>
            Response Unmarshaller for ListPartnerEventSourceAccounts operation
            </summary>  
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.ListPartnerEventSourceAccountsResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.ListPartnerEventSourceAccountsResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.EventBridge.Model.Internal.MarshallTransformations.ListPartnerEventSourceAccountsResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.ListPartnerEventSourcesRequestMarshaller">
            <summary>
            ListPartnerEventSources Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.ListPartnerEventSourcesRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.ListPartnerEventSourcesRequestMarshaller.Marshall(Amazon.EventBridge.Model.ListPartnerEventSourcesRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.EventBridge.Model.Internal.MarshallTransformations.ListPartnerEventSourcesRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.ListPartnerEventSourcesResponseUnmarshaller">
            <summary>
            Response Unmarshaller for ListPartnerEventSources operation
            </summary>  
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.ListPartnerEventSourcesResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.ListPartnerEventSourcesResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.EventBridge.Model.Internal.MarshallTransformations.ListPartnerEventSourcesResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.ListRuleNamesByTargetRequestMarshaller">
            <summary>
            ListRuleNamesByTarget Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.ListRuleNamesByTargetRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.ListRuleNamesByTargetRequestMarshaller.Marshall(Amazon.EventBridge.Model.ListRuleNamesByTargetRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.EventBridge.Model.Internal.MarshallTransformations.ListRuleNamesByTargetRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.ListRuleNamesByTargetResponseUnmarshaller">
            <summary>
            Response Unmarshaller for ListRuleNamesByTarget operation
            </summary>  
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.ListRuleNamesByTargetResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.ListRuleNamesByTargetResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.EventBridge.Model.Internal.MarshallTransformations.ListRuleNamesByTargetResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.ListRulesRequestMarshaller">
            <summary>
            ListRules Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.ListRulesRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.ListRulesRequestMarshaller.Marshall(Amazon.EventBridge.Model.ListRulesRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.EventBridge.Model.Internal.MarshallTransformations.ListRulesRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.ListRulesResponseUnmarshaller">
            <summary>
            Response Unmarshaller for ListRules operation
            </summary>  
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.ListRulesResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.ListRulesResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.EventBridge.Model.Internal.MarshallTransformations.ListRulesResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.ListTagsForResourceRequestMarshaller">
            <summary>
            ListTagsForResource Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.ListTagsForResourceRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.ListTagsForResourceRequestMarshaller.Marshall(Amazon.EventBridge.Model.ListTagsForResourceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.EventBridge.Model.Internal.MarshallTransformations.ListTagsForResourceRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.ListTagsForResourceResponseUnmarshaller">
            <summary>
            Response Unmarshaller for ListTagsForResource operation
            </summary>  
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.ListTagsForResourceResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.ListTagsForResourceResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.EventBridge.Model.Internal.MarshallTransformations.ListTagsForResourceResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.ListTargetsByRuleRequestMarshaller">
            <summary>
            ListTargetsByRule Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.ListTargetsByRuleRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.ListTargetsByRuleRequestMarshaller.Marshall(Amazon.EventBridge.Model.ListTargetsByRuleRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.EventBridge.Model.Internal.MarshallTransformations.ListTargetsByRuleRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.ListTargetsByRuleResponseUnmarshaller">
            <summary>
            Response Unmarshaller for ListTargetsByRule operation
            </summary>  
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.ListTargetsByRuleResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.ListTargetsByRuleResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.EventBridge.Model.Internal.MarshallTransformations.ListTargetsByRuleResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.NetworkConfigurationMarshaller">
            <summary>
            NetworkConfiguration Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.NetworkConfigurationMarshaller.Marshall(Amazon.EventBridge.Model.NetworkConfiguration,Amazon.Runtime.Internal.Transform.JsonMarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="requestObject"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="F:Amazon.EventBridge.Model.Internal.MarshallTransformations.NetworkConfigurationMarshaller.Instance">
            <summary>
            Singleton Marshaller.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.NetworkConfigurationUnmarshaller">
            <summary>
            Response Unmarshaller for NetworkConfiguration Object
            </summary>  
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.NetworkConfigurationUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#EventBridge#Model#NetworkConfiguration,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.NetworkConfigurationUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.EventBridge.Model.Internal.MarshallTransformations.NetworkConfigurationUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.PartnerEventSourceAccountUnmarshaller">
            <summary>
            Response Unmarshaller for PartnerEventSourceAccount Object
            </summary>  
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.PartnerEventSourceAccountUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#EventBridge#Model#PartnerEventSourceAccount,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.PartnerEventSourceAccountUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.EventBridge.Model.Internal.MarshallTransformations.PartnerEventSourceAccountUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.PartnerEventSourceUnmarshaller">
            <summary>
            Response Unmarshaller for PartnerEventSource Object
            </summary>  
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.PartnerEventSourceUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#EventBridge#Model#PartnerEventSource,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.PartnerEventSourceUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.EventBridge.Model.Internal.MarshallTransformations.PartnerEventSourceUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.PutEventsRequestEntryMarshaller">
            <summary>
            PutEventsRequestEntry Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.PutEventsRequestEntryMarshaller.Marshall(Amazon.EventBridge.Model.PutEventsRequestEntry,Amazon.Runtime.Internal.Transform.JsonMarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="requestObject"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="F:Amazon.EventBridge.Model.Internal.MarshallTransformations.PutEventsRequestEntryMarshaller.Instance">
            <summary>
            Singleton Marshaller.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.PutEventsRequestMarshaller">
            <summary>
            PutEvents Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.PutEventsRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.PutEventsRequestMarshaller.Marshall(Amazon.EventBridge.Model.PutEventsRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.EventBridge.Model.Internal.MarshallTransformations.PutEventsRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.PutEventsResponseUnmarshaller">
            <summary>
            Response Unmarshaller for PutEvents operation
            </summary>  
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.PutEventsResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.PutEventsResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.EventBridge.Model.Internal.MarshallTransformations.PutEventsResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.PutEventsResultEntryUnmarshaller">
            <summary>
            Response Unmarshaller for PutEventsResultEntry Object
            </summary>  
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.PutEventsResultEntryUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#EventBridge#Model#PutEventsResultEntry,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.PutEventsResultEntryUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.EventBridge.Model.Internal.MarshallTransformations.PutEventsResultEntryUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.PutPartnerEventsRequestEntryMarshaller">
            <summary>
            PutPartnerEventsRequestEntry Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.PutPartnerEventsRequestEntryMarshaller.Marshall(Amazon.EventBridge.Model.PutPartnerEventsRequestEntry,Amazon.Runtime.Internal.Transform.JsonMarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="requestObject"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="F:Amazon.EventBridge.Model.Internal.MarshallTransformations.PutPartnerEventsRequestEntryMarshaller.Instance">
            <summary>
            Singleton Marshaller.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.PutPartnerEventsRequestMarshaller">
            <summary>
            PutPartnerEvents Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.PutPartnerEventsRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.PutPartnerEventsRequestMarshaller.Marshall(Amazon.EventBridge.Model.PutPartnerEventsRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.EventBridge.Model.Internal.MarshallTransformations.PutPartnerEventsRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.PutPartnerEventsResponseUnmarshaller">
            <summary>
            Response Unmarshaller for PutPartnerEvents operation
            </summary>  
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.PutPartnerEventsResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.PutPartnerEventsResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.EventBridge.Model.Internal.MarshallTransformations.PutPartnerEventsResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.PutPartnerEventsResultEntryUnmarshaller">
            <summary>
            Response Unmarshaller for PutPartnerEventsResultEntry Object
            </summary>  
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.PutPartnerEventsResultEntryUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#EventBridge#Model#PutPartnerEventsResultEntry,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.PutPartnerEventsResultEntryUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.EventBridge.Model.Internal.MarshallTransformations.PutPartnerEventsResultEntryUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.PutPermissionRequestMarshaller">
            <summary>
            PutPermission Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.PutPermissionRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.PutPermissionRequestMarshaller.Marshall(Amazon.EventBridge.Model.PutPermissionRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.EventBridge.Model.Internal.MarshallTransformations.PutPermissionRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.PutPermissionResponseUnmarshaller">
            <summary>
            Response Unmarshaller for PutPermission operation
            </summary>  
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.PutPermissionResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.PutPermissionResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.EventBridge.Model.Internal.MarshallTransformations.PutPermissionResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.PutRuleRequestMarshaller">
            <summary>
            PutRule Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.PutRuleRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.PutRuleRequestMarshaller.Marshall(Amazon.EventBridge.Model.PutRuleRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.EventBridge.Model.Internal.MarshallTransformations.PutRuleRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.PutRuleResponseUnmarshaller">
            <summary>
            Response Unmarshaller for PutRule operation
            </summary>  
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.PutRuleResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.PutRuleResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.EventBridge.Model.Internal.MarshallTransformations.PutRuleResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.PutTargetsRequestMarshaller">
            <summary>
            PutTargets Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.PutTargetsRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.PutTargetsRequestMarshaller.Marshall(Amazon.EventBridge.Model.PutTargetsRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.EventBridge.Model.Internal.MarshallTransformations.PutTargetsRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.PutTargetsResponseUnmarshaller">
            <summary>
            Response Unmarshaller for PutTargets operation
            </summary>  
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.PutTargetsResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.PutTargetsResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.EventBridge.Model.Internal.MarshallTransformations.PutTargetsResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.PutTargetsResultEntryUnmarshaller">
            <summary>
            Response Unmarshaller for PutTargetsResultEntry Object
            </summary>  
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.PutTargetsResultEntryUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#EventBridge#Model#PutTargetsResultEntry,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.PutTargetsResultEntryUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.EventBridge.Model.Internal.MarshallTransformations.PutTargetsResultEntryUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.RemovePermissionRequestMarshaller">
            <summary>
            RemovePermission Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.RemovePermissionRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.RemovePermissionRequestMarshaller.Marshall(Amazon.EventBridge.Model.RemovePermissionRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.EventBridge.Model.Internal.MarshallTransformations.RemovePermissionRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.RemovePermissionResponseUnmarshaller">
            <summary>
            Response Unmarshaller for RemovePermission operation
            </summary>  
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.RemovePermissionResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.RemovePermissionResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.EventBridge.Model.Internal.MarshallTransformations.RemovePermissionResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.RemoveTargetsRequestMarshaller">
            <summary>
            RemoveTargets Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.RemoveTargetsRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.RemoveTargetsRequestMarshaller.Marshall(Amazon.EventBridge.Model.RemoveTargetsRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.EventBridge.Model.Internal.MarshallTransformations.RemoveTargetsRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.RemoveTargetsResponseUnmarshaller">
            <summary>
            Response Unmarshaller for RemoveTargets operation
            </summary>  
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.RemoveTargetsResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.RemoveTargetsResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.EventBridge.Model.Internal.MarshallTransformations.RemoveTargetsResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.RemoveTargetsResultEntryUnmarshaller">
            <summary>
            Response Unmarshaller for RemoveTargetsResultEntry Object
            </summary>  
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.RemoveTargetsResultEntryUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#EventBridge#Model#RemoveTargetsResultEntry,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.RemoveTargetsResultEntryUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.EventBridge.Model.Internal.MarshallTransformations.RemoveTargetsResultEntryUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.RuleUnmarshaller">
            <summary>
            Response Unmarshaller for Rule Object
            </summary>  
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.RuleUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#EventBridge#Model#Rule,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.RuleUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.EventBridge.Model.Internal.MarshallTransformations.RuleUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.RunCommandParametersMarshaller">
            <summary>
            RunCommandParameters Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.RunCommandParametersMarshaller.Marshall(Amazon.EventBridge.Model.RunCommandParameters,Amazon.Runtime.Internal.Transform.JsonMarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="requestObject"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="F:Amazon.EventBridge.Model.Internal.MarshallTransformations.RunCommandParametersMarshaller.Instance">
            <summary>
            Singleton Marshaller.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.RunCommandParametersUnmarshaller">
            <summary>
            Response Unmarshaller for RunCommandParameters Object
            </summary>  
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.RunCommandParametersUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#EventBridge#Model#RunCommandParameters,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.RunCommandParametersUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.EventBridge.Model.Internal.MarshallTransformations.RunCommandParametersUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.RunCommandTargetMarshaller">
            <summary>
            RunCommandTarget Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.RunCommandTargetMarshaller.Marshall(Amazon.EventBridge.Model.RunCommandTarget,Amazon.Runtime.Internal.Transform.JsonMarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="requestObject"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="F:Amazon.EventBridge.Model.Internal.MarshallTransformations.RunCommandTargetMarshaller.Instance">
            <summary>
            Singleton Marshaller.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.RunCommandTargetUnmarshaller">
            <summary>
            Response Unmarshaller for RunCommandTarget Object
            </summary>  
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.RunCommandTargetUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#EventBridge#Model#RunCommandTarget,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.RunCommandTargetUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.EventBridge.Model.Internal.MarshallTransformations.RunCommandTargetUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.SqsParametersMarshaller">
            <summary>
            SqsParameters Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.SqsParametersMarshaller.Marshall(Amazon.EventBridge.Model.SqsParameters,Amazon.Runtime.Internal.Transform.JsonMarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="requestObject"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="F:Amazon.EventBridge.Model.Internal.MarshallTransformations.SqsParametersMarshaller.Instance">
            <summary>
            Singleton Marshaller.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.SqsParametersUnmarshaller">
            <summary>
            Response Unmarshaller for SqsParameters Object
            </summary>  
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.SqsParametersUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#EventBridge#Model#SqsParameters,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.SqsParametersUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.EventBridge.Model.Internal.MarshallTransformations.SqsParametersUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.TagMarshaller">
            <summary>
            Tag Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.TagMarshaller.Marshall(Amazon.EventBridge.Model.Tag,Amazon.Runtime.Internal.Transform.JsonMarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="requestObject"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="F:Amazon.EventBridge.Model.Internal.MarshallTransformations.TagMarshaller.Instance">
            <summary>
            Singleton Marshaller.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.TagResourceRequestMarshaller">
            <summary>
            TagResource Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.TagResourceRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.TagResourceRequestMarshaller.Marshall(Amazon.EventBridge.Model.TagResourceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.EventBridge.Model.Internal.MarshallTransformations.TagResourceRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.TagResourceResponseUnmarshaller">
            <summary>
            Response Unmarshaller for TagResource operation
            </summary>  
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.TagResourceResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.TagResourceResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.EventBridge.Model.Internal.MarshallTransformations.TagResourceResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.TagUnmarshaller">
            <summary>
            Response Unmarshaller for Tag Object
            </summary>  
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.TagUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#EventBridge#Model#Tag,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.TagUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.EventBridge.Model.Internal.MarshallTransformations.TagUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.TargetMarshaller">
            <summary>
            Target Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.TargetMarshaller.Marshall(Amazon.EventBridge.Model.Target,Amazon.Runtime.Internal.Transform.JsonMarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="requestObject"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="F:Amazon.EventBridge.Model.Internal.MarshallTransformations.TargetMarshaller.Instance">
            <summary>
            Singleton Marshaller.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.TargetUnmarshaller">
            <summary>
            Response Unmarshaller for Target Object
            </summary>  
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.TargetUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#EventBridge#Model#Target,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.TargetUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.EventBridge.Model.Internal.MarshallTransformations.TargetUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.TestEventPatternRequestMarshaller">
            <summary>
            TestEventPattern Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.TestEventPatternRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.TestEventPatternRequestMarshaller.Marshall(Amazon.EventBridge.Model.TestEventPatternRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.EventBridge.Model.Internal.MarshallTransformations.TestEventPatternRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.TestEventPatternResponseUnmarshaller">
            <summary>
            Response Unmarshaller for TestEventPattern operation
            </summary>  
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.TestEventPatternResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.TestEventPatternResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.EventBridge.Model.Internal.MarshallTransformations.TestEventPatternResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.UntagResourceRequestMarshaller">
            <summary>
            UntagResource Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.UntagResourceRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.UntagResourceRequestMarshaller.Marshall(Amazon.EventBridge.Model.UntagResourceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.EventBridge.Model.Internal.MarshallTransformations.UntagResourceRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.Internal.MarshallTransformations.UntagResourceResponseUnmarshaller">
            <summary>
            Response Unmarshaller for UntagResource operation
            </summary>  
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.UntagResourceResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.EventBridge.Model.Internal.MarshallTransformations.UntagResourceResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.EventBridge.Model.Internal.MarshallTransformations.UntagResourceResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.EventBridge.Model.InvalidEventPatternException">
            <summary>
             EventBridge exception
             </summary>
        </member>
        <member name="M:Amazon.EventBridge.Model.InvalidEventPatternException.#ctor(System.String)">
            <summary>
            Constructs a new InvalidEventPatternException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.EventBridge.Model.InvalidEventPatternException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of InvalidEventPatternException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.EventBridge.Model.InvalidEventPatternException.#ctor(System.Exception)">
            <summary>
            Construct instance of InvalidEventPatternException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.EventBridge.Model.InvalidEventPatternException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of InvalidEventPatternException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.EventBridge.Model.InvalidEventPatternException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of InvalidEventPatternException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.EventBridge.Model.InvalidStateException">
            <summary>
             EventBridge exception
             </summary>
        </member>
        <member name="M:Amazon.EventBridge.Model.InvalidStateException.#ctor(System.String)">
            <summary>
            Constructs a new InvalidStateException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.EventBridge.Model.InvalidStateException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of InvalidStateException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.EventBridge.Model.InvalidStateException.#ctor(System.Exception)">
            <summary>
            Construct instance of InvalidStateException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.EventBridge.Model.InvalidStateException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of InvalidStateException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.EventBridge.Model.InvalidStateException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of InvalidStateException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.EventBridge.Model.KinesisParameters">
            <summary>
            This object enables you to specify a JSON path to extract from the event and use as
            the partition key for the Amazon Kinesis data stream so that you can control the shard
            that the event goes to. If you don't include this parameter, the default is to use
            the <code>eventId</code> as the partition key.
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.KinesisParameters.PartitionKeyPath">
            <summary>
            Gets and sets the property PartitionKeyPath. 
            <para>
            The JSON path to be extracted from the event and used as the partition key. For more
            information, see <a href="https://docs.aws.amazon.com/streams/latest/dev/key-concepts.html#partition-key">Amazon
            Kinesis Streams Key Concepts</a> in the <i>Amazon Kinesis Streams Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.LimitExceededException">
            <summary>
             EventBridge exception
             </summary>
        </member>
        <member name="M:Amazon.EventBridge.Model.LimitExceededException.#ctor(System.String)">
            <summary>
            Constructs a new LimitExceededException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.EventBridge.Model.LimitExceededException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of LimitExceededException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.EventBridge.Model.LimitExceededException.#ctor(System.Exception)">
            <summary>
            Construct instance of LimitExceededException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.EventBridge.Model.LimitExceededException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of LimitExceededException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.EventBridge.Model.LimitExceededException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of LimitExceededException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.EventBridge.Model.ListEventBusesRequest">
            <summary>
            Container for the parameters to the ListEventBuses operation.
            Lists all the event buses in your account, including the default event bus, custom
            event buses, and partner event buses.
            
             <note> 
            <para>
            This operation is run by AWS customers, not by SaaS partners.
            </para>
             </note>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.ListEventBusesRequest.Limit">
            <summary>
            Gets and sets the property Limit. 
            <para>
            Specifying this limits the number of results returned by this operation. The operation
            also returns a <code>NextToken</code> that you can use in a subsequent operation to
            retrieve the next set of results.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.ListEventBusesRequest.NamePrefix">
            <summary>
            Gets and sets the property NamePrefix. 
            <para>
            Specifying this limits the results to only those event buses with names that start
            with the specified prefix.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.ListEventBusesRequest.NextToken">
            <summary>
            Gets and sets the property NextToken. 
            <para>
            The token returned by a previous call to retrieve the next set of results.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.ListEventBusesResponse">
            <summary>
            This is the response object from the ListEventBuses operation.
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.ListEventBusesResponse.EventBuses">
            <summary>
            Gets and sets the property EventBuses. 
            <para>
            This list of event buses.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.ListEventBusesResponse.NextToken">
            <summary>
            Gets and sets the property NextToken. 
            <para>
            A token you can use in a subsequent operation to retrieve the next set of results.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.ListEventSourcesRequest">
            <summary>
            Container for the parameters to the ListEventSources operation.
            You can use this to see all the partner event sources that have been shared with your
            AWS account. For more information about partner event sources, see <a>CreateEventBus</a>.
            
             <note> 
            <para>
            This operation is run by AWS customers, not by SaaS partners.
            </para>
             </note>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.ListEventSourcesRequest.Limit">
            <summary>
            Gets and sets the property Limit. 
            <para>
            Specifying this limits the number of results returned by this operation. The operation
            also returns a <code>NextToken</code> that you can use in a subsequent operation to
            retrieve the next set of results.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.ListEventSourcesRequest.NamePrefix">
            <summary>
            Gets and sets the property NamePrefix. 
            <para>
            Specifying this limits the results to only those partner event sources with names
            that start with the specified prefix.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.ListEventSourcesRequest.NextToken">
            <summary>
            Gets and sets the property NextToken. 
            <para>
            The token returned by a previous call to retrieve the next set of results.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.ListEventSourcesResponse">
            <summary>
            This is the response object from the ListEventSources operation.
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.ListEventSourcesResponse.EventSources">
            <summary>
            Gets and sets the property EventSources. 
            <para>
            The list of event sources.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.ListEventSourcesResponse.NextToken">
            <summary>
            Gets and sets the property NextToken. 
            <para>
            A token you can use in a subsequent operation to retrieve the next set of results.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.ListPartnerEventSourceAccountsRequest">
            <summary>
            Container for the parameters to the ListPartnerEventSourceAccounts operation.
            An SaaS partner can use this operation to display the AWS account ID that a particular
            partner event source name is associated with.
            
             <note> 
            <para>
            This operation is used by SaaS partners, not by AWS customers.
            </para>
             </note>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.ListPartnerEventSourceAccountsRequest.EventSourceName">
            <summary>
            Gets and sets the property EventSourceName. 
            <para>
            The name of the partner event source to display account information about.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.ListPartnerEventSourceAccountsRequest.Limit">
            <summary>
            Gets and sets the property Limit. 
            <para>
            Specifying this limits the number of results returned by this operation. The operation
            also returns a <code>NextToken</code> that you can use in a subsequent operation to
            retrieve the next set of results.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.ListPartnerEventSourceAccountsRequest.NextToken">
            <summary>
            Gets and sets the property NextToken. 
            <para>
            The token returned by a previous call to this operation. Specifying this retrieves
            the next set of results.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.ListPartnerEventSourceAccountsResponse">
            <summary>
            This is the response object from the ListPartnerEventSourceAccounts operation.
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.ListPartnerEventSourceAccountsResponse.NextToken">
            <summary>
            Gets and sets the property NextToken. 
            <para>
            A token you can use in a subsequent operation to retrieve the next set of results.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.ListPartnerEventSourceAccountsResponse.PartnerEventSourceAccounts">
            <summary>
            Gets and sets the property PartnerEventSourceAccounts. 
            <para>
            The list of partner event sources returned by the operation.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.ListPartnerEventSourcesRequest">
            <summary>
            Container for the parameters to the ListPartnerEventSources operation.
            An SaaS partner can use this operation to list all the partner event source names
            that they have created.
            
             <note> 
            <para>
            This operation is not used by AWS customers.
            </para>
             </note>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.ListPartnerEventSourcesRequest.Limit">
            <summary>
            Gets and sets the property Limit. 
            <para>
            pecifying this limits the number of results returned by this operation. The operation
            also returns a <code>NextToken</code> that you can use in a subsequent operation to
            retrieve the next set of results.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.ListPartnerEventSourcesRequest.NamePrefix">
            <summary>
            Gets and sets the property NamePrefix. 
            <para>
            If you specify this, the results are limited to only those partner event sources that
            start with the string you specify.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.ListPartnerEventSourcesRequest.NextToken">
            <summary>
            Gets and sets the property NextToken. 
            <para>
            The token returned by a previous call to this operation. Specifying this retrieves
            the next set of results.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.ListPartnerEventSourcesResponse">
            <summary>
            This is the response object from the ListPartnerEventSources operation.
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.ListPartnerEventSourcesResponse.NextToken">
            <summary>
            Gets and sets the property NextToken. 
            <para>
            A token you can use in a subsequent operation to retrieve the next set of results.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.ListPartnerEventSourcesResponse.PartnerEventSources">
            <summary>
            Gets and sets the property PartnerEventSources. 
            <para>
            The list of partner event sources returned by the operation.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.ListRuleNamesByTargetRequest">
            <summary>
            Container for the parameters to the ListRuleNamesByTarget operation.
            Lists the rules for the specified target. You can see which rules can invoke a specific
            target in your account.
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.ListRuleNamesByTargetRequest.EventBusName">
            <summary>
            Gets and sets the property EventBusName. 
            <para>
            Limits the results to show only the rules associated with the specified event bus.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.ListRuleNamesByTargetRequest.Limit">
            <summary>
            Gets and sets the property Limit. 
            <para>
            The maximum number of results to return.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.ListRuleNamesByTargetRequest.NextToken">
            <summary>
            Gets and sets the property NextToken. 
            <para>
            The token returned by a previous call to retrieve the next set of results.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.ListRuleNamesByTargetRequest.TargetArn">
            <summary>
            Gets and sets the property TargetArn. 
            <para>
            The Amazon Resource Name (ARN) of the target resource.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.ListRuleNamesByTargetResponse">
            <summary>
            This is the response object from the ListRuleNamesByTarget operation.
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.ListRuleNamesByTargetResponse.NextToken">
            <summary>
            Gets and sets the property NextToken. 
            <para>
            Indicates whether there are additional results to retrieve. If there are no more results,
            the value is null.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.ListRuleNamesByTargetResponse.RuleNames">
            <summary>
            Gets and sets the property RuleNames. 
            <para>
            The names of the rules that can invoke the given target.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.ListRulesRequest">
            <summary>
            Container for the parameters to the ListRules operation.
            Lists your EventBridge rules. You can either list all the rules or provide a prefix
            to match to the rule names.
            
             
            <para>
             <code>ListRules</code> doesn't list the targets of a rule. To see the targets associated
            with a rule, use <a>ListTargetsByRule</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.ListRulesRequest.EventBusName">
            <summary>
            Gets and sets the property EventBusName. 
            <para>
            Limits the results to show only the rules associated with the specified event bus.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.ListRulesRequest.Limit">
            <summary>
            Gets and sets the property Limit. 
            <para>
            The maximum number of results to return.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.ListRulesRequest.NamePrefix">
            <summary>
            Gets and sets the property NamePrefix. 
            <para>
            The prefix matching the rule name.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.ListRulesRequest.NextToken">
            <summary>
            Gets and sets the property NextToken. 
            <para>
            The token returned by a previous call to retrieve the next set of results.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.ListRulesResponse">
            <summary>
            This is the response object from the ListRules operation.
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.ListRulesResponse.NextToken">
            <summary>
            Gets and sets the property NextToken. 
            <para>
            Indicates whether there are additional results to retrieve. If there are no more results,
            the value is null.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.ListRulesResponse.Rules">
            <summary>
            Gets and sets the property Rules. 
            <para>
            The rules that match the specified criteria.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.ListTagsForResourceRequest">
            <summary>
            Container for the parameters to the ListTagsForResource operation.
            Displays the tags associated with an EventBridge resource. In EventBridge, rules can
            be tagged.
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.ListTagsForResourceRequest.ResourceARN">
            <summary>
            Gets and sets the property ResourceARN. 
            <para>
            The ARN of the rule for which you want to view tags.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.ListTagsForResourceResponse">
            <summary>
            This is the response object from the ListTagsForResource operation.
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.ListTagsForResourceResponse.Tags">
            <summary>
            Gets and sets the property Tags. 
            <para>
            The list of tag keys and values associated with the rule that you specified.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.ListTargetsByRuleRequest">
            <summary>
            Container for the parameters to the ListTargetsByRule operation.
            Lists the targets assigned to the specified rule.
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.ListTargetsByRuleRequest.EventBusName">
            <summary>
            Gets and sets the property EventBusName. 
            <para>
            The event bus associated with the rule. If you omit this, the default event bus is
            used.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.ListTargetsByRuleRequest.Limit">
            <summary>
            Gets and sets the property Limit. 
            <para>
            The maximum number of results to return.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.ListTargetsByRuleRequest.NextToken">
            <summary>
            Gets and sets the property NextToken. 
            <para>
            The token returned by a previous call to retrieve the next set of results.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.ListTargetsByRuleRequest.Rule">
            <summary>
            Gets and sets the property Rule. 
            <para>
            The name of the rule.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.ListTargetsByRuleResponse">
            <summary>
            This is the response object from the ListTargetsByRule operation.
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.ListTargetsByRuleResponse.NextToken">
            <summary>
            Gets and sets the property NextToken. 
            <para>
            Indicates whether there are additional results to retrieve. If there are no more results,
            the value is null.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.ListTargetsByRuleResponse.Targets">
            <summary>
            Gets and sets the property Targets. 
            <para>
            The targets assigned to the rule.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.ManagedRuleException">
            <summary>
             EventBridge exception
             </summary>
        </member>
        <member name="M:Amazon.EventBridge.Model.ManagedRuleException.#ctor(System.String)">
            <summary>
            Constructs a new ManagedRuleException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.EventBridge.Model.ManagedRuleException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of ManagedRuleException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.EventBridge.Model.ManagedRuleException.#ctor(System.Exception)">
            <summary>
            Construct instance of ManagedRuleException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.EventBridge.Model.ManagedRuleException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of ManagedRuleException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.EventBridge.Model.ManagedRuleException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of ManagedRuleException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.EventBridge.Model.NetworkConfiguration">
            <summary>
            This structure specifies the network configuration for an ECS task.
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.NetworkConfiguration.AwsvpcConfiguration">
            <summary>
            Gets and sets the property AwsvpcConfiguration. 
            <para>
            Use this structure to specify the VPC subnets and security groups for the task and
            whether a public IP address is to be used. This structure is relevant only for ECS
            tasks that use the <code>awsvpc</code> network mode.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.PartnerEventSource">
            <summary>
            A partner event source is created by an SaaS partner. If a customer creates a partner
            event bus that matches this event source, that AWS account can receive events from
            the partner's applications or services.
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.PartnerEventSource.Arn">
            <summary>
            Gets and sets the property Arn. 
            <para>
            The ARN of the partner event source.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.PartnerEventSource.Name">
            <summary>
            Gets and sets the property Name. 
            <para>
            The name of the partner event source.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.PartnerEventSourceAccount">
            <summary>
            The AWS account that a partner event source has been offered to.
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.PartnerEventSourceAccount.Account">
            <summary>
            Gets and sets the property Account. 
            <para>
            The AWS account ID that the partner event source was offered to.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.PartnerEventSourceAccount.CreationTime">
            <summary>
            Gets and sets the property CreationTime. 
            <para>
            The date and time when the event source was created.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.PartnerEventSourceAccount.ExpirationTime">
            <summary>
            Gets and sets the property ExpirationTime. 
            <para>
            The date and time when the event source will expire if the AWS account doesn't create
            a matching event bus for it.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.PartnerEventSourceAccount.State">
            <summary>
            Gets and sets the property State. 
            <para>
            The state of the event source. If it's <code>ACTIVE</code>, you have already created
            a matching event bus for this event source, and that event bus is active. If it's
            <code>PENDING</code>, either you haven't yet created a matching event bus, or that
            event bus is deactivated. If it's <code>DELETED</code>, you have created a matching
            event bus, but the event source has since been deleted.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.PolicyLengthExceededException">
            <summary>
             EventBridge exception
             </summary>
        </member>
        <member name="M:Amazon.EventBridge.Model.PolicyLengthExceededException.#ctor(System.String)">
            <summary>
            Constructs a new PolicyLengthExceededException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.EventBridge.Model.PolicyLengthExceededException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of PolicyLengthExceededException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.EventBridge.Model.PolicyLengthExceededException.#ctor(System.Exception)">
            <summary>
            Construct instance of PolicyLengthExceededException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.EventBridge.Model.PolicyLengthExceededException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of PolicyLengthExceededException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.EventBridge.Model.PolicyLengthExceededException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of PolicyLengthExceededException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.EventBridge.Model.PutEventsRequest">
            <summary>
            Container for the parameters to the PutEvents operation.
            Sends custom events to EventBridge so that they can be matched to rules. These events
            can be from your custom applications and services.
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.PutEventsRequest.Entries">
            <summary>
            Gets and sets the property Entries. 
            <para>
            The entry that defines an event in your system. You can specify several parameters
            for the entry such as the source and type of the event, resources associated with
            the event, and so on.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.PutEventsRequestEntry">
            <summary>
            Represents an event to be submitted.
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.PutEventsRequestEntry.Detail">
            <summary>
            Gets and sets the property Detail. 
            <para>
            A valid JSON object. There is no other schema imposed. The JSON object can contain
            fields and nested subobjects.
            </para>
             
            <para>
            This field is required.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.PutEventsRequestEntry.DetailType">
            <summary>
            Gets and sets the property DetailType. 
            <para>
            Free-form string used to decide which fields to expect in the event detail. This field
            is required.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.PutEventsRequestEntry.EventBusName">
            <summary>
            Gets and sets the property EventBusName. 
            <para>
            The event bus that will receive the event. Only the rules that are associated with
            this event bus can match the event.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.PutEventsRequestEntry.Resources">
            <summary>
            Gets and sets the property Resources. 
            <para>
            AWS resources, identified by Amazon Resource Name (ARN), that the event primarily
            concerns. Any number, including zero, can be present.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.PutEventsRequestEntry.Source">
            <summary>
            Gets and sets the property Source. 
            <para>
            The source of the event. This field is required.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.PutEventsRequestEntry.Time">
            <summary>
            Gets and sets the property Time. 
            <para>
            The timestamp of the event, per <a href="https://www.rfc-editor.org/rfc/rfc3339.txt">RFC3339</a>.
            If no timestamp is provided, the timestamp of the <a>PutEvents</a> call is used.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.PutEventsResponse">
            <summary>
            This is the response object from the PutEvents operation.
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.PutEventsResponse.Entries">
            <summary>
            Gets and sets the property Entries. 
            <para>
            The successfully and unsuccessfully ingested events results. If the ingestion was
            successful, the entry has the event ID in it. Otherwise, you can use the error code
            and error message to identify the problem with the entry.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.PutEventsResponse.FailedEntryCount">
            <summary>
            Gets and sets the property FailedEntryCount. 
            <para>
            The number of failed entries.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.PutEventsResultEntry">
            <summary>
            Represents an event that failed to be submitted.
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.PutEventsResultEntry.ErrorCode">
            <summary>
            Gets and sets the property ErrorCode. 
            <para>
            The error code that indicates why the event submission failed.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.PutEventsResultEntry.ErrorMessage">
            <summary>
            Gets and sets the property ErrorMessage. 
            <para>
            The error message that explains why the event submission failed.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.PutEventsResultEntry.EventId">
            <summary>
            Gets and sets the property EventId. 
            <para>
            The ID of the event.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.PutPartnerEventsRequest">
            <summary>
            Container for the parameters to the PutPartnerEvents operation.
            This is used by SaaS partners to write events to a customer's partner event bus.
            
             <note> 
            <para>
            AWS customers do not use this operation. Instead, AWS customers can use <a>PutEvents</a>
            to write custom events from their own applications to an event bus.
            </para>
             </note>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.PutPartnerEventsRequest.Entries">
            <summary>
            Gets and sets the property Entries. 
            <para>
            The list of events to write to the event bus.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.PutPartnerEventsRequestEntry">
            <summary>
            The details about an event generated by an SaaS partner.
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.PutPartnerEventsRequestEntry.Detail">
            <summary>
            Gets and sets the property Detail. 
            <para>
            A valid JSON object. There is no other schema imposed. The JSON object can contain
            fields and nested subobjects. This field is required.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.PutPartnerEventsRequestEntry.DetailType">
            <summary>
            Gets and sets the property DetailType. 
            <para>
            A free-form string used to decide which fields to expect in the event detail. This
            field is required.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.PutPartnerEventsRequestEntry.Resources">
            <summary>
            Gets and sets the property Resources. 
            <para>
            AWS resources, identified by Amazon Resource Name (ARN), that the event primarily
            concerns. Any number, including zero, can be present.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.PutPartnerEventsRequestEntry.Source">
            <summary>
            Gets and sets the property Source. 
            <para>
            The event source that is generating the evntry. This field is required.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.PutPartnerEventsRequestEntry.Time">
            <summary>
            Gets and sets the property Time. 
            <para>
            The date and time of the event.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.PutPartnerEventsResponse">
            <summary>
            This is the response object from the PutPartnerEvents operation.
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.PutPartnerEventsResponse.Entries">
            <summary>
            Gets and sets the property Entries. 
            <para>
            The list of events from this operation that were successfully written to the partner
            event bus.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.PutPartnerEventsResponse.FailedEntryCount">
            <summary>
            Gets and sets the property FailedEntryCount. 
            <para>
            The number of events from this operation that couldn't be written to the partner event
            bus.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.PutPartnerEventsResultEntry">
            <summary>
            Represents an event that a partner tried to generate but failed.
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.PutPartnerEventsResultEntry.ErrorCode">
            <summary>
            Gets and sets the property ErrorCode. 
            <para>
            The error code that indicates why the event submission failed.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.PutPartnerEventsResultEntry.ErrorMessage">
            <summary>
            Gets and sets the property ErrorMessage. 
            <para>
            The error message that explains why the event submission failed.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.PutPartnerEventsResultEntry.EventId">
            <summary>
            Gets and sets the property EventId. 
            <para>
            The ID of the event.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.PutPermissionRequest">
            <summary>
            Container for the parameters to the PutPermission operation.
            Running <code>PutPermission</code> permits the specified AWS account or AWS organization
            to put events to the specified <i>event bus</i>. Rules in your account are triggered
            by these events arriving to an event bus in your account. 
            
             
            <para>
            For another account to send events to your account, that external account must have
            a rule with your account's event bus as a target.
            </para>
             
            <para>
            To enable multiple AWS accounts to put events to an event bus, run <code>PutPermission</code>
            once for each of these accounts. Or, if all the accounts are members of the same AWS
            organization, you can run <code>PutPermission</code> once specifying <code>Principal</code>
            as "*" and specifying the AWS organization ID in <code>Condition</code>, to grant
            permissions to all accounts in that organization.
            </para>
             
            <para>
            If you grant permissions using an organization, then accounts in that organization
            must specify a <code>RoleArn</code> with proper permissions when they use <code>PutTarget</code>
            to add your account's event bus as a target. For more information, see <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eventbridge-cross-account-event-delivery.html">Sending
            and Receiving Events Between AWS Accounts</a> in the <i>Amazon EventBridge User Guide</i>.
            </para>
             
            <para>
            The permission policy on an event bus can't exceed 10 KB in size.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.PutPermissionRequest.Action">
            <summary>
            Gets and sets the property Action. 
            <para>
            The action that you're enabling the other account to perform. Currently, this must
            be <code>events:PutEvents</code>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.PutPermissionRequest.Condition">
            <summary>
            Gets and sets the property Condition. 
            <para>
            This parameter enables you to limit the permission to accounts that fulfill a certain
            condition, such as being a member of a certain AWS organization. For more information
            about AWS Organizations, see <a href="https://docs.aws.amazon.com/organizations/latest/userguide/orgs_introduction.html">What
            Is AWS Organizations?</a> in the <i>AWS Organizations User Guide</i>.
            </para>
             
            <para>
            If you specify <code>Condition</code> with an AWS organization ID and specify "*"
            as the value for <code>Principal</code>, you grant permission to all the accounts
            in the named organization.
            </para>
             
            <para>
            The <code>Condition</code> is a JSON string that must contain <code>Type</code>, <code>Key</code>,
            and <code>Value</code> fields.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.PutPermissionRequest.EventBusName">
            <summary>
            Gets and sets the property EventBusName. 
            <para>
            The event bus associated with the rule. If you omit this, the default event bus is
            used.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.PutPermissionRequest.Principal">
            <summary>
            Gets and sets the property Principal. 
            <para>
            The 12-digit AWS account ID that you are permitting to put events to your default
            event bus. Specify "*" to permit any account to put events to your default event bus.
            </para>
             
            <para>
            If you specify "*" without specifying <code>Condition</code>, avoid creating rules
            that might match undesirable events. To create more secure rules, make sure that the
            event pattern for each rule contains an <code>account</code> field with a specific
            account ID to receive events from. Rules that have an account field match events sent
            only from accounts that are listed in the rule's <code>account</code> field.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.PutPermissionRequest.StatementId">
            <summary>
            Gets and sets the property StatementId. 
            <para>
            An identifier string for the external account that you're granting permissions to.
            If you later want to revoke the permission for this external account, specify this
            <code>StatementId</code> when you run <a>RemovePermission</a>.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.PutPermissionResponse">
            <summary>
            This is the response object from the PutPermission operation.
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.PutRuleRequest">
            <summary>
            Container for the parameters to the PutRule operation.
            Creates or updates the specified rule. Rules are enabled by default or based on value
            of the state. You can disable a rule using <a>DisableRule</a>.
            
             
            <para>
            A single rule watches for events from a single event bus. Events generated by AWS
            services go to your account's default event bus. Events generated by SaaS partner
            services or applications go to the matching partner event bus. If you have custom
            applications or services, you can specify whether their events go to your default
            event bus or a custom event bus that you have created. For more information, see <a>CreateEventBus</a>.
            </para>
             
            <para>
            If you're updating an existing rule, the rule is replaced with what you specify in
            this <code>PutRule</code> command. If you omit arguments in <code>PutRule</code>,
            the old values for those arguments aren't kept. Instead, they're replaced with null
            values.
            </para>
             
            <para>
            When you create or update a rule, incoming events might not immediately start matching
            to new or updated rules. Allow a short period of time for changes to take effect.
            </para>
             
            <para>
            A rule must contain at least an <code>EventPattern</code> or <code>ScheduleExpression</code>.
            Rules with <code>EventPatterns</code> are triggered when a matching event is observed.
            Rules with <code>ScheduleExpressions</code> self-trigger based on the given schedule.
            A rule can have both an <code>EventPattern</code> and a <code>ScheduleExpression</code>,
            in which case the rule triggers on matching events as well as on a schedule.
            </para>
             
            <para>
            When you initially create a rule, you can optionally assign one or more tags to the
            rule. Tags can help you organize and categorize your resources. You can also use them
            to scope user permissions, by granting a user permission to access or change only
            rules with certain tag values. To use the <code>PutRule</code> operation and assign
            tags, you must have both the <code>events:PutRule</code> and <code>events:TagResource</code>
            permissions.
            </para>
             
            <para>
            If you are updating an existing rule, any tags you specify in the <code>PutRule</code>
            operation are ignored. To update the tags of an existing rule, use <a>TagResource</a>
            and <a>UntagResource</a>.
            </para>
             
            <para>
            Most services in AWS treat <code>:</code> or <code>/</code> as the same character
            in Amazon Resource Names (ARNs). However, EventBridge uses an exact match in event
            patterns and rules. Be sure to use the correct ARN characters when creating event
            patterns so that they match the ARN syntax in the event that you want to match.
            </para>
             
            <para>
            In EventBridge, you could create rules that lead to infinite loops, where a rule is
            fired repeatedly. For example, a rule might detect that ACLs have changed on an S3
            bucket, and trigger software to change them to the desired state. If you don't write
            the rule carefully, the subsequent change to the ACLs fires the rule again, creating
            an infinite loop.
            </para>
             
            <para>
            To prevent this, write the rules so that the triggered actions don't refire the same
            rule. For example, your rule could fire only if ACLs are found to be in a bad state,
            instead of after any change. 
            </para>
             
            <para>
            An infinite loop can quickly cause higher than expected charges. We recommend that
            you use budgeting, which alerts you when charges exceed your specified limit. For
            more information, see <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/budgets-managing-costs.html">Managing
            Your Costs with Budgets</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.PutRuleRequest.Description">
            <summary>
            Gets and sets the property Description. 
            <para>
            A description of the rule.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.PutRuleRequest.EventBusName">
            <summary>
            Gets and sets the property EventBusName. 
            <para>
            The event bus to associate with this rule. If you omit this, the default event bus
            is used.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.PutRuleRequest.EventPattern">
            <summary>
            Gets and sets the property EventPattern. 
            <para>
            The event pattern. For more information, see <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eventbridge-and-event-patterns.html">Event
            Patterns</a> in the <i>Amazon EventBridge User Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.PutRuleRequest.Name">
            <summary>
            Gets and sets the property Name. 
            <para>
            The name of the rule that you're creating or updating.
            </para>
             
            <para>
            A rule can't have the same name as another rule in the same Region or on the same
            event bus.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.PutRuleRequest.RoleArn">
            <summary>
            Gets and sets the property RoleArn. 
            <para>
            The Amazon Resource Name (ARN) of the IAM role associated with the rule.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.PutRuleRequest.ScheduleExpression">
            <summary>
            Gets and sets the property ScheduleExpression. 
            <para>
            The scheduling expression: for example, <code>"cron(0 20 * * ? *)"</code> or <code>"rate(5
            minutes)"</code>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.PutRuleRequest.State">
            <summary>
            Gets and sets the property State. 
            <para>
            Indicates whether the rule is enabled or disabled.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.PutRuleRequest.Tags">
            <summary>
            Gets and sets the property Tags. 
            <para>
            The list of key-value pairs to associate with the rule.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.PutRuleResponse">
            <summary>
            This is the response object from the PutRule operation.
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.PutRuleResponse.RuleArn">
            <summary>
            Gets and sets the property RuleArn. 
            <para>
            The Amazon Resource Name (ARN) of the rule.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.PutTargetsRequest">
            <summary>
            Container for the parameters to the PutTargets operation.
            Adds the specified targets to the specified rule, or updates the targets if they're
            already associated with the rule.
            
             
            <para>
            Targets are the resources that are invoked when a rule is triggered.
            </para>
             
            <para>
            You can configure the following as targets in EventBridge:
            </para>
             <ul> <li> 
            <para>
            EC2 instances
            </para>
             </li> <li> 
            <para>
            SSM Run Command
            </para>
             </li> <li> 
            <para>
            SSM Automation
            </para>
             </li> <li> 
            <para>
            AWS Lambda functions
            </para>
             </li> <li> 
            <para>
            Data streams in Amazon Kinesis Data Streams
            </para>
             </li> <li> 
            <para>
            Data delivery streams in Amazon Kinesis Data Firehose
            </para>
             </li> <li> 
            <para>
            Amazon ECS tasks
            </para>
             </li> <li> 
            <para>
            AWS Step Functions state machines
            </para>
             </li> <li> 
            <para>
            AWS Batch jobs
            </para>
             </li> <li> 
            <para>
            AWS CodeBuild projects
            </para>
             </li> <li> 
            <para>
            Pipelines in AWS CodePipeline
            </para>
             </li> <li> 
            <para>
            Amazon Inspector assessment templates
            </para>
             </li> <li> 
            <para>
            Amazon SNS topics
            </para>
             </li> <li> 
            <para>
            Amazon SQS queues, including FIFO queues
            </para>
             </li> <li> 
            <para>
            The default event bus of another AWS account
            </para>
             </li> </ul> 
            <para>
            Creating rules with built-in targets is supported only on the AWS Management Console.
            The built-in targets are <code>EC2 CreateSnapshot API call</code>, <code>EC2 RebootInstances
            API call</code>, <code>EC2 StopInstances API call</code>, and <code>EC2 TerminateInstances
            API call</code>. 
            </para>
             
            <para>
            For some target types, <code>PutTargets</code> provides target-specific parameters.
            If the target is a Kinesis data stream, you can optionally specify which shard the
            event goes to by using the <code>KinesisParameters</code> argument. To invoke a command
            on multiple EC2 instances with one rule, you can use the <code>RunCommandParameters</code>
            field.
            </para>
             
            <para>
            To be able to make API calls against the resources that you own, Amazon EventBridge
            needs the appropriate permissions. For AWS Lambda and Amazon SNS resources, EventBridge
            relies on resource-based policies. For EC2 instances, Kinesis data streams, and AWS
            Step Functions state machines, EventBridge relies on IAM roles that you specify in
            the <code>RoleARN</code> argument in <code>PutTargets</code>. For more information,
            see <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/auth-and-access-control-eventbridge.html">Authentication
            and Access Control</a> in the <i>Amazon EventBridge User Guide</i>.
            </para>
             
            <para>
            If another AWS account is in the same Region and has granted you permission (using
            <code>PutPermission</code>), you can send events to that account. Set that account's
            event bus as a target of the rules in your account. To send the matched events to
            the other account, specify that account's event bus as the <code>Arn</code> value
            when you run <code>PutTargets</code>. If your account sends events to another account,
            your account is charged for each sent event. Each event sent to another account is
            charged as a custom event. The account receiving the event isn't charged. For more
            information, see <a href="https://aws.amazon.com/eventbridge/pricing/">Amazon EventBridge
            Pricing</a>.
            </para>
             
            <para>
            If you're setting an event bus in another account as the target and that account granted
            permission to your account through an organization instead of directly by the account
            ID, you must specify a <code>RoleArn</code> with proper permissions in the <code>Target</code>
            structure. For more information, see <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eventbridge-cross-account-event-delivery.html">Sending
            and Receiving Events Between AWS Accounts</a> in the <i>Amazon EventBridge User Guide</i>.
            </para>
             
            <para>
            For more information about enabling cross-account events, see <a>PutPermission</a>.
            </para>
             
            <para>
             <code>Input</code>, <code>InputPath</code>, and <code>InputTransformer</code> are
            mutually exclusive and optional parameters of a target. When a rule is triggered due
            to a matched event:
            </para>
             <ul> <li> 
            <para>
            If none of the following arguments are specified for a target, the entire event is
            passed to the target in JSON format (unless the target is Amazon EC2 Run Command or
            Amazon ECS task, in which case nothing from the event is passed to the target).
            </para>
             </li> <li> 
            <para>
            If <code>Input</code> is specified in the form of valid JSON, then the matched event
            is overridden with this constant.
            </para>
             </li> <li> 
            <para>
            If <code>InputPath</code> is specified in the form of JSONPath (for example, <code>$.detail</code>),
            only the part of the event specified in the path is passed to the target (for example,
            only the detail part of the event is passed).
            </para>
             </li> <li> 
            <para>
            If <code>InputTransformer</code> is specified, one or more specified JSONPaths are
            extracted from the event and used as values in a template that you specify as the
            input to the target.
            </para>
             </li> </ul> 
            <para>
            When you specify <code>InputPath</code> or <code>InputTransformer</code>, you must
            use JSON dot notation, not bracket notation.
            </para>
             
            <para>
            When you add targets to a rule and the associated rule triggers soon after, new or
            updated targets might not be immediately invoked. Allow a short period of time for
            changes to take effect.
            </para>
             
            <para>
            This action can partially fail if too many requests are made at the same time. If
            that happens, <code>FailedEntryCount</code> is nonzero in the response, and each entry
            in <code>FailedEntries</code> provides the ID of the failed target and the error code.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.PutTargetsRequest.EventBusName">
            <summary>
            Gets and sets the property EventBusName. 
            <para>
            The name of the event bus associated with the rule. If you omit this, the default
            event bus is used.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.PutTargetsRequest.Rule">
            <summary>
            Gets and sets the property Rule. 
            <para>
            The name of the rule.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.PutTargetsRequest.Targets">
            <summary>
            Gets and sets the property Targets. 
            <para>
            The targets to update or add to the rule.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.PutTargetsResponse">
            <summary>
            This is the response object from the PutTargets operation.
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.PutTargetsResponse.FailedEntries">
            <summary>
            Gets and sets the property FailedEntries. 
            <para>
            The failed target entries.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.PutTargetsResponse.FailedEntryCount">
            <summary>
            Gets and sets the property FailedEntryCount. 
            <para>
            The number of failed entries.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.PutTargetsResultEntry">
            <summary>
            Represents a target that failed to be added to a rule.
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.PutTargetsResultEntry.ErrorCode">
            <summary>
            Gets and sets the property ErrorCode. 
            <para>
            The error code that indicates why the target addition failed. If the value is <code>ConcurrentModificationException</code>,
            too many requests were made at the same time.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.PutTargetsResultEntry.ErrorMessage">
            <summary>
            Gets and sets the property ErrorMessage. 
            <para>
            The error message that explains why the target addition failed.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.PutTargetsResultEntry.TargetId">
            <summary>
            Gets and sets the property TargetId. 
            <para>
            The ID of the target.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.RemovePermissionRequest">
            <summary>
            Container for the parameters to the RemovePermission operation.
            Revokes the permission of another AWS account to be able to put events to the specified
            event bus. Specify the account to revoke by the <code>StatementId</code> value that
            you associated with the account when you granted it permission with <code>PutPermission</code>.
            You can find the <code>StatementId</code> by using <a>DescribeEventBus</a>.
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.RemovePermissionRequest.EventBusName">
            <summary>
            Gets and sets the property EventBusName. 
            <para>
            The name of the event bus to revoke permissions for. If you omit this, the default
            event bus is used.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.RemovePermissionRequest.StatementId">
            <summary>
            Gets and sets the property StatementId. 
            <para>
            The statement ID corresponding to the account that is no longer allowed to put events
            to the default event bus.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.RemovePermissionResponse">
            <summary>
            This is the response object from the RemovePermission operation.
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.RemoveTargetsRequest">
            <summary>
            Container for the parameters to the RemoveTargets operation.
            Removes the specified targets from the specified rule. When the rule is triggered,
            those targets are no longer be invoked.
            
             
            <para>
            When you remove a target, when the associated rule triggers, removed targets might
            continue to be invoked. Allow a short period of time for changes to take effect.
            </para>
             
            <para>
            This action can partially fail if too many requests are made at the same time. If
            that happens, <code>FailedEntryCount</code> is non-zero in the response and each entry
            in <code>FailedEntries</code> provides the ID of the failed target and the error code.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.RemoveTargetsRequest.EventBusName">
            <summary>
            Gets and sets the property EventBusName. 
            <para>
            The name of the event bus associated with the rule.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.RemoveTargetsRequest.Force">
            <summary>
            Gets and sets the property Force. 
            <para>
            If this is a managed rule created by an AWS service on your behalf, you must specify
            <code>Force</code> as <code>True</code> to remove targets. This parameter is ignored
            for rules that aren't managed rules. You can check whether a rule is a managed rule
            by using <code>DescribeRule</code> or <code>ListRules</code> and checking the <code>ManagedBy</code>
            field of the response.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.RemoveTargetsRequest.Ids">
            <summary>
            Gets and sets the property Ids. 
            <para>
            The IDs of the targets to remove from the rule.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.RemoveTargetsRequest.Rule">
            <summary>
            Gets and sets the property Rule. 
            <para>
            The name of the rule.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.RemoveTargetsResponse">
            <summary>
            This is the response object from the RemoveTargets operation.
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.RemoveTargetsResponse.FailedEntries">
            <summary>
            Gets and sets the property FailedEntries. 
            <para>
            The failed target entries.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.RemoveTargetsResponse.FailedEntryCount">
            <summary>
            Gets and sets the property FailedEntryCount. 
            <para>
            The number of failed entries.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.RemoveTargetsResultEntry">
            <summary>
            Represents a target that failed to be removed from a rule.
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.RemoveTargetsResultEntry.ErrorCode">
            <summary>
            Gets and sets the property ErrorCode. 
            <para>
            The error code that indicates why the target removal failed. If the value is <code>ConcurrentModificationException</code>,
            too many requests were made at the same time.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.RemoveTargetsResultEntry.ErrorMessage">
            <summary>
            Gets and sets the property ErrorMessage. 
            <para>
            The error message that explains why the target removal failed.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.RemoveTargetsResultEntry.TargetId">
            <summary>
            Gets and sets the property TargetId. 
            <para>
            The ID of the target.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.ResourceAlreadyExistsException">
            <summary>
             EventBridge exception
             </summary>
        </member>
        <member name="M:Amazon.EventBridge.Model.ResourceAlreadyExistsException.#ctor(System.String)">
            <summary>
            Constructs a new ResourceAlreadyExistsException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.EventBridge.Model.ResourceAlreadyExistsException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of ResourceAlreadyExistsException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.EventBridge.Model.ResourceAlreadyExistsException.#ctor(System.Exception)">
            <summary>
            Construct instance of ResourceAlreadyExistsException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.EventBridge.Model.ResourceAlreadyExistsException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of ResourceAlreadyExistsException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.EventBridge.Model.ResourceAlreadyExistsException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of ResourceAlreadyExistsException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.EventBridge.Model.ResourceNotFoundException">
            <summary>
             EventBridge exception
             </summary>
        </member>
        <member name="M:Amazon.EventBridge.Model.ResourceNotFoundException.#ctor(System.String)">
            <summary>
            Constructs a new ResourceNotFoundException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.EventBridge.Model.ResourceNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of ResourceNotFoundException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.EventBridge.Model.ResourceNotFoundException.#ctor(System.Exception)">
            <summary>
            Construct instance of ResourceNotFoundException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.EventBridge.Model.ResourceNotFoundException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of ResourceNotFoundException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.EventBridge.Model.ResourceNotFoundException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of ResourceNotFoundException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.EventBridge.Model.Rule">
            <summary>
            Contains information about a rule in Amazon EventBridge.
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.Rule.Arn">
            <summary>
            Gets and sets the property Arn. 
            <para>
            The Amazon Resource Name (ARN) of the rule.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.Rule.Description">
            <summary>
            Gets and sets the property Description. 
            <para>
            The description of the rule.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.Rule.EventBusName">
            <summary>
            Gets and sets the property EventBusName. 
            <para>
            The event bus associated with the rule.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.Rule.EventPattern">
            <summary>
            Gets and sets the property EventPattern. 
            <para>
            The event pattern of the rule. For more information, see <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eventbridge-and-event-patterns.html">Event
            Patterns</a> in the <i>Amazon EventBridge User Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.Rule.ManagedBy">
            <summary>
            Gets and sets the property ManagedBy. 
            <para>
            If an AWS service created the rule on behalf of your account, this field displays
            the principal name of the service that created the rule.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.Rule.Name">
            <summary>
            Gets and sets the property Name. 
            <para>
            The name of the rule.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.Rule.RoleArn">
            <summary>
            Gets and sets the property RoleArn. 
            <para>
            The Amazon Resource Name (ARN) of the role that is used for target invocation.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.Rule.ScheduleExpression">
            <summary>
            Gets and sets the property ScheduleExpression. 
            <para>
            The scheduling expression: for example, <code>"cron(0 20 * * ? *)"</code> or <code>"rate(5
            minutes)"</code>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.Rule.State">
            <summary>
            Gets and sets the property State. 
            <para>
            The state of the rule.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.RunCommandParameters">
            <summary>
            This parameter contains the criteria (either <code>InstanceIds</code> or a tag) used
            to specify which EC2 instances are to be sent the command.
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.RunCommandParameters.RunCommandTargets">
            <summary>
            Gets and sets the property RunCommandTargets. 
            <para>
            Currently, we support including only one <code>RunCommandTarget</code> block, which
            specifies either an array of <code>InstanceIds</code> or a tag.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.RunCommandTarget">
            <summary>
            Information about the EC2 instances that are to be sent the command, specified as
            key-value pairs. Each <code>RunCommandTarget</code> block can include only one key,
            but this key can specify multiple values.
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.RunCommandTarget.Key">
            <summary>
            Gets and sets the property Key. 
            <para>
            Can be either <code>tag:</code> <i>tag-key</i> or <code>InstanceIds</code>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.RunCommandTarget.Values">
            <summary>
            Gets and sets the property Values. 
            <para>
            If <code>Key</code> is <code>tag:</code> <i>tag-key</i>, <code>Values</code> is a
            list of tag values. If <code>Key</code> is <code>InstanceIds</code>, <code>Values</code>
            is a list of Amazon EC2 instance IDs.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.SqsParameters">
            <summary>
            This structure includes the custom parameter to be used when the target is an SQS
            FIFO queue.
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.SqsParameters.MessageGroupId">
            <summary>
            Gets and sets the property MessageGroupId. 
            <para>
            The FIFO message group ID to use as the target.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.Tag">
            <summary>
            A key-value pair associated with an AWS resource. In EventBridge, rules support tagging.
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.Tag.Key">
            <summary>
            Gets and sets the property Key. 
            <para>
            A string that you can use to assign a value. The combination of tag keys and values
            can help you organize and categorize your resources.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.Tag.Value">
            <summary>
            Gets and sets the property Value. 
            <para>
            The value for the specified tag key.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.TagResourceRequest">
            <summary>
            Container for the parameters to the TagResource operation.
            Assigns one or more tags (key-value pairs) to the specified EventBridge resource.
            Tags can help you organize and categorize your resources. You can also use them to
            scope user permissions by granting a user permission to access or change only resources
            with certain tag values. In EventBridge, rules can be tagged.
            
             
            <para>
            Tags don't have any semantic meaning to AWS and are interpreted strictly as strings
            of characters.
            </para>
             
            <para>
            You can use the <code>TagResource</code> action with a rule that already has tags.
            If you specify a new tag key for the rule, this tag is appended to the list of tags
            associated with the rule. If you specify a tag key that is already associated with
            the rule, the new tag value that you specify replaces the previous value for that
            tag.
            </para>
             
            <para>
            You can associate as many as 50 tags with a resource.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.TagResourceRequest.ResourceARN">
            <summary>
            Gets and sets the property ResourceARN. 
            <para>
            The ARN of the rule that you're adding tags to.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.TagResourceRequest.Tags">
            <summary>
            Gets and sets the property Tags. 
            <para>
            The list of key-value pairs to associate with the rule.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.TagResourceResponse">
            <summary>
            This is the response object from the TagResource operation.
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.Target">
            <summary>
            Targets are the resources to be invoked when a rule is triggered. For a complete list
            of services and resources that can be set as a target, see <a>PutTargets</a>.
            
             
            <para>
            If you're setting the event bus of another account as the target and that account
            granted permission to your account through an organization instead of directly by
            the account ID, you must specify a <code>RoleArn</code> with proper permissions in
            the <code>Target</code> structure. For more information, see <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eventbridge-cross-account-event-delivery.html">Sending
            and Receiving Events Between AWS Accounts</a> in the <i>Amazon EventBridge User Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.Target.Arn">
            <summary>
            Gets and sets the property Arn. 
            <para>
            The Amazon Resource Name (ARN) of the target.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.Target.BatchParameters">
            <summary>
            Gets and sets the property BatchParameters. 
            <para>
            If the event target is an AWS Batch job, this contains the job definition, job name,
            and other parameters. For more information, see <a href="https://docs.aws.amazon.com/batch/latest/userguide/jobs.html">Jobs</a>
            in the <i>AWS Batch User Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.Target.EcsParameters">
            <summary>
            Gets and sets the property EcsParameters. 
            <para>
            Contains the Amazon ECS task definition and task count to be used if the event target
            is an Amazon ECS task. For more information about Amazon ECS tasks, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_defintions.html">Task
            Definitions </a> in the <i>Amazon EC2 Container Service Developer Guide</i>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.Target.Id">
            <summary>
            Gets and sets the property Id. 
            <para>
            A name for the target. Use a string that will help you identify the target. Each target
            associated with a rule must have an <code>Id</code> unique for that rule.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.Target.Input">
            <summary>
            Gets and sets the property Input. 
            <para>
            Valid JSON text passed to the target. In this case, nothing from the event itself
            is passed to the target. For more information, see <a href="http://www.rfc-editor.org/rfc/rfc7159.txt">The
            JavaScript Object Notation (JSON) Data Interchange Format</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.Target.InputPath">
            <summary>
            Gets and sets the property InputPath. 
            <para>
            The value of the JSONPath that is used for extracting part of the matched event when
            passing it to the target. You must use JSON dot notation, not bracket notation. For
            more information about JSON paths, see <a href="http://goessner.net/articles/JsonPath/">JSONPath</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.Target.InputTransformer">
            <summary>
            Gets and sets the property InputTransformer. 
            <para>
            Settings to enable you to provide custom input to a target based on certain event
            data. You can extract one or more key-value pairs from the event and then use that
            data to send customized input to the target.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.Target.KinesisParameters">
            <summary>
            Gets and sets the property KinesisParameters. 
            <para>
            The custom parameter that you can use to control the shard assignment when the target
            is a Kinesis data stream. If you don't include this parameter, the default is to use
            the <code>eventId</code> as the partition key.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.Target.RoleArn">
            <summary>
            Gets and sets the property RoleArn. 
            <para>
            The Amazon Resource Name (ARN) of the IAM role to be used for this target when the
            rule is triggered. If one rule triggers multiple targets, you can use a different
            IAM role for each target.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.Target.RunCommandParameters">
            <summary>
            Gets and sets the property RunCommandParameters. 
            <para>
            Parameters used when you are using the rule to invoke Amazon EC2 Run Command.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.Target.SqsParameters">
            <summary>
            Gets and sets the property SqsParameters. 
            <para>
            Contains the message group ID to use when the target is a FIFO queue.
            </para>
             
            <para>
            If you specify an SQS FIFO queue as a target, the queue must have content-based deduplication
            enabled.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.TestEventPatternRequest">
            <summary>
            Container for the parameters to the TestEventPattern operation.
            Tests whether the specified event pattern matches the provided event.
            
             
            <para>
            Most services in AWS treat <code>:</code> or <code>/</code> as the same character
            in Amazon Resource Names (ARNs). However, EventBridge uses an exact match in event
            patterns and rules. Be sure to use the correct ARN characters when creating event
            patterns so that they match the ARN syntax in the event that you want to match.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.TestEventPatternRequest.Event">
            <summary>
            Gets and sets the property Event. 
            <para>
            The event, in JSON format, to test against the event pattern.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.TestEventPatternRequest.EventPattern">
            <summary>
            Gets and sets the property EventPattern. 
            <para>
            The event pattern. For more information, see <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eventbridge-and-event-patterns.html">Event
            Patterns</a> in the <i>Amazon EventBridge User Guide</i>.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.TestEventPatternResponse">
            <summary>
            This is the response object from the TestEventPattern operation.
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.TestEventPatternResponse.Result">
            <summary>
            Gets and sets the property Result. 
            <para>
            Indicates whether the event matches the event pattern.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.UntagResourceRequest">
            <summary>
            Container for the parameters to the UntagResource operation.
            Removes one or more tags from the specified EventBridge resource. In EventBridge,
            rules can be tagged.
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.UntagResourceRequest.ResourceARN">
            <summary>
            Gets and sets the property ResourceARN. 
            <para>
            The ARN of the rule that you're removing tags from.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.Model.UntagResourceRequest.TagKeys">
            <summary>
            Gets and sets the property TagKeys. 
            <para>
            The list of tag keys to remove from the resource.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.Model.UntagResourceResponse">
            <summary>
            This is the response object from the UntagResource operation.
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.AmazonEventBridgeRequest">
            <summary>
            Base class for EventBridge operation requests.
            </summary>
        </member>
        <member name="T:Amazon.EventBridge.AssignPublicIp">
            <summary>
            Constants used for properties of type AssignPublicIp.
            </summary>
        </member>
        <member name="F:Amazon.EventBridge.AssignPublicIp.DISABLED">
            <summary>
            Constant DISABLED for AssignPublicIp
            </summary>
        </member>
        <member name="F:Amazon.EventBridge.AssignPublicIp.ENABLED">
            <summary>
            Constant ENABLED for AssignPublicIp
            </summary>
        </member>
        <member name="M:Amazon.EventBridge.AssignPublicIp.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.EventBridge.AssignPublicIp.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.EventBridge.AssignPublicIp.op_Implicit(System.String)~Amazon.EventBridge.AssignPublicIp">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.EventBridge.EventSourceState">
            <summary>
            Constants used for properties of type EventSourceState.
            </summary>
        </member>
        <member name="F:Amazon.EventBridge.EventSourceState.ACTIVE">
            <summary>
            Constant ACTIVE for EventSourceState
            </summary>
        </member>
        <member name="F:Amazon.EventBridge.EventSourceState.DELETED">
            <summary>
            Constant DELETED for EventSourceState
            </summary>
        </member>
        <member name="F:Amazon.EventBridge.EventSourceState.PENDING">
            <summary>
            Constant PENDING for EventSourceState
            </summary>
        </member>
        <member name="M:Amazon.EventBridge.EventSourceState.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.EventBridge.EventSourceState.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.EventBridge.EventSourceState.op_Implicit(System.String)~Amazon.EventBridge.EventSourceState">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.EventBridge.LaunchType">
            <summary>
            Constants used for properties of type LaunchType.
            </summary>
        </member>
        <member name="F:Amazon.EventBridge.LaunchType.EC2">
            <summary>
            Constant EC2 for LaunchType
            </summary>
        </member>
        <member name="F:Amazon.EventBridge.LaunchType.FARGATE">
            <summary>
            Constant FARGATE for LaunchType
            </summary>
        </member>
        <member name="M:Amazon.EventBridge.LaunchType.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.EventBridge.LaunchType.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.EventBridge.LaunchType.op_Implicit(System.String)~Amazon.EventBridge.LaunchType">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.EventBridge.RuleState">
            <summary>
            Constants used for properties of type RuleState.
            </summary>
        </member>
        <member name="F:Amazon.EventBridge.RuleState.DISABLED">
            <summary>
            Constant DISABLED for RuleState
            </summary>
        </member>
        <member name="F:Amazon.EventBridge.RuleState.ENABLED">
            <summary>
            Constant ENABLED for RuleState
            </summary>
        </member>
        <member name="M:Amazon.EventBridge.RuleState.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.EventBridge.RuleState.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.EventBridge.RuleState.op_Implicit(System.String)~Amazon.EventBridge.RuleState">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.EventBridge.AmazonEventBridgeClient">
             <summary>
             Implementation for accessing EventBridge
            
             Amazon EventBridge helps you to respond to state changes in your AWS resources. When
             your resources change state, they automatically send events into an event stream.
             You can create rules that match selected events in the stream and route them to targets
             to take action. You can also use rules to take action on a predetermined schedule.
             For example, you can configure rules to:
             
              <ul> <li> 
             <para>
             Automatically invoke an AWS Lambda function to update DNS entries when an event notifies
             you that Amazon EC2 instance enters the running state
             </para>
              </li> <li> 
             <para>
             Direct specific API records from AWS CloudTrail to an Amazon Kinesis data stream for
             detailed analysis of potential security or availability risks
             </para>
              </li> <li> 
             <para>
             Periodically invoke a built-in target to create a snapshot of an Amazon EBS volume
             </para>
              </li> </ul> 
             <para>
             For more information about the features of Amazon EventBridge, see the <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/">Amazon
             EventBridge User Guide</a>.
             </para>
             </summary>
        </member>
        <member name="M:Amazon.EventBridge.AmazonEventBridgeClient.#ctor">
             <summary>
             Constructs AmazonEventBridgeClient with the credentials loaded from the application's
             default configuration, and if unsuccessful from the Instance Profile service on an EC2 instance.
             
             Example App.config with credentials set. 
             <code>
             &lt;?xml version="1.0" encoding="utf-8" ?&gt;
             &lt;configuration&gt;
                 &lt;appSettings&gt;
                     &lt;add key="AWSProfileName" value="AWS Default"/&gt;
                 &lt;/appSettings&gt;
             &lt;/configuration&gt;
             </code>
            
             </summary>
        </member>
        <member name="M:Amazon.EventBridge.AmazonEventBridgeClient.#ctor(Amazon.RegionEndpoint)">
             <summary>
             Constructs AmazonEventBridgeClient with the credentials loaded from the application's
             default configuration, and if unsuccessful from the Instance Profile service on an EC2 instance.
             
             Example App.config with credentials set. 
             <code>
             &lt;?xml version="1.0" encoding="utf-8" ?&gt;
             &lt;configuration&gt;
                 &lt;appSettings&gt;
                     &lt;add key="AWSProfileName" value="AWS Default"/&gt;
                 &lt;/appSettings&gt;
             &lt;/configuration&gt;
             </code>
            
             </summary>
             <param name="region">The region to connect.</param>
        </member>
        <member name="M:Amazon.EventBridge.AmazonEventBridgeClient.#ctor(Amazon.EventBridge.AmazonEventBridgeConfig)">
             <summary>
             Constructs AmazonEventBridgeClient with the credentials loaded from the application's
             default configuration, and if unsuccessful from the Instance Profile service on an EC2 instance.
             
             Example App.config with credentials set. 
             <code>
             &lt;?xml version="1.0" encoding="utf-8" ?&gt;
             &lt;configuration&gt;
                 &lt;appSettings&gt;
                     &lt;add key="AWSProfileName" value="AWS Default"/&gt;
                 &lt;/appSettings&gt;
             &lt;/configuration&gt;
             </code>
            
             </summary>
             <param name="config">The AmazonEventBridgeClient Configuration Object</param>
        </member>
        <member name="M:Amazon.EventBridge.AmazonEventBridgeClient.#ctor(Amazon.Runtime.AWSCredentials)">
            <summary>
            Constructs AmazonEventBridgeClient with AWS Credentials
            </summary>
            <param name="credentials">AWS Credentials</param>
        </member>
        <member name="M:Amazon.EventBridge.AmazonEventBridgeClient.#ctor(Amazon.Runtime.AWSCredentials,Amazon.RegionEndpoint)">
            <summary>
            Constructs AmazonEventBridgeClient with AWS Credentials
            </summary>
            <param name="credentials">AWS Credentials</param>
            <param name="region">The region to connect.</param>
        </member>
        <member name="M:Amazon.EventBridge.AmazonEventBridgeClient.#ctor(Amazon.Runtime.AWSCredentials,Amazon.EventBridge.AmazonEventBridgeConfig)">
            <summary>
            Constructs AmazonEventBridgeClient with AWS Credentials and an
            AmazonEventBridgeClient Configuration object.
            </summary>
            <param name="credentials">AWS Credentials</param>
            <param name="clientConfig">The AmazonEventBridgeClient Configuration Object</param>
        </member>
        <member name="M:Amazon.EventBridge.AmazonEventBridgeClient.#ctor(System.String,System.String)">
            <summary>
            Constructs AmazonEventBridgeClient with AWS Access Key ID and AWS Secret Key
            </summary>
            <param name="awsAccessKeyId">AWS Access Key ID</param>
            <param name="awsSecretAccessKey">AWS Secret Access Key</param>
        </member>
        <member name="M:Amazon.EventBridge.AmazonEventBridgeClient.#ctor(System.String,System.String,Amazon.RegionEndpoint)">
            <summary>
            Constructs AmazonEventBridgeClient with AWS Access Key ID and AWS Secret Key
            </summary>
            <param name="awsAccessKeyId">AWS Access Key ID</param>
            <param name="awsSecretAccessKey">AWS Secret Access Key</param>
            <param name="region">The region to connect.</param>
        </member>
        <member name="M:Amazon.EventBridge.AmazonEventBridgeClient.#ctor(System.String,System.String,Amazon.EventBridge.AmazonEventBridgeConfig)">
            <summary>
            Constructs AmazonEventBridgeClient with AWS Access Key ID, AWS Secret Key and an
            AmazonEventBridgeClient Configuration object. 
            </summary>
            <param name="awsAccessKeyId">AWS Access Key ID</param>
            <param name="awsSecretAccessKey">AWS Secret Access Key</param>
            <param name="clientConfig">The AmazonEventBridgeClient Configuration Object</param>
        </member>
        <member name="M:Amazon.EventBridge.AmazonEventBridgeClient.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructs AmazonEventBridgeClient with AWS Access Key ID and AWS Secret Key
            </summary>
            <param name="awsAccessKeyId">AWS Access Key ID</param>
            <param name="awsSecretAccessKey">AWS Secret Access Key</param>
            <param name="awsSessionToken">AWS Session Token</param>
        </member>
        <member name="M:Amazon.EventBridge.AmazonEventBridgeClient.#ctor(System.String,System.String,System.String,Amazon.RegionEndpoint)">
            <summary>
            Constructs AmazonEventBridgeClient with AWS Access Key ID and AWS Secret Key
            </summary>
            <param name="awsAccessKeyId">AWS Access Key ID</param>
            <param name="awsSecretAccessKey">AWS Secret Access Key</param>
            <param name="awsSessionToken">AWS Session Token</param>
            <param name="region">The region to connect.</param>
        </member>
        <member name="M:Amazon.EventBridge.AmazonEventBridgeClient.#ctor(System.String,System.String,System.String,Amazon.EventBridge.AmazonEventBridgeConfig)">
            <summary>
            Constructs AmazonEventBridgeClient with AWS Access Key ID, AWS Secret Key and an
            AmazonEventBridgeClient Configuration object. 
            </summary>
            <param name="awsAccessKeyId">AWS Access Key ID</param>
            <param name="awsSecretAccessKey">AWS Secret Access Key</param>
            <param name="awsSessionToken">AWS Session Token</param>
            <param name="clientConfig">The AmazonEventBridgeClient Configuration Object</param>
        </member>
        <member name="M:Amazon.EventBridge.AmazonEventBridgeClient.CreateSigner">
            <summary>
            Creates the signer for the service.
            </summary>
        </member>
        <member name="P:Amazon.EventBridge.AmazonEventBridgeClient.ServiceMetadata">
            <summary>
            Capture metadata for the service.
            </summary>
        </member>
        <member name="M:Amazon.EventBridge.AmazonEventBridgeClient.Dispose(System.Boolean)">
            <summary>
            Disposes the service client.
            </summary>
        </member>
        <member name="M:Amazon.EventBridge.AmazonEventBridgeClient.ActivateEventSourceAsync(Amazon.EventBridge.Model.ActivateEventSourceRequest,System.Threading.CancellationToken)">
            <summary>
            Activates a partner event source that has been deactivated. Once activated, your matching
            event bus will start receiving events from the event source.
            
             <note> 
            <para>
            This operation is performed by AWS customers, not by SaaS partners.
            </para>
             </note>
            </summary>
            <param name="request">Container for the necessary parameters to execute the ActivateEventSource service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the ActivateEventSource service method, as returned by EventBridge.</returns>
            <exception cref="T:Amazon.EventBridge.Model.InternalException">
            This exception occurs due to unexpected causes.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.InvalidStateException">
            The specified state isn't a valid state for an event source.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.ResourceNotFoundException">
            An entity that you specified doesn't exist.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/ActivateEventSource">REST API Reference for ActivateEventSource Operation</seealso>
        </member>
        <member name="M:Amazon.EventBridge.AmazonEventBridgeClient.CreateEventBusAsync(Amazon.EventBridge.Model.CreateEventBusRequest,System.Threading.CancellationToken)">
            <summary>
            Creates a new event bus within your account. This can be a custom event bus which
            you can use to receive events from your own custom applications and services, or it
            can be a partner event bus which can be matched to a partner event source.
            
             <note> 
            <para>
            This operation is used by AWS customers, not by SaaS partners.
            </para>
             </note>
            </summary>
            <param name="request">Container for the necessary parameters to execute the CreateEventBus service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the CreateEventBus service method, as returned by EventBridge.</returns>
            <exception cref="T:Amazon.EventBridge.Model.ConcurrentModificationException">
            There is concurrent modification on a resource.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.InternalException">
            This exception occurs due to unexpected causes.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.InvalidStateException">
            The specified state isn't a valid state for an event source.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.LimitExceededException">
            You tried to create more resources than is allowed.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.ResourceAlreadyExistsException">
            The resource that you're trying to create already exists.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.ResourceNotFoundException">
            An entity that you specified doesn't exist.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/CreateEventBus">REST API Reference for CreateEventBus Operation</seealso>
        </member>
        <member name="M:Amazon.EventBridge.AmazonEventBridgeClient.CreatePartnerEventSourceAsync(Amazon.EventBridge.Model.CreatePartnerEventSourceRequest,System.Threading.CancellationToken)">
            <summary>
            Called by an SaaS partner to create a partner event source.
            
             <note> 
            <para>
            This operation is not used by AWS customers.
            </para>
             </note> 
            <para>
            Each partner event source can be used by one AWS account to create a matching partner
            event bus in that AWS account. A SaaS partner must create one partner event source
            for each AWS account that wants to receive those event types. 
            </para>
             
            <para>
            A partner event source creates events based on resources in the SaaS partner's service
            or application.
            </para>
             
            <para>
            An AWS account that creates a partner event bus that matches the partner event source
            can use that event bus to receive events from the partner, and then process them using
            AWS Events rules and targets.
            </para>
             
            <para>
            Partner event source names follow this format:
            </para>
             
            <para>
             <code>aws.partner/<i>partner_name</i>/<i>event_namespace</i>/<i>event_name</i> </code>
            
            </para>
             <ul> <li> 
            <para>
             <i>partner_name</i> is determined during partner registration and identifies the
            partner to AWS customers.
            </para>
             </li> <li> 
            <para>
            For <i>event_namespace</i>, we recommend that partners use a string that identifies
            the AWS customer within the partner's system. This should not be the customer's AWS
            account ID.
            </para>
             </li> <li> 
            <para>
             <i>event_name</i> is determined by the partner, and should uniquely identify an event-generating
            resource within the partner system. This should help AWS customers decide whether
            to create an event bus to receive these events.
            </para>
             </li> </ul>
            </summary>
            <param name="request">Container for the necessary parameters to execute the CreatePartnerEventSource service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the CreatePartnerEventSource service method, as returned by EventBridge.</returns>
            <exception cref="T:Amazon.EventBridge.Model.ConcurrentModificationException">
            There is concurrent modification on a resource.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.InternalException">
            This exception occurs due to unexpected causes.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.LimitExceededException">
            You tried to create more resources than is allowed.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.ResourceAlreadyExistsException">
            The resource that you're trying to create already exists.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/CreatePartnerEventSource">REST API Reference for CreatePartnerEventSource Operation</seealso>
        </member>
        <member name="M:Amazon.EventBridge.AmazonEventBridgeClient.DeactivateEventSourceAsync(Amazon.EventBridge.Model.DeactivateEventSourceRequest,System.Threading.CancellationToken)">
            <summary>
            An AWS customer uses this operation to temporarily stop receiving events from the
            specified partner event source. The matching event bus isn't deleted. 
            
             
            <para>
            When you deactivate a partner event source, the source goes into <code>PENDING</code>
            state. If it remains in <code>PENDING</code> state for more than two weeks, it's deleted.
            </para>
             
            <para>
            To activate a deactivated partner event source, use <a>ActivateEventSource</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DeactivateEventSource service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DeactivateEventSource service method, as returned by EventBridge.</returns>
            <exception cref="T:Amazon.EventBridge.Model.InternalException">
            This exception occurs due to unexpected causes.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.InvalidStateException">
            The specified state isn't a valid state for an event source.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.ResourceNotFoundException">
            An entity that you specified doesn't exist.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/DeactivateEventSource">REST API Reference for DeactivateEventSource Operation</seealso>
        </member>
        <member name="M:Amazon.EventBridge.AmazonEventBridgeClient.DeleteEventBusAsync(Amazon.EventBridge.Model.DeleteEventBusRequest,System.Threading.CancellationToken)">
            <summary>
            Deletes the specified custom event bus or partner event bus. All rules associated
            with this event bus are also deleted. You can't delete your account's default event
            bus.
            
             <note> 
            <para>
            This operation is performed by AWS customers, not by SaaS partners.
            </para>
             </note>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DeleteEventBus service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DeleteEventBus service method, as returned by EventBridge.</returns>
            <exception cref="T:Amazon.EventBridge.Model.InternalException">
            This exception occurs due to unexpected causes.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/DeleteEventBus">REST API Reference for DeleteEventBus Operation</seealso>
        </member>
        <member name="M:Amazon.EventBridge.AmazonEventBridgeClient.DeletePartnerEventSourceAsync(Amazon.EventBridge.Model.DeletePartnerEventSourceRequest,System.Threading.CancellationToken)">
            <summary>
            This operation is used by SaaS partners to delete a partner event source. AWS customers
            don't use this operation.
            
             
            <para>
            When you delete an event source, the status of the corresponding partner event bus
            in the AWS customer account becomes <code>DELETED</code>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DeletePartnerEventSource service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DeletePartnerEventSource service method, as returned by EventBridge.</returns>
            <exception cref="T:Amazon.EventBridge.Model.InternalException">
            This exception occurs due to unexpected causes.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/DeletePartnerEventSource">REST API Reference for DeletePartnerEventSource Operation</seealso>
        </member>
        <member name="M:Amazon.EventBridge.AmazonEventBridgeClient.DeleteRuleAsync(Amazon.EventBridge.Model.DeleteRuleRequest,System.Threading.CancellationToken)">
            <summary>
            Deletes the specified rule.
            
             
            <para>
            Before you can delete the rule, you must remove all targets, using <a>RemoveTargets</a>.
            </para>
             
            <para>
            When you delete a rule, incoming events might continue to match to the deleted rule.
            Allow a short period of time for changes to take effect.
            </para>
             
            <para>
            Managed rules are rules created and managed by another AWS service on your behalf.
            These rules are created by those other AWS services to support functionality in those
            services. You can delete these rules using the <code>Force</code> option, but you
            should do so only if you're sure that the other service isn't still using that rule.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DeleteRule service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DeleteRule service method, as returned by EventBridge.</returns>
            <exception cref="T:Amazon.EventBridge.Model.ConcurrentModificationException">
            There is concurrent modification on a resource.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.InternalException">
            This exception occurs due to unexpected causes.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.ManagedRuleException">
            An AWS service created this rule on behalf of your account. That service manages it.
            If you see this error in response to <code>DeleteRule</code> or <code>RemoveTargets</code>,
            you can use the <code>Force</code> parameter in those calls to delete the rule or
            remove targets from the rule. You can't modify these managed rules by using <code>DisableRule</code>,
            <code>EnableRule</code>, <code>PutTargets</code>, <code>PutRule</code>, <code>TagResource</code>,
            or <code>UntagResource</code>.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.ResourceNotFoundException">
            An entity that you specified doesn't exist.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/DeleteRule">REST API Reference for DeleteRule Operation</seealso>
        </member>
        <member name="M:Amazon.EventBridge.AmazonEventBridgeClient.DescribeEventBusAsync(Amazon.EventBridge.Model.DescribeEventBusRequest,System.Threading.CancellationToken)">
            <summary>
            Displays details about an event bus in your account. This can include the external
            AWS accounts that are permitted to write events to your default event bus, and the
            associated policy. For custom event buses and partner event buses, it displays the
            name, ARN, policy, state, and creation time.
            
             
            <para>
             To enable your account to receive events from other accounts on its default event
            bus, use <a>PutPermission</a>.
            </para>
             
            <para>
            For more information about partner event buses, see <a>CreateEventBus</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DescribeEventBus service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DescribeEventBus service method, as returned by EventBridge.</returns>
            <exception cref="T:Amazon.EventBridge.Model.InternalException">
            This exception occurs due to unexpected causes.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.ResourceNotFoundException">
            An entity that you specified doesn't exist.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/DescribeEventBus">REST API Reference for DescribeEventBus Operation</seealso>
        </member>
        <member name="M:Amazon.EventBridge.AmazonEventBridgeClient.DescribeEventSourceAsync(Amazon.EventBridge.Model.DescribeEventSourceRequest,System.Threading.CancellationToken)">
            <summary>
            This operation lists details about a partner event source that is shared with your
            account.
            
             <note> 
            <para>
            This operation is run by AWS customers, not by SaaS partners.
            </para>
             </note>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DescribeEventSource service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DescribeEventSource service method, as returned by EventBridge.</returns>
            <exception cref="T:Amazon.EventBridge.Model.InternalException">
            This exception occurs due to unexpected causes.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.ResourceNotFoundException">
            An entity that you specified doesn't exist.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/DescribeEventSource">REST API Reference for DescribeEventSource Operation</seealso>
        </member>
        <member name="M:Amazon.EventBridge.AmazonEventBridgeClient.DescribePartnerEventSourceAsync(Amazon.EventBridge.Model.DescribePartnerEventSourceRequest,System.Threading.CancellationToken)">
            <summary>
            An SaaS partner can use this operation to list details about a partner event source
            that they have created.
            
             <note> 
            <para>
            AWS customers do not use this operation. Instead, AWS customers can use <a>DescribeEventSource</a>
            to see details about a partner event source that is shared with them.
            </para>
             </note>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DescribePartnerEventSource service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DescribePartnerEventSource service method, as returned by EventBridge.</returns>
            <exception cref="T:Amazon.EventBridge.Model.InternalException">
            This exception occurs due to unexpected causes.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.ResourceNotFoundException">
            An entity that you specified doesn't exist.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/DescribePartnerEventSource">REST API Reference for DescribePartnerEventSource Operation</seealso>
        </member>
        <member name="M:Amazon.EventBridge.AmazonEventBridgeClient.DescribeRuleAsync(Amazon.EventBridge.Model.DescribeRuleRequest,System.Threading.CancellationToken)">
            <summary>
            Describes the specified rule.
            
             
            <para>
             <code>DescribeRule</code> doesn't list the targets of a rule. To see the targets
            associated with a rule, use <a>ListTargetsByRule</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DescribeRule service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DescribeRule service method, as returned by EventBridge.</returns>
            <exception cref="T:Amazon.EventBridge.Model.InternalException">
            This exception occurs due to unexpected causes.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.ResourceNotFoundException">
            An entity that you specified doesn't exist.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/DescribeRule">REST API Reference for DescribeRule Operation</seealso>
        </member>
        <member name="M:Amazon.EventBridge.AmazonEventBridgeClient.DisableRuleAsync(Amazon.EventBridge.Model.DisableRuleRequest,System.Threading.CancellationToken)">
            <summary>
            Disables the specified rule. A disabled rule won't match any events and won't self-trigger
            if it has a schedule expression.
            
             
            <para>
            When you disable a rule, incoming events might continue to match to the disabled rule.
            Allow a short period of time for changes to take effect.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DisableRule service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DisableRule service method, as returned by EventBridge.</returns>
            <exception cref="T:Amazon.EventBridge.Model.ConcurrentModificationException">
            There is concurrent modification on a resource.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.InternalException">
            This exception occurs due to unexpected causes.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.ManagedRuleException">
            An AWS service created this rule on behalf of your account. That service manages it.
            If you see this error in response to <code>DeleteRule</code> or <code>RemoveTargets</code>,
            you can use the <code>Force</code> parameter in those calls to delete the rule or
            remove targets from the rule. You can't modify these managed rules by using <code>DisableRule</code>,
            <code>EnableRule</code>, <code>PutTargets</code>, <code>PutRule</code>, <code>TagResource</code>,
            or <code>UntagResource</code>.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.ResourceNotFoundException">
            An entity that you specified doesn't exist.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/DisableRule">REST API Reference for DisableRule Operation</seealso>
        </member>
        <member name="M:Amazon.EventBridge.AmazonEventBridgeClient.EnableRuleAsync(Amazon.EventBridge.Model.EnableRuleRequest,System.Threading.CancellationToken)">
            <summary>
            Enables the specified rule. If the rule doesn't exist, the operation fails.
            
             
            <para>
            When you enable a rule, incoming events might not immediately start matching to a
            newly enabled rule. Allow a short period of time for changes to take effect.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the EnableRule service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the EnableRule service method, as returned by EventBridge.</returns>
            <exception cref="T:Amazon.EventBridge.Model.ConcurrentModificationException">
            There is concurrent modification on a resource.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.InternalException">
            This exception occurs due to unexpected causes.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.ManagedRuleException">
            An AWS service created this rule on behalf of your account. That service manages it.
            If you see this error in response to <code>DeleteRule</code> or <code>RemoveTargets</code>,
            you can use the <code>Force</code> parameter in those calls to delete the rule or
            remove targets from the rule. You can't modify these managed rules by using <code>DisableRule</code>,
            <code>EnableRule</code>, <code>PutTargets</code>, <code>PutRule</code>, <code>TagResource</code>,
            or <code>UntagResource</code>.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.ResourceNotFoundException">
            An entity that you specified doesn't exist.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/EnableRule">REST API Reference for EnableRule Operation</seealso>
        </member>
        <member name="M:Amazon.EventBridge.AmazonEventBridgeClient.ListEventBusesAsync(Amazon.EventBridge.Model.ListEventBusesRequest,System.Threading.CancellationToken)">
            <summary>
            Lists all the event buses in your account, including the default event bus, custom
            event buses, and partner event buses.
            
             <note> 
            <para>
            This operation is run by AWS customers, not by SaaS partners.
            </para>
             </note>
            </summary>
            <param name="request">Container for the necessary parameters to execute the ListEventBuses service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the ListEventBuses service method, as returned by EventBridge.</returns>
            <exception cref="T:Amazon.EventBridge.Model.InternalException">
            This exception occurs due to unexpected causes.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/ListEventBuses">REST API Reference for ListEventBuses Operation</seealso>
        </member>
        <member name="M:Amazon.EventBridge.AmazonEventBridgeClient.ListEventSourcesAsync(Amazon.EventBridge.Model.ListEventSourcesRequest,System.Threading.CancellationToken)">
            <summary>
            You can use this to see all the partner event sources that have been shared with your
            AWS account. For more information about partner event sources, see <a>CreateEventBus</a>.
            
             <note> 
            <para>
            This operation is run by AWS customers, not by SaaS partners.
            </para>
             </note>
            </summary>
            <param name="request">Container for the necessary parameters to execute the ListEventSources service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the ListEventSources service method, as returned by EventBridge.</returns>
            <exception cref="T:Amazon.EventBridge.Model.InternalException">
            This exception occurs due to unexpected causes.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/ListEventSources">REST API Reference for ListEventSources Operation</seealso>
        </member>
        <member name="M:Amazon.EventBridge.AmazonEventBridgeClient.ListPartnerEventSourceAccountsAsync(Amazon.EventBridge.Model.ListPartnerEventSourceAccountsRequest,System.Threading.CancellationToken)">
            <summary>
            An SaaS partner can use this operation to display the AWS account ID that a particular
            partner event source name is associated with.
            
             <note> 
            <para>
            This operation is used by SaaS partners, not by AWS customers.
            </para>
             </note>
            </summary>
            <param name="request">Container for the necessary parameters to execute the ListPartnerEventSourceAccounts service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the ListPartnerEventSourceAccounts service method, as returned by EventBridge.</returns>
            <exception cref="T:Amazon.EventBridge.Model.InternalException">
            This exception occurs due to unexpected causes.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.ResourceNotFoundException">
            An entity that you specified doesn't exist.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/ListPartnerEventSourceAccounts">REST API Reference for ListPartnerEventSourceAccounts Operation</seealso>
        </member>
        <member name="M:Amazon.EventBridge.AmazonEventBridgeClient.ListPartnerEventSourcesAsync(Amazon.EventBridge.Model.ListPartnerEventSourcesRequest,System.Threading.CancellationToken)">
            <summary>
            An SaaS partner can use this operation to list all the partner event source names
            that they have created.
            
             <note> 
            <para>
            This operation is not used by AWS customers.
            </para>
             </note>
            </summary>
            <param name="request">Container for the necessary parameters to execute the ListPartnerEventSources service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the ListPartnerEventSources service method, as returned by EventBridge.</returns>
            <exception cref="T:Amazon.EventBridge.Model.InternalException">
            This exception occurs due to unexpected causes.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/ListPartnerEventSources">REST API Reference for ListPartnerEventSources Operation</seealso>
        </member>
        <member name="M:Amazon.EventBridge.AmazonEventBridgeClient.ListRuleNamesByTargetAsync(Amazon.EventBridge.Model.ListRuleNamesByTargetRequest,System.Threading.CancellationToken)">
            <summary>
            Lists the rules for the specified target. You can see which rules can invoke a specific
            target in your account.
            </summary>
            <param name="request">Container for the necessary parameters to execute the ListRuleNamesByTarget service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the ListRuleNamesByTarget service method, as returned by EventBridge.</returns>
            <exception cref="T:Amazon.EventBridge.Model.InternalException">
            This exception occurs due to unexpected causes.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.ResourceNotFoundException">
            An entity that you specified doesn't exist.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/ListRuleNamesByTarget">REST API Reference for ListRuleNamesByTarget Operation</seealso>
        </member>
        <member name="M:Amazon.EventBridge.AmazonEventBridgeClient.ListRulesAsync(Amazon.EventBridge.Model.ListRulesRequest,System.Threading.CancellationToken)">
            <summary>
            Lists your EventBridge rules. You can either list all the rules or provide a prefix
            to match to the rule names.
            
             
            <para>
             <code>ListRules</code> doesn't list the targets of a rule. To see the targets associated
            with a rule, use <a>ListTargetsByRule</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the ListRules service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the ListRules service method, as returned by EventBridge.</returns>
            <exception cref="T:Amazon.EventBridge.Model.InternalException">
            This exception occurs due to unexpected causes.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.ResourceNotFoundException">
            An entity that you specified doesn't exist.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/ListRules">REST API Reference for ListRules Operation</seealso>
        </member>
        <member name="M:Amazon.EventBridge.AmazonEventBridgeClient.ListTagsForResourceAsync(Amazon.EventBridge.Model.ListTagsForResourceRequest,System.Threading.CancellationToken)">
            <summary>
            Displays the tags associated with an EventBridge resource. In EventBridge, rules can
            be tagged.
            </summary>
            <param name="request">Container for the necessary parameters to execute the ListTagsForResource service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the ListTagsForResource service method, as returned by EventBridge.</returns>
            <exception cref="T:Amazon.EventBridge.Model.InternalException">
            This exception occurs due to unexpected causes.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.ResourceNotFoundException">
            An entity that you specified doesn't exist.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/ListTagsForResource">REST API Reference for ListTagsForResource Operation</seealso>
        </member>
        <member name="M:Amazon.EventBridge.AmazonEventBridgeClient.ListTargetsByRuleAsync(Amazon.EventBridge.Model.ListTargetsByRuleRequest,System.Threading.CancellationToken)">
            <summary>
            Lists the targets assigned to the specified rule.
            </summary>
            <param name="request">Container for the necessary parameters to execute the ListTargetsByRule service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the ListTargetsByRule service method, as returned by EventBridge.</returns>
            <exception cref="T:Amazon.EventBridge.Model.InternalException">
            This exception occurs due to unexpected causes.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.ResourceNotFoundException">
            An entity that you specified doesn't exist.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/ListTargetsByRule">REST API Reference for ListTargetsByRule Operation</seealso>
        </member>
        <member name="M:Amazon.EventBridge.AmazonEventBridgeClient.PutEventsAsync(Amazon.EventBridge.Model.PutEventsRequest,System.Threading.CancellationToken)">
            <summary>
            Sends custom events to EventBridge so that they can be matched to rules. These events
            can be from your custom applications and services.
            </summary>
            <param name="request">Container for the necessary parameters to execute the PutEvents service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the PutEvents service method, as returned by EventBridge.</returns>
            <exception cref="T:Amazon.EventBridge.Model.InternalException">
            This exception occurs due to unexpected causes.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/PutEvents">REST API Reference for PutEvents Operation</seealso>
        </member>
        <member name="M:Amazon.EventBridge.AmazonEventBridgeClient.PutPartnerEventsAsync(Amazon.EventBridge.Model.PutPartnerEventsRequest,System.Threading.CancellationToken)">
            <summary>
            This is used by SaaS partners to write events to a customer's partner event bus.
            
             <note> 
            <para>
            AWS customers do not use this operation. Instead, AWS customers can use <a>PutEvents</a>
            to write custom events from their own applications to an event bus.
            </para>
             </note>
            </summary>
            <param name="request">Container for the necessary parameters to execute the PutPartnerEvents service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the PutPartnerEvents service method, as returned by EventBridge.</returns>
            <exception cref="T:Amazon.EventBridge.Model.InternalException">
            This exception occurs due to unexpected causes.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/PutPartnerEvents">REST API Reference for PutPartnerEvents Operation</seealso>
        </member>
        <member name="M:Amazon.EventBridge.AmazonEventBridgeClient.PutPermissionAsync(Amazon.EventBridge.Model.PutPermissionRequest,System.Threading.CancellationToken)">
            <summary>
            Running <code>PutPermission</code> permits the specified AWS account or AWS organization
            to put events to the specified <i>event bus</i>. Rules in your account are triggered
            by these events arriving to an event bus in your account. 
            
             
            <para>
            For another account to send events to your account, that external account must have
            a rule with your account's event bus as a target.
            </para>
             
            <para>
            To enable multiple AWS accounts to put events to an event bus, run <code>PutPermission</code>
            once for each of these accounts. Or, if all the accounts are members of the same AWS
            organization, you can run <code>PutPermission</code> once specifying <code>Principal</code>
            as "*" and specifying the AWS organization ID in <code>Condition</code>, to grant
            permissions to all accounts in that organization.
            </para>
             
            <para>
            If you grant permissions using an organization, then accounts in that organization
            must specify a <code>RoleArn</code> with proper permissions when they use <code>PutTarget</code>
            to add your account's event bus as a target. For more information, see <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eventbridge-cross-account-event-delivery.html">Sending
            and Receiving Events Between AWS Accounts</a> in the <i>Amazon EventBridge User Guide</i>.
            </para>
             
            <para>
            The permission policy on an event bus can't exceed 10 KB in size.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the PutPermission service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the PutPermission service method, as returned by EventBridge.</returns>
            <exception cref="T:Amazon.EventBridge.Model.ConcurrentModificationException">
            There is concurrent modification on a resource.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.InternalException">
            This exception occurs due to unexpected causes.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.PolicyLengthExceededException">
            The event bus policy is too long. For more information, see the limits.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.ResourceNotFoundException">
            An entity that you specified doesn't exist.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/PutPermission">REST API Reference for PutPermission Operation</seealso>
        </member>
        <member name="M:Amazon.EventBridge.AmazonEventBridgeClient.PutRuleAsync(Amazon.EventBridge.Model.PutRuleRequest,System.Threading.CancellationToken)">
            <summary>
            Creates or updates the specified rule. Rules are enabled by default or based on value
            of the state. You can disable a rule using <a>DisableRule</a>.
            
             
            <para>
            A single rule watches for events from a single event bus. Events generated by AWS
            services go to your account's default event bus. Events generated by SaaS partner
            services or applications go to the matching partner event bus. If you have custom
            applications or services, you can specify whether their events go to your default
            event bus or a custom event bus that you have created. For more information, see <a>CreateEventBus</a>.
            </para>
             
            <para>
            If you're updating an existing rule, the rule is replaced with what you specify in
            this <code>PutRule</code> command. If you omit arguments in <code>PutRule</code>,
            the old values for those arguments aren't kept. Instead, they're replaced with null
            values.
            </para>
             
            <para>
            When you create or update a rule, incoming events might not immediately start matching
            to new or updated rules. Allow a short period of time for changes to take effect.
            </para>
             
            <para>
            A rule must contain at least an <code>EventPattern</code> or <code>ScheduleExpression</code>.
            Rules with <code>EventPatterns</code> are triggered when a matching event is observed.
            Rules with <code>ScheduleExpressions</code> self-trigger based on the given schedule.
            A rule can have both an <code>EventPattern</code> and a <code>ScheduleExpression</code>,
            in which case the rule triggers on matching events as well as on a schedule.
            </para>
             
            <para>
            When you initially create a rule, you can optionally assign one or more tags to the
            rule. Tags can help you organize and categorize your resources. You can also use them
            to scope user permissions, by granting a user permission to access or change only
            rules with certain tag values. To use the <code>PutRule</code> operation and assign
            tags, you must have both the <code>events:PutRule</code> and <code>events:TagResource</code>
            permissions.
            </para>
             
            <para>
            If you are updating an existing rule, any tags you specify in the <code>PutRule</code>
            operation are ignored. To update the tags of an existing rule, use <a>TagResource</a>
            and <a>UntagResource</a>.
            </para>
             
            <para>
            Most services in AWS treat <code>:</code> or <code>/</code> as the same character
            in Amazon Resource Names (ARNs). However, EventBridge uses an exact match in event
            patterns and rules. Be sure to use the correct ARN characters when creating event
            patterns so that they match the ARN syntax in the event that you want to match.
            </para>
             
            <para>
            In EventBridge, you could create rules that lead to infinite loops, where a rule is
            fired repeatedly. For example, a rule might detect that ACLs have changed on an S3
            bucket, and trigger software to change them to the desired state. If you don't write
            the rule carefully, the subsequent change to the ACLs fires the rule again, creating
            an infinite loop.
            </para>
             
            <para>
            To prevent this, write the rules so that the triggered actions don't refire the same
            rule. For example, your rule could fire only if ACLs are found to be in a bad state,
            instead of after any change. 
            </para>
             
            <para>
            An infinite loop can quickly cause higher than expected charges. We recommend that
            you use budgeting, which alerts you when charges exceed your specified limit. For
            more information, see <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/budgets-managing-costs.html">Managing
            Your Costs with Budgets</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the PutRule service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the PutRule service method, as returned by EventBridge.</returns>
            <exception cref="T:Amazon.EventBridge.Model.ConcurrentModificationException">
            There is concurrent modification on a resource.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.InternalException">
            This exception occurs due to unexpected causes.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.InvalidEventPatternException">
            The event pattern isn't valid.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.LimitExceededException">
            You tried to create more resources than is allowed.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.ManagedRuleException">
            An AWS service created this rule on behalf of your account. That service manages it.
            If you see this error in response to <code>DeleteRule</code> or <code>RemoveTargets</code>,
            you can use the <code>Force</code> parameter in those calls to delete the rule or
            remove targets from the rule. You can't modify these managed rules by using <code>DisableRule</code>,
            <code>EnableRule</code>, <code>PutTargets</code>, <code>PutRule</code>, <code>TagResource</code>,
            or <code>UntagResource</code>.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.ResourceNotFoundException">
            An entity that you specified doesn't exist.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/PutRule">REST API Reference for PutRule Operation</seealso>
        </member>
        <member name="M:Amazon.EventBridge.AmazonEventBridgeClient.PutTargetsAsync(Amazon.EventBridge.Model.PutTargetsRequest,System.Threading.CancellationToken)">
            <summary>
            Adds the specified targets to the specified rule, or updates the targets if they're
            already associated with the rule.
            
             
            <para>
            Targets are the resources that are invoked when a rule is triggered.
            </para>
             
            <para>
            You can configure the following as targets in EventBridge:
            </para>
             <ul> <li> 
            <para>
            EC2 instances
            </para>
             </li> <li> 
            <para>
            SSM Run Command
            </para>
             </li> <li> 
            <para>
            SSM Automation
            </para>
             </li> <li> 
            <para>
            AWS Lambda functions
            </para>
             </li> <li> 
            <para>
            Data streams in Amazon Kinesis Data Streams
            </para>
             </li> <li> 
            <para>
            Data delivery streams in Amazon Kinesis Data Firehose
            </para>
             </li> <li> 
            <para>
            Amazon ECS tasks
            </para>
             </li> <li> 
            <para>
            AWS Step Functions state machines
            </para>
             </li> <li> 
            <para>
            AWS Batch jobs
            </para>
             </li> <li> 
            <para>
            AWS CodeBuild projects
            </para>
             </li> <li> 
            <para>
            Pipelines in AWS CodePipeline
            </para>
             </li> <li> 
            <para>
            Amazon Inspector assessment templates
            </para>
             </li> <li> 
            <para>
            Amazon SNS topics
            </para>
             </li> <li> 
            <para>
            Amazon SQS queues, including FIFO queues
            </para>
             </li> <li> 
            <para>
            The default event bus of another AWS account
            </para>
             </li> </ul> 
            <para>
            Creating rules with built-in targets is supported only on the AWS Management Console.
            The built-in targets are <code>EC2 CreateSnapshot API call</code>, <code>EC2 RebootInstances
            API call</code>, <code>EC2 StopInstances API call</code>, and <code>EC2 TerminateInstances
            API call</code>. 
            </para>
             
            <para>
            For some target types, <code>PutTargets</code> provides target-specific parameters.
            If the target is a Kinesis data stream, you can optionally specify which shard the
            event goes to by using the <code>KinesisParameters</code> argument. To invoke a command
            on multiple EC2 instances with one rule, you can use the <code>RunCommandParameters</code>
            field.
            </para>
             
            <para>
            To be able to make API calls against the resources that you own, Amazon EventBridge
            needs the appropriate permissions. For AWS Lambda and Amazon SNS resources, EventBridge
            relies on resource-based policies. For EC2 instances, Kinesis data streams, and AWS
            Step Functions state machines, EventBridge relies on IAM roles that you specify in
            the <code>RoleARN</code> argument in <code>PutTargets</code>. For more information,
            see <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/auth-and-access-control-eventbridge.html">Authentication
            and Access Control</a> in the <i>Amazon EventBridge User Guide</i>.
            </para>
             
            <para>
            If another AWS account is in the same Region and has granted you permission (using
            <code>PutPermission</code>), you can send events to that account. Set that account's
            event bus as a target of the rules in your account. To send the matched events to
            the other account, specify that account's event bus as the <code>Arn</code> value
            when you run <code>PutTargets</code>. If your account sends events to another account,
            your account is charged for each sent event. Each event sent to another account is
            charged as a custom event. The account receiving the event isn't charged. For more
            information, see <a href="https://aws.amazon.com/eventbridge/pricing/">Amazon EventBridge
            Pricing</a>.
            </para>
             
            <para>
            If you're setting an event bus in another account as the target and that account granted
            permission to your account through an organization instead of directly by the account
            ID, you must specify a <code>RoleArn</code> with proper permissions in the <code>Target</code>
            structure. For more information, see <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eventbridge-cross-account-event-delivery.html">Sending
            and Receiving Events Between AWS Accounts</a> in the <i>Amazon EventBridge User Guide</i>.
            </para>
             
            <para>
            For more information about enabling cross-account events, see <a>PutPermission</a>.
            </para>
             
            <para>
             <code>Input</code>, <code>InputPath</code>, and <code>InputTransformer</code> are
            mutually exclusive and optional parameters of a target. When a rule is triggered due
            to a matched event:
            </para>
             <ul> <li> 
            <para>
            If none of the following arguments are specified for a target, the entire event is
            passed to the target in JSON format (unless the target is Amazon EC2 Run Command or
            Amazon ECS task, in which case nothing from the event is passed to the target).
            </para>
             </li> <li> 
            <para>
            If <code>Input</code> is specified in the form of valid JSON, then the matched event
            is overridden with this constant.
            </para>
             </li> <li> 
            <para>
            If <code>InputPath</code> is specified in the form of JSONPath (for example, <code>$.detail</code>),
            only the part of the event specified in the path is passed to the target (for example,
            only the detail part of the event is passed).
            </para>
             </li> <li> 
            <para>
            If <code>InputTransformer</code> is specified, one or more specified JSONPaths are
            extracted from the event and used as values in a template that you specify as the
            input to the target.
            </para>
             </li> </ul> 
            <para>
            When you specify <code>InputPath</code> or <code>InputTransformer</code>, you must
            use JSON dot notation, not bracket notation.
            </para>
             
            <para>
            When you add targets to a rule and the associated rule triggers soon after, new or
            updated targets might not be immediately invoked. Allow a short period of time for
            changes to take effect.
            </para>
             
            <para>
            This action can partially fail if too many requests are made at the same time. If
            that happens, <code>FailedEntryCount</code> is nonzero in the response, and each entry
            in <code>FailedEntries</code> provides the ID of the failed target and the error code.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the PutTargets service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the PutTargets service method, as returned by EventBridge.</returns>
            <exception cref="T:Amazon.EventBridge.Model.ConcurrentModificationException">
            There is concurrent modification on a resource.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.InternalException">
            This exception occurs due to unexpected causes.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.LimitExceededException">
            You tried to create more resources than is allowed.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.ManagedRuleException">
            An AWS service created this rule on behalf of your account. That service manages it.
            If you see this error in response to <code>DeleteRule</code> or <code>RemoveTargets</code>,
            you can use the <code>Force</code> parameter in those calls to delete the rule or
            remove targets from the rule. You can't modify these managed rules by using <code>DisableRule</code>,
            <code>EnableRule</code>, <code>PutTargets</code>, <code>PutRule</code>, <code>TagResource</code>,
            or <code>UntagResource</code>.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.ResourceNotFoundException">
            An entity that you specified doesn't exist.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/PutTargets">REST API Reference for PutTargets Operation</seealso>
        </member>
        <member name="M:Amazon.EventBridge.AmazonEventBridgeClient.RemovePermissionAsync(Amazon.EventBridge.Model.RemovePermissionRequest,System.Threading.CancellationToken)">
            <summary>
            Revokes the permission of another AWS account to be able to put events to the specified
            event bus. Specify the account to revoke by the <code>StatementId</code> value that
            you associated with the account when you granted it permission with <code>PutPermission</code>.
            You can find the <code>StatementId</code> by using <a>DescribeEventBus</a>.
            </summary>
            <param name="request">Container for the necessary parameters to execute the RemovePermission service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the RemovePermission service method, as returned by EventBridge.</returns>
            <exception cref="T:Amazon.EventBridge.Model.ConcurrentModificationException">
            There is concurrent modification on a resource.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.InternalException">
            This exception occurs due to unexpected causes.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.ResourceNotFoundException">
            An entity that you specified doesn't exist.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/RemovePermission">REST API Reference for RemovePermission Operation</seealso>
        </member>
        <member name="M:Amazon.EventBridge.AmazonEventBridgeClient.RemoveTargetsAsync(Amazon.EventBridge.Model.RemoveTargetsRequest,System.Threading.CancellationToken)">
            <summary>
            Removes the specified targets from the specified rule. When the rule is triggered,
            those targets are no longer be invoked.
            
             
            <para>
            When you remove a target, when the associated rule triggers, removed targets might
            continue to be invoked. Allow a short period of time for changes to take effect.
            </para>
             
            <para>
            This action can partially fail if too many requests are made at the same time. If
            that happens, <code>FailedEntryCount</code> is non-zero in the response and each entry
            in <code>FailedEntries</code> provides the ID of the failed target and the error code.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the RemoveTargets service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the RemoveTargets service method, as returned by EventBridge.</returns>
            <exception cref="T:Amazon.EventBridge.Model.ConcurrentModificationException">
            There is concurrent modification on a resource.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.InternalException">
            This exception occurs due to unexpected causes.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.ManagedRuleException">
            An AWS service created this rule on behalf of your account. That service manages it.
            If you see this error in response to <code>DeleteRule</code> or <code>RemoveTargets</code>,
            you can use the <code>Force</code> parameter in those calls to delete the rule or
            remove targets from the rule. You can't modify these managed rules by using <code>DisableRule</code>,
            <code>EnableRule</code>, <code>PutTargets</code>, <code>PutRule</code>, <code>TagResource</code>,
            or <code>UntagResource</code>.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.ResourceNotFoundException">
            An entity that you specified doesn't exist.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/RemoveTargets">REST API Reference for RemoveTargets Operation</seealso>
        </member>
        <member name="M:Amazon.EventBridge.AmazonEventBridgeClient.TagResourceAsync(Amazon.EventBridge.Model.TagResourceRequest,System.Threading.CancellationToken)">
            <summary>
            Assigns one or more tags (key-value pairs) to the specified EventBridge resource.
            Tags can help you organize and categorize your resources. You can also use them to
            scope user permissions by granting a user permission to access or change only resources
            with certain tag values. In EventBridge, rules can be tagged.
            
             
            <para>
            Tags don't have any semantic meaning to AWS and are interpreted strictly as strings
            of characters.
            </para>
             
            <para>
            You can use the <code>TagResource</code> action with a rule that already has tags.
            If you specify a new tag key for the rule, this tag is appended to the list of tags
            associated with the rule. If you specify a tag key that is already associated with
            the rule, the new tag value that you specify replaces the previous value for that
            tag.
            </para>
             
            <para>
            You can associate as many as 50 tags with a resource.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the TagResource service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the TagResource service method, as returned by EventBridge.</returns>
            <exception cref="T:Amazon.EventBridge.Model.ConcurrentModificationException">
            There is concurrent modification on a resource.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.InternalException">
            This exception occurs due to unexpected causes.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.ManagedRuleException">
            An AWS service created this rule on behalf of your account. That service manages it.
            If you see this error in response to <code>DeleteRule</code> or <code>RemoveTargets</code>,
            you can use the <code>Force</code> parameter in those calls to delete the rule or
            remove targets from the rule. You can't modify these managed rules by using <code>DisableRule</code>,
            <code>EnableRule</code>, <code>PutTargets</code>, <code>PutRule</code>, <code>TagResource</code>,
            or <code>UntagResource</code>.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.ResourceNotFoundException">
            An entity that you specified doesn't exist.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/TagResource">REST API Reference for TagResource Operation</seealso>
        </member>
        <member name="M:Amazon.EventBridge.AmazonEventBridgeClient.TestEventPatternAsync(Amazon.EventBridge.Model.TestEventPatternRequest,System.Threading.CancellationToken)">
            <summary>
            Tests whether the specified event pattern matches the provided event.
            
             
            <para>
            Most services in AWS treat <code>:</code> or <code>/</code> as the same character
            in Amazon Resource Names (ARNs). However, EventBridge uses an exact match in event
            patterns and rules. Be sure to use the correct ARN characters when creating event
            patterns so that they match the ARN syntax in the event that you want to match.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the TestEventPattern service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the TestEventPattern service method, as returned by EventBridge.</returns>
            <exception cref="T:Amazon.EventBridge.Model.InternalException">
            This exception occurs due to unexpected causes.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.InvalidEventPatternException">
            The event pattern isn't valid.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/TestEventPattern">REST API Reference for TestEventPattern Operation</seealso>
        </member>
        <member name="M:Amazon.EventBridge.AmazonEventBridgeClient.UntagResourceAsync(Amazon.EventBridge.Model.UntagResourceRequest,System.Threading.CancellationToken)">
            <summary>
            Removes one or more tags from the specified EventBridge resource. In EventBridge,
            rules can be tagged.
            </summary>
            <param name="request">Container for the necessary parameters to execute the UntagResource service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the UntagResource service method, as returned by EventBridge.</returns>
            <exception cref="T:Amazon.EventBridge.Model.ConcurrentModificationException">
            There is concurrent modification on a resource.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.InternalException">
            This exception occurs due to unexpected causes.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.ManagedRuleException">
            An AWS service created this rule on behalf of your account. That service manages it.
            If you see this error in response to <code>DeleteRule</code> or <code>RemoveTargets</code>,
            you can use the <code>Force</code> parameter in those calls to delete the rule or
            remove targets from the rule. You can't modify these managed rules by using <code>DisableRule</code>,
            <code>EnableRule</code>, <code>PutTargets</code>, <code>PutRule</code>, <code>TagResource</code>,
            or <code>UntagResource</code>.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.ResourceNotFoundException">
            An entity that you specified doesn't exist.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/UntagResource">REST API Reference for UntagResource Operation</seealso>
        </member>
        <member name="T:Amazon.EventBridge.IAmazonEventBridge">
             <summary>
             Interface for accessing EventBridge
            
             Amazon EventBridge helps you to respond to state changes in your AWS resources. When
             your resources change state, they automatically send events into an event stream.
             You can create rules that match selected events in the stream and route them to targets
             to take action. You can also use rules to take action on a predetermined schedule.
             For example, you can configure rules to:
             
              <ul> <li> 
             <para>
             Automatically invoke an AWS Lambda function to update DNS entries when an event notifies
             you that Amazon EC2 instance enters the running state
             </para>
              </li> <li> 
             <para>
             Direct specific API records from AWS CloudTrail to an Amazon Kinesis data stream for
             detailed analysis of potential security or availability risks
             </para>
              </li> <li> 
             <para>
             Periodically invoke a built-in target to create a snapshot of an Amazon EBS volume
             </para>
              </li> </ul> 
             <para>
             For more information about the features of Amazon EventBridge, see the <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/">Amazon
             EventBridge User Guide</a>.
             </para>
             </summary>
        </member>
        <member name="M:Amazon.EventBridge.IAmazonEventBridge.ActivateEventSourceAsync(Amazon.EventBridge.Model.ActivateEventSourceRequest,System.Threading.CancellationToken)">
            <summary>
            Activates a partner event source that has been deactivated. Once activated, your matching
            event bus will start receiving events from the event source.
            
             <note> 
            <para>
            This operation is performed by AWS customers, not by SaaS partners.
            </para>
             </note>
            </summary>
            <param name="request">Container for the necessary parameters to execute the ActivateEventSource service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the ActivateEventSource service method, as returned by EventBridge.</returns>
            <exception cref="T:Amazon.EventBridge.Model.InternalException">
            This exception occurs due to unexpected causes.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.InvalidStateException">
            The specified state isn't a valid state for an event source.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.ResourceNotFoundException">
            An entity that you specified doesn't exist.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/ActivateEventSource">REST API Reference for ActivateEventSource Operation</seealso>
        </member>
        <member name="M:Amazon.EventBridge.IAmazonEventBridge.CreateEventBusAsync(Amazon.EventBridge.Model.CreateEventBusRequest,System.Threading.CancellationToken)">
            <summary>
            Creates a new event bus within your account. This can be a custom event bus which
            you can use to receive events from your own custom applications and services, or it
            can be a partner event bus which can be matched to a partner event source.
            
             <note> 
            <para>
            This operation is used by AWS customers, not by SaaS partners.
            </para>
             </note>
            </summary>
            <param name="request">Container for the necessary parameters to execute the CreateEventBus service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the CreateEventBus service method, as returned by EventBridge.</returns>
            <exception cref="T:Amazon.EventBridge.Model.ConcurrentModificationException">
            There is concurrent modification on a resource.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.InternalException">
            This exception occurs due to unexpected causes.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.InvalidStateException">
            The specified state isn't a valid state for an event source.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.LimitExceededException">
            You tried to create more resources than is allowed.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.ResourceAlreadyExistsException">
            The resource that you're trying to create already exists.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.ResourceNotFoundException">
            An entity that you specified doesn't exist.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/CreateEventBus">REST API Reference for CreateEventBus Operation</seealso>
        </member>
        <member name="M:Amazon.EventBridge.IAmazonEventBridge.CreatePartnerEventSourceAsync(Amazon.EventBridge.Model.CreatePartnerEventSourceRequest,System.Threading.CancellationToken)">
            <summary>
            Called by an SaaS partner to create a partner event source.
            
             <note> 
            <para>
            This operation is not used by AWS customers.
            </para>
             </note> 
            <para>
            Each partner event source can be used by one AWS account to create a matching partner
            event bus in that AWS account. A SaaS partner must create one partner event source
            for each AWS account that wants to receive those event types. 
            </para>
             
            <para>
            A partner event source creates events based on resources in the SaaS partner's service
            or application.
            </para>
             
            <para>
            An AWS account that creates a partner event bus that matches the partner event source
            can use that event bus to receive events from the partner, and then process them using
            AWS Events rules and targets.
            </para>
             
            <para>
            Partner event source names follow this format:
            </para>
             
            <para>
             <code>aws.partner/<i>partner_name</i>/<i>event_namespace</i>/<i>event_name</i> </code>
            
            </para>
             <ul> <li> 
            <para>
             <i>partner_name</i> is determined during partner registration and identifies the
            partner to AWS customers.
            </para>
             </li> <li> 
            <para>
            For <i>event_namespace</i>, we recommend that partners use a string that identifies
            the AWS customer within the partner's system. This should not be the customer's AWS
            account ID.
            </para>
             </li> <li> 
            <para>
             <i>event_name</i> is determined by the partner, and should uniquely identify an event-generating
            resource within the partner system. This should help AWS customers decide whether
            to create an event bus to receive these events.
            </para>
             </li> </ul>
            </summary>
            <param name="request">Container for the necessary parameters to execute the CreatePartnerEventSource service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the CreatePartnerEventSource service method, as returned by EventBridge.</returns>
            <exception cref="T:Amazon.EventBridge.Model.ConcurrentModificationException">
            There is concurrent modification on a resource.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.InternalException">
            This exception occurs due to unexpected causes.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.LimitExceededException">
            You tried to create more resources than is allowed.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.ResourceAlreadyExistsException">
            The resource that you're trying to create already exists.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/CreatePartnerEventSource">REST API Reference for CreatePartnerEventSource Operation</seealso>
        </member>
        <member name="M:Amazon.EventBridge.IAmazonEventBridge.DeactivateEventSourceAsync(Amazon.EventBridge.Model.DeactivateEventSourceRequest,System.Threading.CancellationToken)">
            <summary>
            An AWS customer uses this operation to temporarily stop receiving events from the
            specified partner event source. The matching event bus isn't deleted. 
            
             
            <para>
            When you deactivate a partner event source, the source goes into <code>PENDING</code>
            state. If it remains in <code>PENDING</code> state for more than two weeks, it's deleted.
            </para>
             
            <para>
            To activate a deactivated partner event source, use <a>ActivateEventSource</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DeactivateEventSource service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DeactivateEventSource service method, as returned by EventBridge.</returns>
            <exception cref="T:Amazon.EventBridge.Model.InternalException">
            This exception occurs due to unexpected causes.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.InvalidStateException">
            The specified state isn't a valid state for an event source.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.ResourceNotFoundException">
            An entity that you specified doesn't exist.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/DeactivateEventSource">REST API Reference for DeactivateEventSource Operation</seealso>
        </member>
        <member name="M:Amazon.EventBridge.IAmazonEventBridge.DeleteEventBusAsync(Amazon.EventBridge.Model.DeleteEventBusRequest,System.Threading.CancellationToken)">
            <summary>
            Deletes the specified custom event bus or partner event bus. All rules associated
            with this event bus are also deleted. You can't delete your account's default event
            bus.
            
             <note> 
            <para>
            This operation is performed by AWS customers, not by SaaS partners.
            </para>
             </note>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DeleteEventBus service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DeleteEventBus service method, as returned by EventBridge.</returns>
            <exception cref="T:Amazon.EventBridge.Model.InternalException">
            This exception occurs due to unexpected causes.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/DeleteEventBus">REST API Reference for DeleteEventBus Operation</seealso>
        </member>
        <member name="M:Amazon.EventBridge.IAmazonEventBridge.DeletePartnerEventSourceAsync(Amazon.EventBridge.Model.DeletePartnerEventSourceRequest,System.Threading.CancellationToken)">
            <summary>
            This operation is used by SaaS partners to delete a partner event source. AWS customers
            don't use this operation.
            
             
            <para>
            When you delete an event source, the status of the corresponding partner event bus
            in the AWS customer account becomes <code>DELETED</code>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DeletePartnerEventSource service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DeletePartnerEventSource service method, as returned by EventBridge.</returns>
            <exception cref="T:Amazon.EventBridge.Model.InternalException">
            This exception occurs due to unexpected causes.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/DeletePartnerEventSource">REST API Reference for DeletePartnerEventSource Operation</seealso>
        </member>
        <member name="M:Amazon.EventBridge.IAmazonEventBridge.DeleteRuleAsync(Amazon.EventBridge.Model.DeleteRuleRequest,System.Threading.CancellationToken)">
            <summary>
            Deletes the specified rule.
            
             
            <para>
            Before you can delete the rule, you must remove all targets, using <a>RemoveTargets</a>.
            </para>
             
            <para>
            When you delete a rule, incoming events might continue to match to the deleted rule.
            Allow a short period of time for changes to take effect.
            </para>
             
            <para>
            Managed rules are rules created and managed by another AWS service on your behalf.
            These rules are created by those other AWS services to support functionality in those
            services. You can delete these rules using the <code>Force</code> option, but you
            should do so only if you're sure that the other service isn't still using that rule.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DeleteRule service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DeleteRule service method, as returned by EventBridge.</returns>
            <exception cref="T:Amazon.EventBridge.Model.ConcurrentModificationException">
            There is concurrent modification on a resource.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.InternalException">
            This exception occurs due to unexpected causes.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.ManagedRuleException">
            An AWS service created this rule on behalf of your account. That service manages it.
            If you see this error in response to <code>DeleteRule</code> or <code>RemoveTargets</code>,
            you can use the <code>Force</code> parameter in those calls to delete the rule or
            remove targets from the rule. You can't modify these managed rules by using <code>DisableRule</code>,
            <code>EnableRule</code>, <code>PutTargets</code>, <code>PutRule</code>, <code>TagResource</code>,
            or <code>UntagResource</code>.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.ResourceNotFoundException">
            An entity that you specified doesn't exist.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/DeleteRule">REST API Reference for DeleteRule Operation</seealso>
        </member>
        <member name="M:Amazon.EventBridge.IAmazonEventBridge.DescribeEventBusAsync(Amazon.EventBridge.Model.DescribeEventBusRequest,System.Threading.CancellationToken)">
            <summary>
            Displays details about an event bus in your account. This can include the external
            AWS accounts that are permitted to write events to your default event bus, and the
            associated policy. For custom event buses and partner event buses, it displays the
            name, ARN, policy, state, and creation time.
            
             
            <para>
             To enable your account to receive events from other accounts on its default event
            bus, use <a>PutPermission</a>.
            </para>
             
            <para>
            For more information about partner event buses, see <a>CreateEventBus</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DescribeEventBus service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DescribeEventBus service method, as returned by EventBridge.</returns>
            <exception cref="T:Amazon.EventBridge.Model.InternalException">
            This exception occurs due to unexpected causes.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.ResourceNotFoundException">
            An entity that you specified doesn't exist.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/DescribeEventBus">REST API Reference for DescribeEventBus Operation</seealso>
        </member>
        <member name="M:Amazon.EventBridge.IAmazonEventBridge.DescribeEventSourceAsync(Amazon.EventBridge.Model.DescribeEventSourceRequest,System.Threading.CancellationToken)">
            <summary>
            This operation lists details about a partner event source that is shared with your
            account.
            
             <note> 
            <para>
            This operation is run by AWS customers, not by SaaS partners.
            </para>
             </note>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DescribeEventSource service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DescribeEventSource service method, as returned by EventBridge.</returns>
            <exception cref="T:Amazon.EventBridge.Model.InternalException">
            This exception occurs due to unexpected causes.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.ResourceNotFoundException">
            An entity that you specified doesn't exist.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/DescribeEventSource">REST API Reference for DescribeEventSource Operation</seealso>
        </member>
        <member name="M:Amazon.EventBridge.IAmazonEventBridge.DescribePartnerEventSourceAsync(Amazon.EventBridge.Model.DescribePartnerEventSourceRequest,System.Threading.CancellationToken)">
            <summary>
            An SaaS partner can use this operation to list details about a partner event source
            that they have created.
            
             <note> 
            <para>
            AWS customers do not use this operation. Instead, AWS customers can use <a>DescribeEventSource</a>
            to see details about a partner event source that is shared with them.
            </para>
             </note>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DescribePartnerEventSource service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DescribePartnerEventSource service method, as returned by EventBridge.</returns>
            <exception cref="T:Amazon.EventBridge.Model.InternalException">
            This exception occurs due to unexpected causes.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.ResourceNotFoundException">
            An entity that you specified doesn't exist.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/DescribePartnerEventSource">REST API Reference for DescribePartnerEventSource Operation</seealso>
        </member>
        <member name="M:Amazon.EventBridge.IAmazonEventBridge.DescribeRuleAsync(Amazon.EventBridge.Model.DescribeRuleRequest,System.Threading.CancellationToken)">
            <summary>
            Describes the specified rule.
            
             
            <para>
             <code>DescribeRule</code> doesn't list the targets of a rule. To see the targets
            associated with a rule, use <a>ListTargetsByRule</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DescribeRule service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DescribeRule service method, as returned by EventBridge.</returns>
            <exception cref="T:Amazon.EventBridge.Model.InternalException">
            This exception occurs due to unexpected causes.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.ResourceNotFoundException">
            An entity that you specified doesn't exist.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/DescribeRule">REST API Reference for DescribeRule Operation</seealso>
        </member>
        <member name="M:Amazon.EventBridge.IAmazonEventBridge.DisableRuleAsync(Amazon.EventBridge.Model.DisableRuleRequest,System.Threading.CancellationToken)">
            <summary>
            Disables the specified rule. A disabled rule won't match any events and won't self-trigger
            if it has a schedule expression.
            
             
            <para>
            When you disable a rule, incoming events might continue to match to the disabled rule.
            Allow a short period of time for changes to take effect.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the DisableRule service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the DisableRule service method, as returned by EventBridge.</returns>
            <exception cref="T:Amazon.EventBridge.Model.ConcurrentModificationException">
            There is concurrent modification on a resource.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.InternalException">
            This exception occurs due to unexpected causes.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.ManagedRuleException">
            An AWS service created this rule on behalf of your account. That service manages it.
            If you see this error in response to <code>DeleteRule</code> or <code>RemoveTargets</code>,
            you can use the <code>Force</code> parameter in those calls to delete the rule or
            remove targets from the rule. You can't modify these managed rules by using <code>DisableRule</code>,
            <code>EnableRule</code>, <code>PutTargets</code>, <code>PutRule</code>, <code>TagResource</code>,
            or <code>UntagResource</code>.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.ResourceNotFoundException">
            An entity that you specified doesn't exist.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/DisableRule">REST API Reference for DisableRule Operation</seealso>
        </member>
        <member name="M:Amazon.EventBridge.IAmazonEventBridge.EnableRuleAsync(Amazon.EventBridge.Model.EnableRuleRequest,System.Threading.CancellationToken)">
            <summary>
            Enables the specified rule. If the rule doesn't exist, the operation fails.
            
             
            <para>
            When you enable a rule, incoming events might not immediately start matching to a
            newly enabled rule. Allow a short period of time for changes to take effect.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the EnableRule service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the EnableRule service method, as returned by EventBridge.</returns>
            <exception cref="T:Amazon.EventBridge.Model.ConcurrentModificationException">
            There is concurrent modification on a resource.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.InternalException">
            This exception occurs due to unexpected causes.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.ManagedRuleException">
            An AWS service created this rule on behalf of your account. That service manages it.
            If you see this error in response to <code>DeleteRule</code> or <code>RemoveTargets</code>,
            you can use the <code>Force</code> parameter in those calls to delete the rule or
            remove targets from the rule. You can't modify these managed rules by using <code>DisableRule</code>,
            <code>EnableRule</code>, <code>PutTargets</code>, <code>PutRule</code>, <code>TagResource</code>,
            or <code>UntagResource</code>.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.ResourceNotFoundException">
            An entity that you specified doesn't exist.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/EnableRule">REST API Reference for EnableRule Operation</seealso>
        </member>
        <member name="M:Amazon.EventBridge.IAmazonEventBridge.ListEventBusesAsync(Amazon.EventBridge.Model.ListEventBusesRequest,System.Threading.CancellationToken)">
            <summary>
            Lists all the event buses in your account, including the default event bus, custom
            event buses, and partner event buses.
            
             <note> 
            <para>
            This operation is run by AWS customers, not by SaaS partners.
            </para>
             </note>
            </summary>
            <param name="request">Container for the necessary parameters to execute the ListEventBuses service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the ListEventBuses service method, as returned by EventBridge.</returns>
            <exception cref="T:Amazon.EventBridge.Model.InternalException">
            This exception occurs due to unexpected causes.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/ListEventBuses">REST API Reference for ListEventBuses Operation</seealso>
        </member>
        <member name="M:Amazon.EventBridge.IAmazonEventBridge.ListEventSourcesAsync(Amazon.EventBridge.Model.ListEventSourcesRequest,System.Threading.CancellationToken)">
            <summary>
            You can use this to see all the partner event sources that have been shared with your
            AWS account. For more information about partner event sources, see <a>CreateEventBus</a>.
            
             <note> 
            <para>
            This operation is run by AWS customers, not by SaaS partners.
            </para>
             </note>
            </summary>
            <param name="request">Container for the necessary parameters to execute the ListEventSources service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the ListEventSources service method, as returned by EventBridge.</returns>
            <exception cref="T:Amazon.EventBridge.Model.InternalException">
            This exception occurs due to unexpected causes.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/ListEventSources">REST API Reference for ListEventSources Operation</seealso>
        </member>
        <member name="M:Amazon.EventBridge.IAmazonEventBridge.ListPartnerEventSourceAccountsAsync(Amazon.EventBridge.Model.ListPartnerEventSourceAccountsRequest,System.Threading.CancellationToken)">
            <summary>
            An SaaS partner can use this operation to display the AWS account ID that a particular
            partner event source name is associated with.
            
             <note> 
            <para>
            This operation is used by SaaS partners, not by AWS customers.
            </para>
             </note>
            </summary>
            <param name="request">Container for the necessary parameters to execute the ListPartnerEventSourceAccounts service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the ListPartnerEventSourceAccounts service method, as returned by EventBridge.</returns>
            <exception cref="T:Amazon.EventBridge.Model.InternalException">
            This exception occurs due to unexpected causes.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.ResourceNotFoundException">
            An entity that you specified doesn't exist.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/ListPartnerEventSourceAccounts">REST API Reference for ListPartnerEventSourceAccounts Operation</seealso>
        </member>
        <member name="M:Amazon.EventBridge.IAmazonEventBridge.ListPartnerEventSourcesAsync(Amazon.EventBridge.Model.ListPartnerEventSourcesRequest,System.Threading.CancellationToken)">
            <summary>
            An SaaS partner can use this operation to list all the partner event source names
            that they have created.
            
             <note> 
            <para>
            This operation is not used by AWS customers.
            </para>
             </note>
            </summary>
            <param name="request">Container for the necessary parameters to execute the ListPartnerEventSources service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the ListPartnerEventSources service method, as returned by EventBridge.</returns>
            <exception cref="T:Amazon.EventBridge.Model.InternalException">
            This exception occurs due to unexpected causes.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/ListPartnerEventSources">REST API Reference for ListPartnerEventSources Operation</seealso>
        </member>
        <member name="M:Amazon.EventBridge.IAmazonEventBridge.ListRuleNamesByTargetAsync(Amazon.EventBridge.Model.ListRuleNamesByTargetRequest,System.Threading.CancellationToken)">
            <summary>
            Lists the rules for the specified target. You can see which rules can invoke a specific
            target in your account.
            </summary>
            <param name="request">Container for the necessary parameters to execute the ListRuleNamesByTarget service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the ListRuleNamesByTarget service method, as returned by EventBridge.</returns>
            <exception cref="T:Amazon.EventBridge.Model.InternalException">
            This exception occurs due to unexpected causes.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.ResourceNotFoundException">
            An entity that you specified doesn't exist.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/ListRuleNamesByTarget">REST API Reference for ListRuleNamesByTarget Operation</seealso>
        </member>
        <member name="M:Amazon.EventBridge.IAmazonEventBridge.ListRulesAsync(Amazon.EventBridge.Model.ListRulesRequest,System.Threading.CancellationToken)">
            <summary>
            Lists your EventBridge rules. You can either list all the rules or provide a prefix
            to match to the rule names.
            
             
            <para>
             <code>ListRules</code> doesn't list the targets of a rule. To see the targets associated
            with a rule, use <a>ListTargetsByRule</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the ListRules service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the ListRules service method, as returned by EventBridge.</returns>
            <exception cref="T:Amazon.EventBridge.Model.InternalException">
            This exception occurs due to unexpected causes.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.ResourceNotFoundException">
            An entity that you specified doesn't exist.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/ListRules">REST API Reference for ListRules Operation</seealso>
        </member>
        <member name="M:Amazon.EventBridge.IAmazonEventBridge.ListTagsForResourceAsync(Amazon.EventBridge.Model.ListTagsForResourceRequest,System.Threading.CancellationToken)">
            <summary>
            Displays the tags associated with an EventBridge resource. In EventBridge, rules can
            be tagged.
            </summary>
            <param name="request">Container for the necessary parameters to execute the ListTagsForResource service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the ListTagsForResource service method, as returned by EventBridge.</returns>
            <exception cref="T:Amazon.EventBridge.Model.InternalException">
            This exception occurs due to unexpected causes.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.ResourceNotFoundException">
            An entity that you specified doesn't exist.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/ListTagsForResource">REST API Reference for ListTagsForResource Operation</seealso>
        </member>
        <member name="M:Amazon.EventBridge.IAmazonEventBridge.ListTargetsByRuleAsync(Amazon.EventBridge.Model.ListTargetsByRuleRequest,System.Threading.CancellationToken)">
            <summary>
            Lists the targets assigned to the specified rule.
            </summary>
            <param name="request">Container for the necessary parameters to execute the ListTargetsByRule service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the ListTargetsByRule service method, as returned by EventBridge.</returns>
            <exception cref="T:Amazon.EventBridge.Model.InternalException">
            This exception occurs due to unexpected causes.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.ResourceNotFoundException">
            An entity that you specified doesn't exist.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/ListTargetsByRule">REST API Reference for ListTargetsByRule Operation</seealso>
        </member>
        <member name="M:Amazon.EventBridge.IAmazonEventBridge.PutEventsAsync(Amazon.EventBridge.Model.PutEventsRequest,System.Threading.CancellationToken)">
            <summary>
            Sends custom events to EventBridge so that they can be matched to rules. These events
            can be from your custom applications and services.
            </summary>
            <param name="request">Container for the necessary parameters to execute the PutEvents service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the PutEvents service method, as returned by EventBridge.</returns>
            <exception cref="T:Amazon.EventBridge.Model.InternalException">
            This exception occurs due to unexpected causes.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/PutEvents">REST API Reference for PutEvents Operation</seealso>
        </member>
        <member name="M:Amazon.EventBridge.IAmazonEventBridge.PutPartnerEventsAsync(Amazon.EventBridge.Model.PutPartnerEventsRequest,System.Threading.CancellationToken)">
            <summary>
            This is used by SaaS partners to write events to a customer's partner event bus.
            
             <note> 
            <para>
            AWS customers do not use this operation. Instead, AWS customers can use <a>PutEvents</a>
            to write custom events from their own applications to an event bus.
            </para>
             </note>
            </summary>
            <param name="request">Container for the necessary parameters to execute the PutPartnerEvents service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the PutPartnerEvents service method, as returned by EventBridge.</returns>
            <exception cref="T:Amazon.EventBridge.Model.InternalException">
            This exception occurs due to unexpected causes.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/PutPartnerEvents">REST API Reference for PutPartnerEvents Operation</seealso>
        </member>
        <member name="M:Amazon.EventBridge.IAmazonEventBridge.PutPermissionAsync(Amazon.EventBridge.Model.PutPermissionRequest,System.Threading.CancellationToken)">
            <summary>
            Running <code>PutPermission</code> permits the specified AWS account or AWS organization
            to put events to the specified <i>event bus</i>. Rules in your account are triggered
            by these events arriving to an event bus in your account. 
            
             
            <para>
            For another account to send events to your account, that external account must have
            a rule with your account's event bus as a target.
            </para>
             
            <para>
            To enable multiple AWS accounts to put events to an event bus, run <code>PutPermission</code>
            once for each of these accounts. Or, if all the accounts are members of the same AWS
            organization, you can run <code>PutPermission</code> once specifying <code>Principal</code>
            as "*" and specifying the AWS organization ID in <code>Condition</code>, to grant
            permissions to all accounts in that organization.
            </para>
             
            <para>
            If you grant permissions using an organization, then accounts in that organization
            must specify a <code>RoleArn</code> with proper permissions when they use <code>PutTarget</code>
            to add your account's event bus as a target. For more information, see <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eventbridge-cross-account-event-delivery.html">Sending
            and Receiving Events Between AWS Accounts</a> in the <i>Amazon EventBridge User Guide</i>.
            </para>
             
            <para>
            The permission policy on an event bus can't exceed 10 KB in size.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the PutPermission service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the PutPermission service method, as returned by EventBridge.</returns>
            <exception cref="T:Amazon.EventBridge.Model.ConcurrentModificationException">
            There is concurrent modification on a resource.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.InternalException">
            This exception occurs due to unexpected causes.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.PolicyLengthExceededException">
            The event bus policy is too long. For more information, see the limits.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.ResourceNotFoundException">
            An entity that you specified doesn't exist.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/PutPermission">REST API Reference for PutPermission Operation</seealso>
        </member>
        <member name="M:Amazon.EventBridge.IAmazonEventBridge.PutRuleAsync(Amazon.EventBridge.Model.PutRuleRequest,System.Threading.CancellationToken)">
            <summary>
            Creates or updates the specified rule. Rules are enabled by default or based on value
            of the state. You can disable a rule using <a>DisableRule</a>.
            
             
            <para>
            A single rule watches for events from a single event bus. Events generated by AWS
            services go to your account's default event bus. Events generated by SaaS partner
            services or applications go to the matching partner event bus. If you have custom
            applications or services, you can specify whether their events go to your default
            event bus or a custom event bus that you have created. For more information, see <a>CreateEventBus</a>.
            </para>
             
            <para>
            If you're updating an existing rule, the rule is replaced with what you specify in
            this <code>PutRule</code> command. If you omit arguments in <code>PutRule</code>,
            the old values for those arguments aren't kept. Instead, they're replaced with null
            values.
            </para>
             
            <para>
            When you create or update a rule, incoming events might not immediately start matching
            to new or updated rules. Allow a short period of time for changes to take effect.
            </para>
             
            <para>
            A rule must contain at least an <code>EventPattern</code> or <code>ScheduleExpression</code>.
            Rules with <code>EventPatterns</code> are triggered when a matching event is observed.
            Rules with <code>ScheduleExpressions</code> self-trigger based on the given schedule.
            A rule can have both an <code>EventPattern</code> and a <code>ScheduleExpression</code>,
            in which case the rule triggers on matching events as well as on a schedule.
            </para>
             
            <para>
            When you initially create a rule, you can optionally assign one or more tags to the
            rule. Tags can help you organize and categorize your resources. You can also use them
            to scope user permissions, by granting a user permission to access or change only
            rules with certain tag values. To use the <code>PutRule</code> operation and assign
            tags, you must have both the <code>events:PutRule</code> and <code>events:TagResource</code>
            permissions.
            </para>
             
            <para>
            If you are updating an existing rule, any tags you specify in the <code>PutRule</code>
            operation are ignored. To update the tags of an existing rule, use <a>TagResource</a>
            and <a>UntagResource</a>.
            </para>
             
            <para>
            Most services in AWS treat <code>:</code> or <code>/</code> as the same character
            in Amazon Resource Names (ARNs). However, EventBridge uses an exact match in event
            patterns and rules. Be sure to use the correct ARN characters when creating event
            patterns so that they match the ARN syntax in the event that you want to match.
            </para>
             
            <para>
            In EventBridge, you could create rules that lead to infinite loops, where a rule is
            fired repeatedly. For example, a rule might detect that ACLs have changed on an S3
            bucket, and trigger software to change them to the desired state. If you don't write
            the rule carefully, the subsequent change to the ACLs fires the rule again, creating
            an infinite loop.
            </para>
             
            <para>
            To prevent this, write the rules so that the triggered actions don't refire the same
            rule. For example, your rule could fire only if ACLs are found to be in a bad state,
            instead of after any change. 
            </para>
             
            <para>
            An infinite loop can quickly cause higher than expected charges. We recommend that
            you use budgeting, which alerts you when charges exceed your specified limit. For
            more information, see <a href="https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/budgets-managing-costs.html">Managing
            Your Costs with Budgets</a>.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the PutRule service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the PutRule service method, as returned by EventBridge.</returns>
            <exception cref="T:Amazon.EventBridge.Model.ConcurrentModificationException">
            There is concurrent modification on a resource.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.InternalException">
            This exception occurs due to unexpected causes.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.InvalidEventPatternException">
            The event pattern isn't valid.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.LimitExceededException">
            You tried to create more resources than is allowed.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.ManagedRuleException">
            An AWS service created this rule on behalf of your account. That service manages it.
            If you see this error in response to <code>DeleteRule</code> or <code>RemoveTargets</code>,
            you can use the <code>Force</code> parameter in those calls to delete the rule or
            remove targets from the rule. You can't modify these managed rules by using <code>DisableRule</code>,
            <code>EnableRule</code>, <code>PutTargets</code>, <code>PutRule</code>, <code>TagResource</code>,
            or <code>UntagResource</code>.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.ResourceNotFoundException">
            An entity that you specified doesn't exist.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/PutRule">REST API Reference for PutRule Operation</seealso>
        </member>
        <member name="M:Amazon.EventBridge.IAmazonEventBridge.PutTargetsAsync(Amazon.EventBridge.Model.PutTargetsRequest,System.Threading.CancellationToken)">
            <summary>
            Adds the specified targets to the specified rule, or updates the targets if they're
            already associated with the rule.
            
             
            <para>
            Targets are the resources that are invoked when a rule is triggered.
            </para>
             
            <para>
            You can configure the following as targets in EventBridge:
            </para>
             <ul> <li> 
            <para>
            EC2 instances
            </para>
             </li> <li> 
            <para>
            SSM Run Command
            </para>
             </li> <li> 
            <para>
            SSM Automation
            </para>
             </li> <li> 
            <para>
            AWS Lambda functions
            </para>
             </li> <li> 
            <para>
            Data streams in Amazon Kinesis Data Streams
            </para>
             </li> <li> 
            <para>
            Data delivery streams in Amazon Kinesis Data Firehose
            </para>
             </li> <li> 
            <para>
            Amazon ECS tasks
            </para>
             </li> <li> 
            <para>
            AWS Step Functions state machines
            </para>
             </li> <li> 
            <para>
            AWS Batch jobs
            </para>
             </li> <li> 
            <para>
            AWS CodeBuild projects
            </para>
             </li> <li> 
            <para>
            Pipelines in AWS CodePipeline
            </para>
             </li> <li> 
            <para>
            Amazon Inspector assessment templates
            </para>
             </li> <li> 
            <para>
            Amazon SNS topics
            </para>
             </li> <li> 
            <para>
            Amazon SQS queues, including FIFO queues
            </para>
             </li> <li> 
            <para>
            The default event bus of another AWS account
            </para>
             </li> </ul> 
            <para>
            Creating rules with built-in targets is supported only on the AWS Management Console.
            The built-in targets are <code>EC2 CreateSnapshot API call</code>, <code>EC2 RebootInstances
            API call</code>, <code>EC2 StopInstances API call</code>, and <code>EC2 TerminateInstances
            API call</code>. 
            </para>
             
            <para>
            For some target types, <code>PutTargets</code> provides target-specific parameters.
            If the target is a Kinesis data stream, you can optionally specify which shard the
            event goes to by using the <code>KinesisParameters</code> argument. To invoke a command
            on multiple EC2 instances with one rule, you can use the <code>RunCommandParameters</code>
            field.
            </para>
             
            <para>
            To be able to make API calls against the resources that you own, Amazon EventBridge
            needs the appropriate permissions. For AWS Lambda and Amazon SNS resources, EventBridge
            relies on resource-based policies. For EC2 instances, Kinesis data streams, and AWS
            Step Functions state machines, EventBridge relies on IAM roles that you specify in
            the <code>RoleARN</code> argument in <code>PutTargets</code>. For more information,
            see <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/auth-and-access-control-eventbridge.html">Authentication
            and Access Control</a> in the <i>Amazon EventBridge User Guide</i>.
            </para>
             
            <para>
            If another AWS account is in the same Region and has granted you permission (using
            <code>PutPermission</code>), you can send events to that account. Set that account's
            event bus as a target of the rules in your account. To send the matched events to
            the other account, specify that account's event bus as the <code>Arn</code> value
            when you run <code>PutTargets</code>. If your account sends events to another account,
            your account is charged for each sent event. Each event sent to another account is
            charged as a custom event. The account receiving the event isn't charged. For more
            information, see <a href="https://aws.amazon.com/eventbridge/pricing/">Amazon EventBridge
            Pricing</a>.
            </para>
             
            <para>
            If you're setting an event bus in another account as the target and that account granted
            permission to your account through an organization instead of directly by the account
            ID, you must specify a <code>RoleArn</code> with proper permissions in the <code>Target</code>
            structure. For more information, see <a href="https://docs.aws.amazon.com/eventbridge/latest/userguide/eventbridge-cross-account-event-delivery.html">Sending
            and Receiving Events Between AWS Accounts</a> in the <i>Amazon EventBridge User Guide</i>.
            </para>
             
            <para>
            For more information about enabling cross-account events, see <a>PutPermission</a>.
            </para>
             
            <para>
             <code>Input</code>, <code>InputPath</code>, and <code>InputTransformer</code> are
            mutually exclusive and optional parameters of a target. When a rule is triggered due
            to a matched event:
            </para>
             <ul> <li> 
            <para>
            If none of the following arguments are specified for a target, the entire event is
            passed to the target in JSON format (unless the target is Amazon EC2 Run Command or
            Amazon ECS task, in which case nothing from the event is passed to the target).
            </para>
             </li> <li> 
            <para>
            If <code>Input</code> is specified in the form of valid JSON, then the matched event
            is overridden with this constant.
            </para>
             </li> <li> 
            <para>
            If <code>InputPath</code> is specified in the form of JSONPath (for example, <code>$.detail</code>),
            only the part of the event specified in the path is passed to the target (for example,
            only the detail part of the event is passed).
            </para>
             </li> <li> 
            <para>
            If <code>InputTransformer</code> is specified, one or more specified JSONPaths are
            extracted from the event and used as values in a template that you specify as the
            input to the target.
            </para>
             </li> </ul> 
            <para>
            When you specify <code>InputPath</code> or <code>InputTransformer</code>, you must
            use JSON dot notation, not bracket notation.
            </para>
             
            <para>
            When you add targets to a rule and the associated rule triggers soon after, new or
            updated targets might not be immediately invoked. Allow a short period of time for
            changes to take effect.
            </para>
             
            <para>
            This action can partially fail if too many requests are made at the same time. If
            that happens, <code>FailedEntryCount</code> is nonzero in the response, and each entry
            in <code>FailedEntries</code> provides the ID of the failed target and the error code.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the PutTargets service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the PutTargets service method, as returned by EventBridge.</returns>
            <exception cref="T:Amazon.EventBridge.Model.ConcurrentModificationException">
            There is concurrent modification on a resource.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.InternalException">
            This exception occurs due to unexpected causes.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.LimitExceededException">
            You tried to create more resources than is allowed.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.ManagedRuleException">
            An AWS service created this rule on behalf of your account. That service manages it.
            If you see this error in response to <code>DeleteRule</code> or <code>RemoveTargets</code>,
            you can use the <code>Force</code> parameter in those calls to delete the rule or
            remove targets from the rule. You can't modify these managed rules by using <code>DisableRule</code>,
            <code>EnableRule</code>, <code>PutTargets</code>, <code>PutRule</code>, <code>TagResource</code>,
            or <code>UntagResource</code>.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.ResourceNotFoundException">
            An entity that you specified doesn't exist.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/PutTargets">REST API Reference for PutTargets Operation</seealso>
        </member>
        <member name="M:Amazon.EventBridge.IAmazonEventBridge.RemovePermissionAsync(Amazon.EventBridge.Model.RemovePermissionRequest,System.Threading.CancellationToken)">
            <summary>
            Revokes the permission of another AWS account to be able to put events to the specified
            event bus. Specify the account to revoke by the <code>StatementId</code> value that
            you associated with the account when you granted it permission with <code>PutPermission</code>.
            You can find the <code>StatementId</code> by using <a>DescribeEventBus</a>.
            </summary>
            <param name="request">Container for the necessary parameters to execute the RemovePermission service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the RemovePermission service method, as returned by EventBridge.</returns>
            <exception cref="T:Amazon.EventBridge.Model.ConcurrentModificationException">
            There is concurrent modification on a resource.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.InternalException">
            This exception occurs due to unexpected causes.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.ResourceNotFoundException">
            An entity that you specified doesn't exist.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/RemovePermission">REST API Reference for RemovePermission Operation</seealso>
        </member>
        <member name="M:Amazon.EventBridge.IAmazonEventBridge.RemoveTargetsAsync(Amazon.EventBridge.Model.RemoveTargetsRequest,System.Threading.CancellationToken)">
            <summary>
            Removes the specified targets from the specified rule. When the rule is triggered,
            those targets are no longer be invoked.
            
             
            <para>
            When you remove a target, when the associated rule triggers, removed targets might
            continue to be invoked. Allow a short period of time for changes to take effect.
            </para>
             
            <para>
            This action can partially fail if too many requests are made at the same time. If
            that happens, <code>FailedEntryCount</code> is non-zero in the response and each entry
            in <code>FailedEntries</code> provides the ID of the failed target and the error code.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the RemoveTargets service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the RemoveTargets service method, as returned by EventBridge.</returns>
            <exception cref="T:Amazon.EventBridge.Model.ConcurrentModificationException">
            There is concurrent modification on a resource.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.InternalException">
            This exception occurs due to unexpected causes.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.ManagedRuleException">
            An AWS service created this rule on behalf of your account. That service manages it.
            If you see this error in response to <code>DeleteRule</code> or <code>RemoveTargets</code>,
            you can use the <code>Force</code> parameter in those calls to delete the rule or
            remove targets from the rule. You can't modify these managed rules by using <code>DisableRule</code>,
            <code>EnableRule</code>, <code>PutTargets</code>, <code>PutRule</code>, <code>TagResource</code>,
            or <code>UntagResource</code>.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.ResourceNotFoundException">
            An entity that you specified doesn't exist.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/RemoveTargets">REST API Reference for RemoveTargets Operation</seealso>
        </member>
        <member name="M:Amazon.EventBridge.IAmazonEventBridge.TagResourceAsync(Amazon.EventBridge.Model.TagResourceRequest,System.Threading.CancellationToken)">
            <summary>
            Assigns one or more tags (key-value pairs) to the specified EventBridge resource.
            Tags can help you organize and categorize your resources. You can also use them to
            scope user permissions by granting a user permission to access or change only resources
            with certain tag values. In EventBridge, rules can be tagged.
            
             
            <para>
            Tags don't have any semantic meaning to AWS and are interpreted strictly as strings
            of characters.
            </para>
             
            <para>
            You can use the <code>TagResource</code> action with a rule that already has tags.
            If you specify a new tag key for the rule, this tag is appended to the list of tags
            associated with the rule. If you specify a tag key that is already associated with
            the rule, the new tag value that you specify replaces the previous value for that
            tag.
            </para>
             
            <para>
            You can associate as many as 50 tags with a resource.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the TagResource service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the TagResource service method, as returned by EventBridge.</returns>
            <exception cref="T:Amazon.EventBridge.Model.ConcurrentModificationException">
            There is concurrent modification on a resource.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.InternalException">
            This exception occurs due to unexpected causes.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.ManagedRuleException">
            An AWS service created this rule on behalf of your account. That service manages it.
            If you see this error in response to <code>DeleteRule</code> or <code>RemoveTargets</code>,
            you can use the <code>Force</code> parameter in those calls to delete the rule or
            remove targets from the rule. You can't modify these managed rules by using <code>DisableRule</code>,
            <code>EnableRule</code>, <code>PutTargets</code>, <code>PutRule</code>, <code>TagResource</code>,
            or <code>UntagResource</code>.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.ResourceNotFoundException">
            An entity that you specified doesn't exist.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/TagResource">REST API Reference for TagResource Operation</seealso>
        </member>
        <member name="M:Amazon.EventBridge.IAmazonEventBridge.TestEventPatternAsync(Amazon.EventBridge.Model.TestEventPatternRequest,System.Threading.CancellationToken)">
            <summary>
            Tests whether the specified event pattern matches the provided event.
            
             
            <para>
            Most services in AWS treat <code>:</code> or <code>/</code> as the same character
            in Amazon Resource Names (ARNs). However, EventBridge uses an exact match in event
            patterns and rules. Be sure to use the correct ARN characters when creating event
            patterns so that they match the ARN syntax in the event that you want to match.
            </para>
            </summary>
            <param name="request">Container for the necessary parameters to execute the TestEventPattern service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the TestEventPattern service method, as returned by EventBridge.</returns>
            <exception cref="T:Amazon.EventBridge.Model.InternalException">
            This exception occurs due to unexpected causes.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.InvalidEventPatternException">
            The event pattern isn't valid.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/TestEventPattern">REST API Reference for TestEventPattern Operation</seealso>
        </member>
        <member name="M:Amazon.EventBridge.IAmazonEventBridge.UntagResourceAsync(Amazon.EventBridge.Model.UntagResourceRequest,System.Threading.CancellationToken)">
            <summary>
            Removes one or more tags from the specified EventBridge resource. In EventBridge,
            rules can be tagged.
            </summary>
            <param name="request">Container for the necessary parameters to execute the UntagResource service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the UntagResource service method, as returned by EventBridge.</returns>
            <exception cref="T:Amazon.EventBridge.Model.ConcurrentModificationException">
            There is concurrent modification on a resource.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.InternalException">
            This exception occurs due to unexpected causes.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.ManagedRuleException">
            An AWS service created this rule on behalf of your account. That service manages it.
            If you see this error in response to <code>DeleteRule</code> or <code>RemoveTargets</code>,
            you can use the <code>Force</code> parameter in those calls to delete the rule or
            remove targets from the rule. You can't modify these managed rules by using <code>DisableRule</code>,
            <code>EnableRule</code>, <code>PutTargets</code>, <code>PutRule</code>, <code>TagResource</code>,
            or <code>UntagResource</code>.
            </exception>
            <exception cref="T:Amazon.EventBridge.Model.ResourceNotFoundException">
            An entity that you specified doesn't exist.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/eventbridge-2015-10-07/UntagResource">REST API Reference for UntagResource Operation</seealso>
        </member>
    </members>
</doc>
