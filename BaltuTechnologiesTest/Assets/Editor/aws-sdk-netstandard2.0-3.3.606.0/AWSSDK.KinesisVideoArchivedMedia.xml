<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AWSSDK.KinesisVideoArchivedMedia</name>
    </assembly>
    <members>
        <member name="T:Amazon.KinesisVideoArchivedMedia.AmazonKinesisVideoArchivedMediaClient">
             <summary>
             Implementation for accessing KinesisVideoArchivedMedia
            
             
             </summary>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.AmazonKinesisVideoArchivedMediaClient.#ctor(System.String)">
             <summary>
             Constructs AmazonKinesisVideoArchivedMediaClient with the credentials loaded from the application's
             default configuration, and if unsuccessful from the Instance Profile service on an EC2 instance.
             
             Example App.config with credentials set. 
             <code>
             &lt;?xml version="1.0" encoding="utf-8" ?&gt;
             &lt;configuration&gt;
                 &lt;appSettings&gt;
                     &lt;add key="AWSProfileName" value="AWS Default"/&gt;
                 &lt;/appSettings&gt;
             &lt;/configuration&gt;
             </code>
            
             </summary>
             <param name="serviceUrl">The URL of the search or document service.</param>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.AmazonKinesisVideoArchivedMediaClient.#ctor(Amazon.KinesisVideoArchivedMedia.AmazonKinesisVideoArchivedMediaConfig)">
             <summary>
             Constructs AmazonKinesisVideoArchivedMediaClient with the credentials loaded from the application's
             default configuration, and if unsuccessful from the Instance Profile service on an EC2 instance.
             
             Example App.config with credentials set. 
             <code>
             &lt;?xml version="1.0" encoding="utf-8" ?&gt;
             &lt;configuration&gt;
                 &lt;appSettings&gt;
                     &lt;add key="AWSProfileName" value="AWS Default"/&gt;
                 &lt;/appSettings&gt;
             &lt;/configuration&gt;
             </code>
            
             </summary>
             <param name="config">The AmazonKinesisVideoArchivedMediaClient Configuration Object</param>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.AmazonKinesisVideoArchivedMediaClient.#ctor(System.String,Amazon.Runtime.AWSCredentials)">
            <summary>
            Constructs AmazonKinesisVideoArchivedMediaClient with AWS Credentials
            </summary>
            <param name="serviceUrl">The URL of the search or document service.</param>
            <param name="credentials">AWS Credentials</param>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.AmazonKinesisVideoArchivedMediaClient.#ctor(Amazon.Runtime.AWSCredentials,Amazon.KinesisVideoArchivedMedia.AmazonKinesisVideoArchivedMediaConfig)">
            <summary>
            Constructs AmazonKinesisVideoArchivedMediaClient with AWS Credentials and an
            AmazonKinesisVideoArchivedMediaClient Configuration object.
            </summary>
            <param name="credentials">AWS Credentials</param>
            <param name="clientConfig">The AmazonKinesisVideoArchivedMediaClient Configuration Object</param>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.AmazonKinesisVideoArchivedMediaClient.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructs AmazonKinesisVideoArchivedMediaClient with AWS Access Key ID and AWS Secret Key
            </summary>
            <param name="awsAccessKeyId">AWS Access Key ID</param>
            <param name="awsSecretAccessKey">AWS Secret Access Key</param>
            <param name="serviceUrl">The URL of the search or document service.</param>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.AmazonKinesisVideoArchivedMediaClient.#ctor(System.String,System.String,Amazon.KinesisVideoArchivedMedia.AmazonKinesisVideoArchivedMediaConfig)">
            <summary>
            Constructs AmazonKinesisVideoArchivedMediaClient with AWS Access Key ID, AWS Secret Key and an
            AmazonKinesisVideoArchivedMediaClient Configuration object. 
            </summary>
            <param name="awsAccessKeyId">AWS Access Key ID</param>
            <param name="awsSecretAccessKey">AWS Secret Access Key</param>
            <param name="clientConfig">The AmazonKinesisVideoArchivedMediaClient Configuration Object</param>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.AmazonKinesisVideoArchivedMediaClient.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Constructs AmazonKinesisVideoArchivedMediaClient with AWS Access Key ID and AWS Secret Key
            </summary>
            <param name="awsAccessKeyId">AWS Access Key ID</param>
            <param name="awsSecretAccessKey">AWS Secret Access Key</param>
            <param name="awsSessionToken">AWS Session Token</param>
            <param name="serviceUrl">The URL of the search or document service.</param>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.AmazonKinesisVideoArchivedMediaClient.#ctor(System.String,System.String,System.String,Amazon.KinesisVideoArchivedMedia.AmazonKinesisVideoArchivedMediaConfig)">
            <summary>
            Constructs AmazonKinesisVideoArchivedMediaClient with AWS Access Key ID, AWS Secret Key and an
            AmazonKinesisVideoArchivedMediaClient Configuration object. 
            </summary>
            <param name="awsAccessKeyId">AWS Access Key ID</param>
            <param name="awsSecretAccessKey">AWS Secret Access Key</param>
            <param name="awsSessionToken">AWS Session Token</param>
            <param name="clientConfig">The AmazonKinesisVideoArchivedMediaClient Configuration Object</param>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.AmazonKinesisVideoArchivedMediaClient.CreateSigner">
            <summary>
            Creates the signer for the service.
            </summary>
        </member>
        <member name="P:Amazon.KinesisVideoArchivedMedia.AmazonKinesisVideoArchivedMediaClient.ServiceMetadata">
            <summary>
            Capture metadata for the service.
            </summary>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.AmazonKinesisVideoArchivedMediaClient.Dispose(System.Boolean)">
            <summary>
            Disposes the service client.
            </summary>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.AmazonKinesisVideoArchivedMediaClient.GetDASHStreamingSessionURLAsync(Amazon.KinesisVideoArchivedMedia.Model.GetDASHStreamingSessionURLRequest,System.Threading.CancellationToken)">
            <summary>
            Retrieves an MPEG Dynamic Adaptive Streaming over HTTP (DASH) URL for the stream.
            You can then open the URL in a media player to view the stream contents.
            
             
            <para>
            Both the <code>StreamName</code> and the <code>StreamARN</code> parameters are optional,
            but you must specify either the <code>StreamName</code> or the <code>StreamARN</code>
            when invoking this API operation.
            </para>
             
            <para>
            An Amazon Kinesis video stream has the following requirements for providing data through
            MPEG-DASH:
            </para>
             <ul> <li> 
            <para>
            The media must contain h.264 or h.265 encoded video and, optionally, AAC or G.711
            encoded audio. Specifically, the codec id of track 1 should be <code>V_MPEG/ISO/AVC</code>
            (for h.264) or V_MPEGH/ISO/HEVC (for H.265). Optionally, the codec id of track 2 should
            be <code>A_AAC</code> (for AAC) or A_MS/ACM (for G.711).
            </para>
             </li> <li> 
            <para>
            Data retention must be greater than 0.
            </para>
             </li> <li> 
            <para>
            The video track of each fragment must contain codec private data in the Advanced Video
            Coding (AVC) for H.264 format and HEVC for H.265 format. For more information, see
            <a href="https://www.iso.org/standard/55980.html">MPEG-4 specification ISO/IEC 14496-15</a>.
            For information about adapting stream data to a given format, see <a href="http://docs.aws.amazon.com/kinesisvideostreams/latest/dg/producer-reference-nal.html">NAL
            Adaptation Flags</a>.
            </para>
             </li> <li> 
            <para>
            The audio track (if present) of each fragment must contain codec private data in the
            AAC format (<a href="https://www.iso.org/standard/43345.html">AAC specification ISO/IEC
            13818-7</a>) or the <a href="http://www-mmsp.ece.mcgill.ca/Documents/AudioFormats/WAVE/WAVE.html">MS
            Wave format</a>.
            </para>
             </li> </ul> 
            <para>
            The following procedure shows how to use MPEG-DASH with Kinesis Video Streams:
            </para>
             <ol> <li> 
            <para>
            Get an endpoint using <a href="http://docs.aws.amazon.com/kinesisvideostreams/latest/dg/API_GetDataEndpoint.html">GetDataEndpoint</a>,
            specifying <code>GET_DASH_STREAMING_SESSION_URL</code> for the <code>APIName</code>
            parameter.
            </para>
             </li> <li> 
            <para>
            Retrieve the MPEG-DASH URL using <code>GetDASHStreamingSessionURL</code>. Kinesis
            Video Streams creates an MPEG-DASH streaming session to be used for accessing content
            in a stream using the MPEG-DASH protocol. <code>GetDASHStreamingSessionURL</code>
            returns an authenticated URL (that includes an encrypted session token) for the session's
            MPEG-DASH <i>manifest</i> (the root resource needed for streaming with MPEG-DASH).
            </para>
             <note> 
            <para>
            Don't share or store this token where an unauthorized entity could access it. The
            token provides access to the content of the stream. Safeguard the token with the same
            measures that you would use with your AWS credentials.
            </para>
             </note> 
            <para>
            The media that is made available through the manifest consists only of the requested
            stream, time range, and format. No other media data (such as frames outside the requested
            window or alternate bitrates) is made available.
            </para>
             </li> <li> 
            <para>
            Provide the URL (containing the encrypted session token) for the MPEG-DASH manifest
            to a media player that supports the MPEG-DASH protocol. Kinesis Video Streams makes
            the initialization fragment, and media fragments available through the manifest URL.
            The initialization fragment contains the codec private data for the stream, and other
            data needed to set up the video or audio decoder and renderer. The media fragments
            contain encoded video frames or encoded audio samples.
            </para>
             </li> <li> 
            <para>
            The media player receives the authenticated URL and requests stream metadata and media
            data normally. When the media player requests data, it calls the following actions:
            </para>
             <ul> <li> 
            <para>
             <b>GetDASHManifest:</b> Retrieves an MPEG DASH manifest, which contains the metadata
            for the media that you want to playback.
            </para>
             </li> <li> 
            <para>
             <b>GetMP4InitFragment:</b> Retrieves the MP4 initialization fragment. The media player
            typically loads the initialization fragment before loading any media fragments. This
            fragment contains the "<code>fytp</code>" and "<code>moov</code>" MP4 atoms, and the
            child atoms that are needed to initialize the media player decoder.
            </para>
             
            <para>
            The initialization fragment does not correspond to a fragment in a Kinesis video stream.
            It contains only the codec private data for the stream and respective track, which
            the media player needs to decode the media frames.
            </para>
             </li> <li> 
            <para>
             <b>GetMP4MediaFragment:</b> Retrieves MP4 media fragments. These fragments contain
            the "<code>moof</code>" and "<code>mdat</code>" MP4 atoms and their child atoms, containing
            the encoded fragment's media frames and their timestamps. 
            </para>
             <note> 
            <para>
            After the first media fragment is made available in a streaming session, any fragments
            that don't contain the same codec private data cause an error to be returned when
            those different media fragments are loaded. Therefore, the codec private data should
            not change between fragments in a session. This also means that the session fails
            if the fragments in a stream change from having only video to having both audio and
            video.
            </para>
             </note> 
            <para>
            Data retrieved with this action is billable. See <a href="https://aws.amazon.com/kinesis/video-streams/pricing/">Pricing</a>
            for details.
            </para>
             </li> </ul> </li> </ol> <note> 
            <para>
            The following restrictions apply to MPEG-DASH sessions:
            </para>
             <ul> <li> 
            <para>
            A streaming session URL should not be shared between players. The service might throttle
            a session if multiple media players are sharing it. For connection limits, see <a
            href="http://docs.aws.amazon.com/kinesisvideostreams/latest/dg/limits.html">Kinesis
            Video Streams Limits</a>.
            </para>
             </li> <li> 
            <para>
            A Kinesis video stream can have a maximum of ten active MPEG-DASH streaming sessions.
            If a new session is created when the maximum number of sessions is already active,
            the oldest (earliest created) session is closed. The number of active <code>GetMedia</code>
            connections on a Kinesis video stream does not count against this limit, and the number
            of active MPEG-DASH sessions does not count against the active <code>GetMedia</code>
            connection limit.
            </para>
             <note> 
            <para>
            The maximum limits for active HLS and MPEG-DASH streaming sessions are independent
            of each other. 
            </para>
             </note> </li> </ul> </note> 
            <para>
            You can monitor the amount of data that the media player consumes by monitoring the
            <code>GetMP4MediaFragment.OutgoingBytes</code> Amazon CloudWatch metric. For information
            about using CloudWatch to monitor Kinesis Video Streams, see <a href="http://docs.aws.amazon.com/kinesisvideostreams/latest/dg/monitoring.html">Monitoring
            Kinesis Video Streams</a>. For pricing information, see <a href="https://aws.amazon.com/kinesis/video-streams/pricing/">Amazon
            Kinesis Video Streams Pricing</a> and <a href="https://aws.amazon.com/pricing/">AWS
            Pricing</a>. Charges for both HLS sessions and outgoing AWS data apply.
            </para>
             
            <para>
            For more information about HLS, see <a href="https://developer.apple.com/streaming/">HTTP
            Live Streaming</a> on the <a href="https://developer.apple.com">Apple Developer site</a>.
            </para>
             <important> 
            <para>
            If an error is thrown after invoking a Kinesis Video Streams archived media API, in
            addition to the HTTP status code and the response body, it includes the following
            pieces of information: 
            </para>
             <ul> <li> 
            <para>
             <code>x-amz-ErrorType</code> HTTP header – contains a more specific error type in
            addition to what the HTTP status code provides. 
            </para>
             </li> <li> 
            <para>
             <code>x-amz-RequestId</code> HTTP header – if you want to report an issue to AWS,
            the support team can better diagnose the problem if given the Request Id.
            </para>
             </li> </ul> 
            <para>
            Both the HTTP status code and the ErrorType header can be utilized to make programmatic
            decisions about whether errors are retry-able and under what conditions, as well as
            provide information on what actions the client programmer might need to take in order
            to successfully try again.
            </para>
             
            <para>
            For more information, see the <b>Errors</b> section at the bottom of this topic, as
            well as <a href="https://docs.aws.amazon.com/kinesisvideostreams/latest/dg/CommonErrors.html">Common
            Errors</a>. 
            </para>
             </important>
            </summary>
            <param name="request">Container for the necessary parameters to execute the GetDASHStreamingSessionURL service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the GetDASHStreamingSessionURL service method, as returned by KinesisVideoArchivedMedia.</returns>
            <exception cref="T:Amazon.KinesisVideoArchivedMedia.Model.ClientLimitExceededException">
            Kinesis Video Streams has throttled the request because you have exceeded the limit
            of allowed client calls. Try making the call later.
            </exception>
            <exception cref="T:Amazon.KinesisVideoArchivedMedia.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            </exception>
            <exception cref="T:Amazon.KinesisVideoArchivedMedia.Model.InvalidCodecPrivateDataException">
            The codec private data in at least one of the tracks of the video stream is not valid
            for this operation.
            </exception>
            <exception cref="T:Amazon.KinesisVideoArchivedMedia.Model.MissingCodecPrivateDataException">
            No codec private data was found in at least one of tracks of the video stream.
            </exception>
            <exception cref="T:Amazon.KinesisVideoArchivedMedia.Model.NoDataRetentionException">
            A streaming session was requested for a stream that does not retain data (that is,
            has a <code>DataRetentionInHours</code> of 0).
            </exception>
            <exception cref="T:Amazon.KinesisVideoArchivedMedia.Model.NotAuthorizedException">
            Status Code: 403, The caller is not authorized to perform an operation on the given
            stream, or the token has expired.
            </exception>
            <exception cref="T:Amazon.KinesisVideoArchivedMedia.Model.ResourceNotFoundException">
            <code>GetMedia</code> throws this error when Kinesis Video Streams can't find the
            stream that you specified.
            
             
            <para>
             <code>GetHLSStreamingSessionURL</code> and <code>GetDASHStreamingSessionURL</code>
            throw this error if a session with a <code>PlaybackMode</code> of <code>ON_DEMAND</code>
            or <code>LIVE_REPLAY</code>is requested for a stream that has no fragments within
            the requested time range, or if a session with a <code>PlaybackMode</code> of <code>LIVE</code>
            is requested for a stream that has no fragments within the last 30 seconds.
            </para>
            </exception>
            <exception cref="T:Amazon.KinesisVideoArchivedMedia.Model.UnsupportedStreamMediaTypeException">
            The type of the media (for example, h.264 or h.265 video or ACC or G.711 audio) could
            not be determined from the codec IDs of the tracks in the first fragment for a playback
            session. The codec ID for track 1 should be <code>V_MPEG/ISO/AVC</code> and, optionally,
            the codec ID for track 2 should be <code>A_AAC</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-video-archived-media-2017-09-30/GetDASHStreamingSessionURL">REST API Reference for GetDASHStreamingSessionURL Operation</seealso>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.AmazonKinesisVideoArchivedMediaClient.GetHLSStreamingSessionURLAsync(Amazon.KinesisVideoArchivedMedia.Model.GetHLSStreamingSessionURLRequest,System.Threading.CancellationToken)">
            <summary>
            Retrieves an HTTP Live Streaming (HLS) URL for the stream. You can then open the URL
            in a browser or media player to view the stream contents.
            
             
            <para>
            Both the <code>StreamName</code> and the <code>StreamARN</code> parameters are optional,
            but you must specify either the <code>StreamName</code> or the <code>StreamARN</code>
            when invoking this API operation.
            </para>
             
            <para>
            An Amazon Kinesis video stream has the following requirements for providing data through
            HLS:
            </para>
             <ul> <li> 
            <para>
            The media must contain h.264 or h.265 encoded video and, optionally, AAC encoded audio.
            Specifically, the codec id of track 1 should be <code>V_MPEG/ISO/AVC</code> (for h.264)
            or <code>V_MPEG/ISO/HEVC</code> (for h.265). Optionally, the codec id of track 2 should
            be <code>A_AAC</code>.
            </para>
             </li> <li> 
            <para>
            Data retention must be greater than 0.
            </para>
             </li> <li> 
            <para>
            The video track of each fragment must contain codec private data in the Advanced Video
            Coding (AVC) for H.264 format or HEVC for H.265 format (<a href="https://www.iso.org/standard/55980.html">MPEG-4
            specification ISO/IEC 14496-15</a>). For information about adapting stream data to
            a given format, see <a href="http://docs.aws.amazon.com/kinesisvideostreams/latest/dg/producer-reference-nal.html">NAL
            Adaptation Flags</a>.
            </para>
             </li> <li> 
            <para>
            The audio track (if present) of each fragment must contain codec private data in the
            AAC format (<a href="https://www.iso.org/standard/43345.html">AAC specification ISO/IEC
            13818-7</a>).
            </para>
             </li> </ul> 
            <para>
            Kinesis Video Streams HLS sessions contain fragments in the fragmented MPEG-4 form
            (also called fMP4 or CMAF) or the MPEG-2 form (also called TS chunks, which the HLS
            specification also supports). For more information about HLS fragment types, see the
            <a href="https://tools.ietf.org/html/draft-pantos-http-live-streaming-23">HLS specification</a>.
            </para>
             
            <para>
            The following procedure shows how to use HLS with Kinesis Video Streams:
            </para>
             <ol> <li> 
            <para>
            Get an endpoint using <a href="http://docs.aws.amazon.com/kinesisvideostreams/latest/dg/API_GetDataEndpoint.html">GetDataEndpoint</a>,
            specifying <code>GET_HLS_STREAMING_SESSION_URL</code> for the <code>APIName</code>
            parameter.
            </para>
             </li> <li> 
            <para>
            Retrieve the HLS URL using <code>GetHLSStreamingSessionURL</code>. Kinesis Video Streams
            creates an HLS streaming session to be used for accessing content in a stream using
            the HLS protocol. <code>GetHLSStreamingSessionURL</code> returns an authenticated
            URL (that includes an encrypted session token) for the session's HLS <i>master playlist</i>
            (the root resource needed for streaming with HLS).
            </para>
             <note> 
            <para>
            Don't share or store this token where an unauthorized entity could access it. The
            token provides access to the content of the stream. Safeguard the token with the same
            measures that you would use with your AWS credentials.
            </para>
             </note> 
            <para>
            The media that is made available through the playlist consists only of the requested
            stream, time range, and format. No other media data (such as frames outside the requested
            window or alternate bitrates) is made available.
            </para>
             </li> <li> 
            <para>
            Provide the URL (containing the encrypted session token) for the HLS master playlist
            to a media player that supports the HLS protocol. Kinesis Video Streams makes the
            HLS media playlist, initialization fragment, and media fragments available through
            the master playlist URL. The initialization fragment contains the codec private data
            for the stream, and other data needed to set up the video or audio decoder and renderer.
            The media fragments contain H.264-encoded video frames or AAC-encoded audio samples.
            </para>
             </li> <li> 
            <para>
            The media player receives the authenticated URL and requests stream metadata and media
            data normally. When the media player requests data, it calls the following actions:
            </para>
             <ul> <li> 
            <para>
             <b>GetHLSMasterPlaylist:</b> Retrieves an HLS master playlist, which contains a URL
            for the <code>GetHLSMediaPlaylist</code> action for each track, and additional metadata
            for the media player, including estimated bitrate and resolution.
            </para>
             </li> <li> 
            <para>
             <b>GetHLSMediaPlaylist:</b> Retrieves an HLS media playlist, which contains a URL
            to access the MP4 initialization fragment with the <code>GetMP4InitFragment</code>
            action, and URLs to access the MP4 media fragments with the <code>GetMP4MediaFragment</code>
            actions. The HLS media playlist also contains metadata about the stream that the player
            needs to play it, such as whether the <code>PlaybackMode</code> is <code>LIVE</code>
            or <code>ON_DEMAND</code>. The HLS media playlist is typically static for sessions
            with a <code>PlaybackType</code> of <code>ON_DEMAND</code>. The HLS media playlist
            is continually updated with new fragments for sessions with a <code>PlaybackType</code>
            of <code>LIVE</code>. There is a distinct HLS media playlist for the video track and
            the audio track (if applicable) that contains MP4 media URLs for the specific track.
            
            </para>
             </li> <li> 
            <para>
             <b>GetMP4InitFragment:</b> Retrieves the MP4 initialization fragment. The media player
            typically loads the initialization fragment before loading any media fragments. This
            fragment contains the "<code>fytp</code>" and "<code>moov</code>" MP4 atoms, and the
            child atoms that are needed to initialize the media player decoder.
            </para>
             
            <para>
            The initialization fragment does not correspond to a fragment in a Kinesis video stream.
            It contains only the codec private data for the stream and respective track, which
            the media player needs to decode the media frames.
            </para>
             </li> <li> 
            <para>
             <b>GetMP4MediaFragment:</b> Retrieves MP4 media fragments. These fragments contain
            the "<code>moof</code>" and "<code>mdat</code>" MP4 atoms and their child atoms, containing
            the encoded fragment's media frames and their timestamps. 
            </para>
             <note> 
            <para>
            After the first media fragment is made available in a streaming session, any fragments
            that don't contain the same codec private data cause an error to be returned when
            those different media fragments are loaded. Therefore, the codec private data should
            not change between fragments in a session. This also means that the session fails
            if the fragments in a stream change from having only video to having both audio and
            video.
            </para>
             </note> 
            <para>
            Data retrieved with this action is billable. See <a href="https://aws.amazon.com/kinesis/video-streams/pricing/">Pricing</a>
            for details.
            </para>
             </li> <li> 
            <para>
             <b>GetTSFragment:</b> Retrieves MPEG TS fragments containing both initialization
            and media data for all tracks in the stream.
            </para>
             <note> 
            <para>
            If the <code>ContainerFormat</code> is <code>MPEG_TS</code>, this API is used instead
            of <code>GetMP4InitFragment</code> and <code>GetMP4MediaFragment</code> to retrieve
            stream media.
            </para>
             </note> 
            <para>
            Data retrieved with this action is billable. For more information, see <a href="https://aws.amazon.com/kinesis/video-streams/pricing/">Kinesis
            Video Streams pricing</a>.
            </para>
             </li> </ul> </li> </ol> <note> 
            <para>
            The following restrictions apply to HLS sessions:
            </para>
             <ul> <li> 
            <para>
            A streaming session URL should not be shared between players. The service might throttle
            a session if multiple media players are sharing it. For connection limits, see <a
            href="http://docs.aws.amazon.com/kinesisvideostreams/latest/dg/limits.html">Kinesis
            Video Streams Limits</a>.
            </para>
             </li> <li> 
            <para>
            A Kinesis video stream can have a maximum of ten active HLS streaming sessions. If
            a new session is created when the maximum number of sessions is already active, the
            oldest (earliest created) session is closed. The number of active <code>GetMedia</code>
            connections on a Kinesis video stream does not count against this limit, and the number
            of active HLS sessions does not count against the active <code>GetMedia</code> connection
            limit.
            </para>
             <note> 
            <para>
            The maximum limits for active HLS and MPEG-DASH streaming sessions are independent
            of each other.
            </para>
             </note> </li> </ul> </note> 
            <para>
            You can monitor the amount of data that the media player consumes by monitoring the
            <code>GetMP4MediaFragment.OutgoingBytes</code> Amazon CloudWatch metric. For information
            about using CloudWatch to monitor Kinesis Video Streams, see <a href="http://docs.aws.amazon.com/kinesisvideostreams/latest/dg/monitoring.html">Monitoring
            Kinesis Video Streams</a>. For pricing information, see <a href="https://aws.amazon.com/kinesis/video-streams/pricing/">Amazon
            Kinesis Video Streams Pricing</a> and <a href="https://aws.amazon.com/pricing/">AWS
            Pricing</a>. Charges for both HLS sessions and outgoing AWS data apply.
            </para>
             
            <para>
            For more information about HLS, see <a href="https://developer.apple.com/streaming/">HTTP
            Live Streaming</a> on the <a href="https://developer.apple.com">Apple Developer site</a>.
            </para>
             <important> 
            <para>
            If an error is thrown after invoking a Kinesis Video Streams archived media API, in
            addition to the HTTP status code and the response body, it includes the following
            pieces of information: 
            </para>
             <ul> <li> 
            <para>
             <code>x-amz-ErrorType</code> HTTP header – contains a more specific error type in
            addition to what the HTTP status code provides. 
            </para>
             </li> <li> 
            <para>
             <code>x-amz-RequestId</code> HTTP header – if you want to report an issue to AWS,
            the support team can better diagnose the problem if given the Request Id.
            </para>
             </li> </ul> 
            <para>
            Both the HTTP status code and the ErrorType header can be utilized to make programmatic
            decisions about whether errors are retry-able and under what conditions, as well as
            provide information on what actions the client programmer might need to take in order
            to successfully try again.
            </para>
             
            <para>
            For more information, see the <b>Errors</b> section at the bottom of this topic, as
            well as <a href="https://docs.aws.amazon.com/kinesisvideostreams/latest/dg/CommonErrors.html">Common
            Errors</a>. 
            </para>
             </important>
            </summary>
            <param name="request">Container for the necessary parameters to execute the GetHLSStreamingSessionURL service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the GetHLSStreamingSessionURL service method, as returned by KinesisVideoArchivedMedia.</returns>
            <exception cref="T:Amazon.KinesisVideoArchivedMedia.Model.ClientLimitExceededException">
            Kinesis Video Streams has throttled the request because you have exceeded the limit
            of allowed client calls. Try making the call later.
            </exception>
            <exception cref="T:Amazon.KinesisVideoArchivedMedia.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            </exception>
            <exception cref="T:Amazon.KinesisVideoArchivedMedia.Model.InvalidCodecPrivateDataException">
            The codec private data in at least one of the tracks of the video stream is not valid
            for this operation.
            </exception>
            <exception cref="T:Amazon.KinesisVideoArchivedMedia.Model.MissingCodecPrivateDataException">
            No codec private data was found in at least one of tracks of the video stream.
            </exception>
            <exception cref="T:Amazon.KinesisVideoArchivedMedia.Model.NoDataRetentionException">
            A streaming session was requested for a stream that does not retain data (that is,
            has a <code>DataRetentionInHours</code> of 0).
            </exception>
            <exception cref="T:Amazon.KinesisVideoArchivedMedia.Model.NotAuthorizedException">
            Status Code: 403, The caller is not authorized to perform an operation on the given
            stream, or the token has expired.
            </exception>
            <exception cref="T:Amazon.KinesisVideoArchivedMedia.Model.ResourceNotFoundException">
            <code>GetMedia</code> throws this error when Kinesis Video Streams can't find the
            stream that you specified.
            
             
            <para>
             <code>GetHLSStreamingSessionURL</code> and <code>GetDASHStreamingSessionURL</code>
            throw this error if a session with a <code>PlaybackMode</code> of <code>ON_DEMAND</code>
            or <code>LIVE_REPLAY</code>is requested for a stream that has no fragments within
            the requested time range, or if a session with a <code>PlaybackMode</code> of <code>LIVE</code>
            is requested for a stream that has no fragments within the last 30 seconds.
            </para>
            </exception>
            <exception cref="T:Amazon.KinesisVideoArchivedMedia.Model.UnsupportedStreamMediaTypeException">
            The type of the media (for example, h.264 or h.265 video or ACC or G.711 audio) could
            not be determined from the codec IDs of the tracks in the first fragment for a playback
            session. The codec ID for track 1 should be <code>V_MPEG/ISO/AVC</code> and, optionally,
            the codec ID for track 2 should be <code>A_AAC</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-video-archived-media-2017-09-30/GetHLSStreamingSessionURL">REST API Reference for GetHLSStreamingSessionURL Operation</seealso>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.AmazonKinesisVideoArchivedMediaClient.GetMediaForFragmentListAsync(Amazon.KinesisVideoArchivedMedia.Model.GetMediaForFragmentListRequest,System.Threading.CancellationToken)">
            <summary>
            Gets media for a list of fragments (specified by fragment number) from the archived
            data in an Amazon Kinesis video stream.
            
             <note> 
            <para>
            You must first call the <code>GetDataEndpoint</code> API to get an endpoint. Then
            send the <code>GetMediaForFragmentList</code> requests to this endpoint using the
            <a href="https://docs.aws.amazon.com/cli/latest/reference/">--endpoint-url parameter</a>.
            
            </para>
             </note> 
            <para>
            The following limits apply when using the <code>GetMediaForFragmentList</code> API:
            </para>
             <ul> <li> 
            <para>
            A client can call <code>GetMediaForFragmentList</code> up to five times per second
            per stream. 
            </para>
             </li> <li> 
            <para>
            Kinesis Video Streams sends media data at a rate of up to 25 megabytes per second
            (or 200 megabits per second) during a <code>GetMediaForFragmentList</code> session.
            
            </para>
             </li> </ul> <important> 
            <para>
            If an error is thrown after invoking a Kinesis Video Streams archived media API, in
            addition to the HTTP status code and the response body, it includes the following
            pieces of information: 
            </para>
             <ul> <li> 
            <para>
             <code>x-amz-ErrorType</code> HTTP header – contains a more specific error type in
            addition to what the HTTP status code provides. 
            </para>
             </li> <li> 
            <para>
             <code>x-amz-RequestId</code> HTTP header – if you want to report an issue to AWS,
            the support team can better diagnose the problem if given the Request Id.
            </para>
             </li> </ul> 
            <para>
            Both the HTTP status code and the ErrorType header can be utilized to make programmatic
            decisions about whether errors are retry-able and under what conditions, as well as
            provide information on what actions the client programmer might need to take in order
            to successfully try again.
            </para>
             
            <para>
            For more information, see the <b>Errors</b> section at the bottom of this topic, as
            well as <a href="https://docs.aws.amazon.com/kinesisvideostreams/latest/dg/CommonErrors.html">Common
            Errors</a>. 
            </para>
             </important>
            </summary>
            <param name="request">Container for the necessary parameters to execute the GetMediaForFragmentList service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the GetMediaForFragmentList service method, as returned by KinesisVideoArchivedMedia.</returns>
            <exception cref="T:Amazon.KinesisVideoArchivedMedia.Model.ClientLimitExceededException">
            Kinesis Video Streams has throttled the request because you have exceeded the limit
            of allowed client calls. Try making the call later.
            </exception>
            <exception cref="T:Amazon.KinesisVideoArchivedMedia.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            </exception>
            <exception cref="T:Amazon.KinesisVideoArchivedMedia.Model.NotAuthorizedException">
            Status Code: 403, The caller is not authorized to perform an operation on the given
            stream, or the token has expired.
            </exception>
            <exception cref="T:Amazon.KinesisVideoArchivedMedia.Model.ResourceNotFoundException">
            <code>GetMedia</code> throws this error when Kinesis Video Streams can't find the
            stream that you specified.
            
             
            <para>
             <code>GetHLSStreamingSessionURL</code> and <code>GetDASHStreamingSessionURL</code>
            throw this error if a session with a <code>PlaybackMode</code> of <code>ON_DEMAND</code>
            or <code>LIVE_REPLAY</code>is requested for a stream that has no fragments within
            the requested time range, or if a session with a <code>PlaybackMode</code> of <code>LIVE</code>
            is requested for a stream that has no fragments within the last 30 seconds.
            </para>
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-video-archived-media-2017-09-30/GetMediaForFragmentList">REST API Reference for GetMediaForFragmentList Operation</seealso>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.AmazonKinesisVideoArchivedMediaClient.ListFragmentsAsync(Amazon.KinesisVideoArchivedMedia.Model.ListFragmentsRequest,System.Threading.CancellationToken)">
            <summary>
            Returns a list of <a>Fragment</a> objects from the specified stream and timestamp
            range within the archived data.
            
             
            <para>
            Listing fragments is eventually consistent. This means that even if the producer receives
            an acknowledgment that a fragment is persisted, the result might not be returned immediately
            from a request to <code>ListFragments</code>. However, results are typically available
            in less than one second.
            </para>
             <note> 
            <para>
            You must first call the <code>GetDataEndpoint</code> API to get an endpoint. Then
            send the <code>ListFragments</code> requests to this endpoint using the <a href="https://docs.aws.amazon.com/cli/latest/reference/">--endpoint-url
            parameter</a>. 
            </para>
             </note> <important> 
            <para>
            If an error is thrown after invoking a Kinesis Video Streams archived media API, in
            addition to the HTTP status code and the response body, it includes the following
            pieces of information: 
            </para>
             <ul> <li> 
            <para>
             <code>x-amz-ErrorType</code> HTTP header – contains a more specific error type in
            addition to what the HTTP status code provides. 
            </para>
             </li> <li> 
            <para>
             <code>x-amz-RequestId</code> HTTP header – if you want to report an issue to AWS,
            the support team can better diagnose the problem if given the Request Id.
            </para>
             </li> </ul> 
            <para>
            Both the HTTP status code and the ErrorType header can be utilized to make programmatic
            decisions about whether errors are retry-able and under what conditions, as well as
            provide information on what actions the client programmer might need to take in order
            to successfully try again.
            </para>
             
            <para>
            For more information, see the <b>Errors</b> section at the bottom of this topic, as
            well as <a href="https://docs.aws.amazon.com/kinesisvideostreams/latest/dg/CommonErrors.html">Common
            Errors</a>. 
            </para>
             </important>
            </summary>
            <param name="request">Container for the necessary parameters to execute the ListFragments service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the ListFragments service method, as returned by KinesisVideoArchivedMedia.</returns>
            <exception cref="T:Amazon.KinesisVideoArchivedMedia.Model.ClientLimitExceededException">
            Kinesis Video Streams has throttled the request because you have exceeded the limit
            of allowed client calls. Try making the call later.
            </exception>
            <exception cref="T:Amazon.KinesisVideoArchivedMedia.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            </exception>
            <exception cref="T:Amazon.KinesisVideoArchivedMedia.Model.NotAuthorizedException">
            Status Code: 403, The caller is not authorized to perform an operation on the given
            stream, or the token has expired.
            </exception>
            <exception cref="T:Amazon.KinesisVideoArchivedMedia.Model.ResourceNotFoundException">
            <code>GetMedia</code> throws this error when Kinesis Video Streams can't find the
            stream that you specified.
            
             
            <para>
             <code>GetHLSStreamingSessionURL</code> and <code>GetDASHStreamingSessionURL</code>
            throw this error if a session with a <code>PlaybackMode</code> of <code>ON_DEMAND</code>
            or <code>LIVE_REPLAY</code>is requested for a stream that has no fragments within
            the requested time range, or if a session with a <code>PlaybackMode</code> of <code>LIVE</code>
            is requested for a stream that has no fragments within the last 30 seconds.
            </para>
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-video-archived-media-2017-09-30/ListFragments">REST API Reference for ListFragments Operation</seealso>
        </member>
        <member name="T:Amazon.KinesisVideoArchivedMedia.AmazonKinesisVideoArchivedMediaConfig">
            <summary>
            Configuration for accessing Amazon KinesisVideoArchivedMedia service
            </summary>
            <summary>
            Configuration for accessing Amazon KinesisVideoArchivedMedia service
            </summary>
            <summary>
            Configuration for accessing Amazon KinesisVideoArchivedMedia service
            </summary>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.AmazonKinesisVideoArchivedMediaConfig.Initialize">
            <summary>
            This method contains custom initializations for the config object.
            </summary>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.AmazonKinesisVideoArchivedMediaConfig.Validate">
            <summary>
            Validate that the config object is properly configured.
            </summary>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.AmazonKinesisVideoArchivedMediaConfig.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:Amazon.KinesisVideoArchivedMedia.AmazonKinesisVideoArchivedMediaConfig.RegionEndpointServiceName">
            <summary>
            The constant used to lookup in the region hash the endpoint.
            </summary>
        </member>
        <member name="P:Amazon.KinesisVideoArchivedMedia.AmazonKinesisVideoArchivedMediaConfig.ServiceVersion">
            <summary>
            Gets the ServiceVersion property.
            </summary>
        </member>
        <member name="P:Amazon.KinesisVideoArchivedMedia.AmazonKinesisVideoArchivedMediaConfig.UserAgent">
            <summary>
            Gets the value of UserAgent property.
            </summary>
        </member>
        <member name="T:Amazon.KinesisVideoArchivedMedia.AmazonKinesisVideoArchivedMediaException">
            <summary>
             Common exception for the KinesisVideoArchivedMedia service.
             </summary>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.AmazonKinesisVideoArchivedMediaException.#ctor(System.String)">
            <summary>
            Construct instance of AmazonKinesisVideoArchivedMediaException
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.AmazonKinesisVideoArchivedMediaException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of AmazonKinesisVideoArchivedMediaException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.AmazonKinesisVideoArchivedMediaException.#ctor(System.Exception)">
            <summary>
            Construct instance of AmazonKinesisVideoArchivedMediaException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.AmazonKinesisVideoArchivedMediaException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of AmazonKinesisVideoArchivedMediaException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.AmazonKinesisVideoArchivedMediaException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of AmazonKinesisVideoArchivedMediaException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.KinesisVideoArchivedMedia.Internal.AmazonKinesisVideoArchivedMediaMetadata">
            <summary>
            Service metadata for  Amazon KinesisVideoArchivedMedia service
            </summary>
        </member>
        <member name="P:Amazon.KinesisVideoArchivedMedia.Internal.AmazonKinesisVideoArchivedMediaMetadata.ServiceId">
            <summary>
            Gets the value of the Service Id.
            </summary>
        </member>
        <member name="P:Amazon.KinesisVideoArchivedMedia.Internal.AmazonKinesisVideoArchivedMediaMetadata.OperationNameMapping">
            <summary>
            Gets the dictionary that gives mapping of renamed operations
            </summary>
        </member>
        <member name="T:Amazon.KinesisVideoArchivedMedia.AmazonKinesisVideoArchivedMediaRequest">
            <summary>
            Base class for KinesisVideoArchivedMedia operation requests.
            </summary>
        </member>
        <member name="T:Amazon.KinesisVideoArchivedMedia.Model.ClientLimitExceededException">
            <summary>
             KinesisVideoArchivedMedia exception
             </summary>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.Model.ClientLimitExceededException.#ctor(System.String)">
            <summary>
            Constructs a new ClientLimitExceededException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.Model.ClientLimitExceededException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of ClientLimitExceededException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.Model.ClientLimitExceededException.#ctor(System.Exception)">
            <summary>
            Construct instance of ClientLimitExceededException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.Model.ClientLimitExceededException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of ClientLimitExceededException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.Model.ClientLimitExceededException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of ClientLimitExceededException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.KinesisVideoArchivedMedia.Model.DASHFragmentSelector">
            <summary>
            Contains the range of timestamps for the requested media, and the source of the timestamps.
            </summary>
        </member>
        <member name="P:Amazon.KinesisVideoArchivedMedia.Model.DASHFragmentSelector.FragmentSelectorType">
            <summary>
            Gets and sets the property FragmentSelectorType. 
            <para>
            The source of the timestamps for the requested media.
            </para>
             
            <para>
            When <code>FragmentSelectorType</code> is set to <code>PRODUCER_TIMESTAMP</code> and
            <a>GetDASHStreamingSessionURLInput$PlaybackMode</a> is <code>ON_DEMAND</code> or <code>LIVE_REPLAY</code>,
            the first fragment ingested with a producer timestamp within the specified <a>FragmentSelector$TimestampRange</a>
            is included in the media playlist. In addition, the fragments with producer timestamps
            within the <code>TimestampRange</code> ingested immediately following the first fragment
            (up to the <a>GetDASHStreamingSessionURLInput$MaxManifestFragmentResults</a> value)
            are included. 
            </para>
             
            <para>
            Fragments that have duplicate producer timestamps are deduplicated. This means that
            if producers are producing a stream of fragments with producer timestamps that are
            approximately equal to the true clock time, the MPEG-DASH manifest will contain all
            of the fragments within the requested timestamp range. If some fragments are ingested
            within the same time range and very different points in time, only the oldest ingested
            collection of fragments are returned.
            </para>
             
            <para>
            When <code>FragmentSelectorType</code> is set to <code>PRODUCER_TIMESTAMP</code> and
            <a>GetDASHStreamingSessionURLInput$PlaybackMode</a> is <code>LIVE</code>, the producer
            timestamps are used in the MP4 fragments and for deduplication. But the most recently
            ingested fragments based on server timestamps are included in the MPEG-DASH manifest.
            This means that even if fragments ingested in the past have producer timestamps with
            values now, they are not included in the HLS media playlist.
            </para>
             
            <para>
            The default is <code>SERVER_TIMESTAMP</code>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KinesisVideoArchivedMedia.Model.DASHFragmentSelector.TimestampRange">
            <summary>
            Gets and sets the property TimestampRange. 
            <para>
            The start and end of the timestamp range for the requested media.
            </para>
             
            <para>
            This value should not be present if <code>PlaybackType</code> is <code>LIVE</code>.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KinesisVideoArchivedMedia.Model.DASHTimestampRange">
            <summary>
            The start and end of the timestamp range for the requested media.
            
             
            <para>
            This value should not be present if <code>PlaybackType</code> is <code>LIVE</code>.
            </para>
             <note> 
            <para>
            The values in the <code>DASHimestampRange</code> are inclusive. Fragments that begin
            before the start time but continue past it, or fragments that begin before the end
            time but continue past it, are included in the session.
            </para>
             </note>
            </summary>
        </member>
        <member name="P:Amazon.KinesisVideoArchivedMedia.Model.DASHTimestampRange.EndTimestamp">
            <summary>
            Gets and sets the property EndTimestamp. 
            <para>
            The end of the timestamp range for the requested media. This value must be within
            3 hours of the specified <code>StartTimestamp</code>, and it must be later than the
            <code>StartTimestamp</code> value.
            </para>
             
            <para>
            If <code>FragmentSelectorType</code> for the request is <code>SERVER_TIMESTAMP</code>,
            this value must be in the past.
            </para>
             
            <para>
            The <code>EndTimestamp</code> value is required for <code>ON_DEMAND</code> mode, but
            optional for <code>LIVE_REPLAY</code> mode. If the <code>EndTimestamp</code> is not
            set for <code>LIVE_REPLAY</code> mode then the session will continue to include newly
            ingested fragments until the session expires.
            </para>
             <note> 
            <para>
            This value is inclusive. The <code>EndTimestamp</code> is compared to the (starting)
            timestamp of the fragment. Fragments that start before the <code>EndTimestamp</code>
            value and continue past it are included in the session.
            </para>
             </note>
            </summary>
        </member>
        <member name="P:Amazon.KinesisVideoArchivedMedia.Model.DASHTimestampRange.StartTimestamp">
            <summary>
            Gets and sets the property StartTimestamp. 
            <para>
            The start of the timestamp range for the requested media.
            </para>
             
            <para>
            If the <code>DASHTimestampRange</code> value is specified, the <code>StartTimestamp</code>
            value is required.
            </para>
             <note> 
            <para>
            This value is inclusive. Fragments that start before the <code>StartTimestamp</code>
            and continue past it are included in the session. If <code>FragmentSelectorType</code>
            is <code>SERVER_TIMESTAMP</code>, the <code>StartTimestamp</code> must be later than
            the stream head.
            </para>
             </note>
            </summary>
        </member>
        <member name="T:Amazon.KinesisVideoArchivedMedia.Model.Fragment">
            <summary>
            Represents a segment of video or other time-delimited data.
            </summary>
        </member>
        <member name="P:Amazon.KinesisVideoArchivedMedia.Model.Fragment.FragmentLengthInMilliseconds">
            <summary>
            Gets and sets the property FragmentLengthInMilliseconds. 
            <para>
            The playback duration or other time value associated with the fragment.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KinesisVideoArchivedMedia.Model.Fragment.FragmentNumber">
            <summary>
            Gets and sets the property FragmentNumber. 
            <para>
            The unique identifier of the fragment. This value monotonically increases based on
            the ingestion order.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KinesisVideoArchivedMedia.Model.Fragment.FragmentSizeInBytes">
            <summary>
            Gets and sets the property FragmentSizeInBytes. 
            <para>
            The total fragment size, including information about the fragment and contained media
            data.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KinesisVideoArchivedMedia.Model.Fragment.ProducerTimestamp">
            <summary>
            Gets and sets the property ProducerTimestamp. 
            <para>
            The timestamp from the producer corresponding to the fragment.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KinesisVideoArchivedMedia.Model.Fragment.ServerTimestamp">
            <summary>
            Gets and sets the property ServerTimestamp. 
            <para>
            The timestamp from the AWS server corresponding to the fragment.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KinesisVideoArchivedMedia.Model.FragmentSelector">
            <summary>
            Describes the timestamp range and timestamp origin of a range of fragments.
            
             
            <para>
            Only fragments with a start timestamp greater than or equal to the given start time
            and less than or equal to the end time are returned. For example, if a stream contains
            fragments with the following start timestamps: 
            </para>
             <ul> <li> 
            <para>
            00:00:00
            </para>
             </li> <li> 
            <para>
            00:00:02
            </para>
             </li> <li> 
            <para>
            00:00:04
            </para>
             </li> <li> 
            <para>
            00:00:06
            </para>
             </li> </ul> 
            <para>
             A fragment selector range with a start time of 00:00:01 and end time of 00:00:04
            would return the fragments with start times of 00:00:02 and 00:00:04. 
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KinesisVideoArchivedMedia.Model.FragmentSelector.FragmentSelectorType">
            <summary>
            Gets and sets the property FragmentSelectorType. 
            <para>
            The origin of the timestamps to use (Server or Producer).
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KinesisVideoArchivedMedia.Model.FragmentSelector.TimestampRange">
            <summary>
            Gets and sets the property TimestampRange. 
            <para>
            The range of timestamps to return.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KinesisVideoArchivedMedia.Model.GetDASHStreamingSessionURLRequest">
            <summary>
            Container for the parameters to the GetDASHStreamingSessionURL operation.
            Retrieves an MPEG Dynamic Adaptive Streaming over HTTP (DASH) URL for the stream.
            You can then open the URL in a media player to view the stream contents.
            
             
            <para>
            Both the <code>StreamName</code> and the <code>StreamARN</code> parameters are optional,
            but you must specify either the <code>StreamName</code> or the <code>StreamARN</code>
            when invoking this API operation.
            </para>
             
            <para>
            An Amazon Kinesis video stream has the following requirements for providing data through
            MPEG-DASH:
            </para>
             <ul> <li> 
            <para>
            The media must contain h.264 or h.265 encoded video and, optionally, AAC or G.711
            encoded audio. Specifically, the codec id of track 1 should be <code>V_MPEG/ISO/AVC</code>
            (for h.264) or V_MPEGH/ISO/HEVC (for H.265). Optionally, the codec id of track 2 should
            be <code>A_AAC</code> (for AAC) or A_MS/ACM (for G.711).
            </para>
             </li> <li> 
            <para>
            Data retention must be greater than 0.
            </para>
             </li> <li> 
            <para>
            The video track of each fragment must contain codec private data in the Advanced Video
            Coding (AVC) for H.264 format and HEVC for H.265 format. For more information, see
            <a href="https://www.iso.org/standard/55980.html">MPEG-4 specification ISO/IEC 14496-15</a>.
            For information about adapting stream data to a given format, see <a href="http://docs.aws.amazon.com/kinesisvideostreams/latest/dg/producer-reference-nal.html">NAL
            Adaptation Flags</a>.
            </para>
             </li> <li> 
            <para>
            The audio track (if present) of each fragment must contain codec private data in the
            AAC format (<a href="https://www.iso.org/standard/43345.html">AAC specification ISO/IEC
            13818-7</a>) or the <a href="http://www-mmsp.ece.mcgill.ca/Documents/AudioFormats/WAVE/WAVE.html">MS
            Wave format</a>.
            </para>
             </li> </ul> 
            <para>
            The following procedure shows how to use MPEG-DASH with Kinesis Video Streams:
            </para>
             <ol> <li> 
            <para>
            Get an endpoint using <a href="http://docs.aws.amazon.com/kinesisvideostreams/latest/dg/API_GetDataEndpoint.html">GetDataEndpoint</a>,
            specifying <code>GET_DASH_STREAMING_SESSION_URL</code> for the <code>APIName</code>
            parameter.
            </para>
             </li> <li> 
            <para>
            Retrieve the MPEG-DASH URL using <code>GetDASHStreamingSessionURL</code>. Kinesis
            Video Streams creates an MPEG-DASH streaming session to be used for accessing content
            in a stream using the MPEG-DASH protocol. <code>GetDASHStreamingSessionURL</code>
            returns an authenticated URL (that includes an encrypted session token) for the session's
            MPEG-DASH <i>manifest</i> (the root resource needed for streaming with MPEG-DASH).
            </para>
             <note> 
            <para>
            Don't share or store this token where an unauthorized entity could access it. The
            token provides access to the content of the stream. Safeguard the token with the same
            measures that you would use with your AWS credentials.
            </para>
             </note> 
            <para>
            The media that is made available through the manifest consists only of the requested
            stream, time range, and format. No other media data (such as frames outside the requested
            window or alternate bitrates) is made available.
            </para>
             </li> <li> 
            <para>
            Provide the URL (containing the encrypted session token) for the MPEG-DASH manifest
            to a media player that supports the MPEG-DASH protocol. Kinesis Video Streams makes
            the initialization fragment, and media fragments available through the manifest URL.
            The initialization fragment contains the codec private data for the stream, and other
            data needed to set up the video or audio decoder and renderer. The media fragments
            contain encoded video frames or encoded audio samples.
            </para>
             </li> <li> 
            <para>
            The media player receives the authenticated URL and requests stream metadata and media
            data normally. When the media player requests data, it calls the following actions:
            </para>
             <ul> <li> 
            <para>
             <b>GetDASHManifest:</b> Retrieves an MPEG DASH manifest, which contains the metadata
            for the media that you want to playback.
            </para>
             </li> <li> 
            <para>
             <b>GetMP4InitFragment:</b> Retrieves the MP4 initialization fragment. The media player
            typically loads the initialization fragment before loading any media fragments. This
            fragment contains the "<code>fytp</code>" and "<code>moov</code>" MP4 atoms, and the
            child atoms that are needed to initialize the media player decoder.
            </para>
             
            <para>
            The initialization fragment does not correspond to a fragment in a Kinesis video stream.
            It contains only the codec private data for the stream and respective track, which
            the media player needs to decode the media frames.
            </para>
             </li> <li> 
            <para>
             <b>GetMP4MediaFragment:</b> Retrieves MP4 media fragments. These fragments contain
            the "<code>moof</code>" and "<code>mdat</code>" MP4 atoms and their child atoms, containing
            the encoded fragment's media frames and their timestamps. 
            </para>
             <note> 
            <para>
            After the first media fragment is made available in a streaming session, any fragments
            that don't contain the same codec private data cause an error to be returned when
            those different media fragments are loaded. Therefore, the codec private data should
            not change between fragments in a session. This also means that the session fails
            if the fragments in a stream change from having only video to having both audio and
            video.
            </para>
             </note> 
            <para>
            Data retrieved with this action is billable. See <a href="https://aws.amazon.com/kinesis/video-streams/pricing/">Pricing</a>
            for details.
            </para>
             </li> </ul> </li> </ol> <note> 
            <para>
            The following restrictions apply to MPEG-DASH sessions:
            </para>
             <ul> <li> 
            <para>
            A streaming session URL should not be shared between players. The service might throttle
            a session if multiple media players are sharing it. For connection limits, see <a
            href="http://docs.aws.amazon.com/kinesisvideostreams/latest/dg/limits.html">Kinesis
            Video Streams Limits</a>.
            </para>
             </li> <li> 
            <para>
            A Kinesis video stream can have a maximum of ten active MPEG-DASH streaming sessions.
            If a new session is created when the maximum number of sessions is already active,
            the oldest (earliest created) session is closed. The number of active <code>GetMedia</code>
            connections on a Kinesis video stream does not count against this limit, and the number
            of active MPEG-DASH sessions does not count against the active <code>GetMedia</code>
            connection limit.
            </para>
             <note> 
            <para>
            The maximum limits for active HLS and MPEG-DASH streaming sessions are independent
            of each other. 
            </para>
             </note> </li> </ul> </note> 
            <para>
            You can monitor the amount of data that the media player consumes by monitoring the
            <code>GetMP4MediaFragment.OutgoingBytes</code> Amazon CloudWatch metric. For information
            about using CloudWatch to monitor Kinesis Video Streams, see <a href="http://docs.aws.amazon.com/kinesisvideostreams/latest/dg/monitoring.html">Monitoring
            Kinesis Video Streams</a>. For pricing information, see <a href="https://aws.amazon.com/kinesis/video-streams/pricing/">Amazon
            Kinesis Video Streams Pricing</a> and <a href="https://aws.amazon.com/pricing/">AWS
            Pricing</a>. Charges for both HLS sessions and outgoing AWS data apply.
            </para>
             
            <para>
            For more information about HLS, see <a href="https://developer.apple.com/streaming/">HTTP
            Live Streaming</a> on the <a href="https://developer.apple.com">Apple Developer site</a>.
            </para>
             <important> 
            <para>
            If an error is thrown after invoking a Kinesis Video Streams archived media API, in
            addition to the HTTP status code and the response body, it includes the following
            pieces of information: 
            </para>
             <ul> <li> 
            <para>
             <code>x-amz-ErrorType</code> HTTP header – contains a more specific error type in
            addition to what the HTTP status code provides. 
            </para>
             </li> <li> 
            <para>
             <code>x-amz-RequestId</code> HTTP header – if you want to report an issue to AWS,
            the support team can better diagnose the problem if given the Request Id.
            </para>
             </li> </ul> 
            <para>
            Both the HTTP status code and the ErrorType header can be utilized to make programmatic
            decisions about whether errors are retry-able and under what conditions, as well as
            provide information on what actions the client programmer might need to take in order
            to successfully try again.
            </para>
             
            <para>
            For more information, see the <b>Errors</b> section at the bottom of this topic, as
            well as <a href="https://docs.aws.amazon.com/kinesisvideostreams/latest/dg/CommonErrors.html">Common
            Errors</a>. 
            </para>
             </important>
            </summary>
        </member>
        <member name="P:Amazon.KinesisVideoArchivedMedia.Model.GetDASHStreamingSessionURLRequest.DASHFragmentSelector">
            <summary>
            Gets and sets the property DASHFragmentSelector. 
            <para>
            The time range of the requested fragment, and the source of the timestamps.
            </para>
             
            <para>
            This parameter is required if <code>PlaybackMode</code> is <code>ON_DEMAND</code>
            or <code>LIVE_REPLAY</code>. This parameter is optional if PlaybackMode is<code/>
            <code>LIVE</code>. If <code>PlaybackMode</code> is <code>LIVE</code>, the <code>FragmentSelectorType</code>
            can be set, but the <code>TimestampRange</code> should not be set. If <code>PlaybackMode</code>
            is <code>ON_DEMAND</code> or <code>LIVE_REPLAY</code>, both <code>FragmentSelectorType</code>
            and <code>TimestampRange</code> must be set.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KinesisVideoArchivedMedia.Model.GetDASHStreamingSessionURLRequest.DisplayFragmentNumber">
            <summary>
            Gets and sets the property DisplayFragmentNumber. 
            <para>
            Fragments are identified in the manifest file based on their sequence number in the
            session. If DisplayFragmentNumber is set to <code>ALWAYS</code>, the Kinesis Video
            Streams fragment number is added to each S element in the manifest file with the attribute
            name “kvs:fn”. These fragment numbers can be used for logging or for use with other
            APIs (e.g. <code>GetMedia</code> and <code>GetMediaForFragmentList</code>). A custom
            MPEG-DASH media player is necessary to leverage these this custom attribute.
            </para>
             
            <para>
            The default value is <code>NEVER</code>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KinesisVideoArchivedMedia.Model.GetDASHStreamingSessionURLRequest.DisplayFragmentTimestamp">
            <summary>
            Gets and sets the property DisplayFragmentTimestamp. 
            <para>
            Per the MPEG-DASH specification, the wall-clock time of fragments in the manifest
            file can be derived using attributes in the manifest itself. However, typically, MPEG-DASH
            compatible media players do not properly handle gaps in the media timeline. Kinesis
            Video Streams adjusts the media timeline in the manifest file to enable playback of
            media with discontinuities. Therefore, the wall-clock time derived from the manifest
            file may be inaccurate. If DisplayFragmentTimestamp is set to <code>ALWAYS</code>,
            the accurate fragment timestamp is added to each S element in the manifest file with
            the attribute name “kvs:ts”. A custom MPEG-DASH media player is necessary to leverage
            this custom attribute.
            </para>
             
            <para>
            The default value is <code>NEVER</code>. When <a>DASHFragmentSelector</a> is <code>SERVER_TIMESTAMP</code>,
            the timestamps will be the server start timestamps. Similarly, when <a>DASHFragmentSelector</a>
            is <code>PRODUCER_TIMESTAMP</code>, the timestamps will be the producer start timestamps.
            
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KinesisVideoArchivedMedia.Model.GetDASHStreamingSessionURLRequest.Expires">
            <summary>
            Gets and sets the property Expires. 
            <para>
            The time in seconds until the requested session expires. This value can be between
            300 (5 minutes) and 43200 (12 hours).
            </para>
             
            <para>
            When a session expires, no new calls to <code>GetDashManifest</code>, <code>GetMP4InitFragment</code>,
            or <code>GetMP4MediaFragment</code> can be made for that session.
            </para>
             
            <para>
            The default is 300 (5 minutes).
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KinesisVideoArchivedMedia.Model.GetDASHStreamingSessionURLRequest.MaxManifestFragmentResults">
            <summary>
            Gets and sets the property MaxManifestFragmentResults. 
            <para>
            The maximum number of fragments that are returned in the MPEG-DASH manifest.
            </para>
             
            <para>
            When the <code>PlaybackMode</code> is <code>LIVE</code>, the most recent fragments
            are returned up to this value. When the <code>PlaybackMode</code> is <code>ON_DEMAND</code>,
            the oldest fragments are returned, up to this maximum number.
            </para>
             
            <para>
            When there are a higher number of fragments available in a live MPEG-DASH manifest,
            video players often buffer content before starting playback. Increasing the buffer
            size increases the playback latency, but it decreases the likelihood that rebuffering
            will occur during playback. We recommend that a live MPEG-DASH manifest have a minimum
            of 3 fragments and a maximum of 10 fragments.
            </para>
             
            <para>
            The default is 5 fragments if <code>PlaybackMode</code> is <code>LIVE</code> or <code>LIVE_REPLAY</code>,
            and 1,000 if <code>PlaybackMode</code> is <code>ON_DEMAND</code>. 
            </para>
             
            <para>
            The maximum value of 1,000 fragments corresponds to more than 16 minutes of video
            on streams with 1-second fragments, and more than 2 1/2 hours of video on streams
            with 10-second fragments.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KinesisVideoArchivedMedia.Model.GetDASHStreamingSessionURLRequest.PlaybackMode">
            <summary>
            Gets and sets the property PlaybackMode. 
            <para>
            Whether to retrieve live, live replay, or archived, on-demand data.
            </para>
             
            <para>
            Features of the three types of sessions include the following:
            </para>
             <ul> <li> 
            <para>
             <b> <code>LIVE</code> </b>: For sessions of this type, the MPEG-DASH manifest is
            continually updated with the latest fragments as they become available. We recommend
            that the media player retrieve a new manifest on a one-second interval. When this
            type of session is played in a media player, the user interface typically displays
            a "live" notification, with no scrubber control for choosing the position in the playback
            window to display.
            </para>
             <note> 
            <para>
            In <code>LIVE</code> mode, the newest available fragments are included in an MPEG-DASH
            manifest, even if there is a gap between fragments (that is, if a fragment is missing).
            A gap like this might cause a media player to halt or cause a jump in playback. In
            this mode, fragments are not added to the MPEG-DASH manifest if they are older than
            the newest fragment in the playlist. If the missing fragment becomes available after
            a subsequent fragment is added to the manifest, the older fragment is not added, and
            the gap is not filled.
            </para>
             </note> </li> <li> 
            <para>
             <b> <code>LIVE_REPLAY</code> </b>: For sessions of this type, the MPEG-DASH manifest
            is updated similarly to how it is updated for <code>LIVE</code> mode except that it
            starts by including fragments from a given start time. Instead of fragments being
            added as they are ingested, fragments are added as the duration of the next fragment
            elapses. For example, if the fragments in the session are two seconds long, then a
            new fragment is added to the manifest every two seconds. This mode is useful to be
            able to start playback from when an event is detected and continue live streaming
            media that has not yet been ingested as of the time of the session creation. This
            mode is also useful to stream previously archived media without being limited by the
            1,000 fragment limit in the <code>ON_DEMAND</code> mode. 
            </para>
             </li> <li> 
            <para>
             <b> <code>ON_DEMAND</code> </b>: For sessions of this type, the MPEG-DASH manifest
            contains all the fragments for the session, up to the number that is specified in
            <code>MaxMediaPlaylistFragmentResults</code>. The manifest must be retrieved only
            once for each session. When this type of session is played in a media player, the
            user interface typically displays a scrubber control for choosing the position in
            the playback window to display.
            </para>
             </li> </ul> 
            <para>
            In all playback modes, if <code>FragmentSelectorType</code> is <code>PRODUCER_TIMESTAMP</code>,
            and if there are multiple fragments with the same start timestamp, the fragment that
            has the larger fragment number (that is, the newer fragment) is included in the MPEG-DASH
            manifest. The other fragments are not included. Fragments that have different timestamps
            but have overlapping durations are still included in the MPEG-DASH manifest. This
            can lead to unexpected behavior in the media player.
            </para>
             
            <para>
            The default is <code>LIVE</code>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KinesisVideoArchivedMedia.Model.GetDASHStreamingSessionURLRequest.StreamARN">
            <summary>
            Gets and sets the property StreamARN. 
            <para>
            The Amazon Resource Name (ARN) of the stream for which to retrieve the MPEG-DASH manifest
            URL.
            </para>
             
            <para>
            You must specify either the <code>StreamName</code> or the <code>StreamARN</code>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KinesisVideoArchivedMedia.Model.GetDASHStreamingSessionURLRequest.StreamName">
            <summary>
            Gets and sets the property StreamName. 
            <para>
            The name of the stream for which to retrieve the MPEG-DASH manifest URL.
            </para>
             
            <para>
            You must specify either the <code>StreamName</code> or the <code>StreamARN</code>.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KinesisVideoArchivedMedia.Model.GetDASHStreamingSessionURLResponse">
            <summary>
            This is the response object from the GetDASHStreamingSessionURL operation.
            </summary>
        </member>
        <member name="P:Amazon.KinesisVideoArchivedMedia.Model.GetDASHStreamingSessionURLResponse.DASHStreamingSessionURL">
            <summary>
            Gets and sets the property DASHStreamingSessionURL. 
            <para>
            The URL (containing the session token) that a media player can use to retrieve the
            MPEG-DASH manifest.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KinesisVideoArchivedMedia.Model.GetHLSStreamingSessionURLRequest">
            <summary>
            Container for the parameters to the GetHLSStreamingSessionURL operation.
            Retrieves an HTTP Live Streaming (HLS) URL for the stream. You can then open the URL
            in a browser or media player to view the stream contents.
            
             
            <para>
            Both the <code>StreamName</code> and the <code>StreamARN</code> parameters are optional,
            but you must specify either the <code>StreamName</code> or the <code>StreamARN</code>
            when invoking this API operation.
            </para>
             
            <para>
            An Amazon Kinesis video stream has the following requirements for providing data through
            HLS:
            </para>
             <ul> <li> 
            <para>
            The media must contain h.264 or h.265 encoded video and, optionally, AAC encoded audio.
            Specifically, the codec id of track 1 should be <code>V_MPEG/ISO/AVC</code> (for h.264)
            or <code>V_MPEG/ISO/HEVC</code> (for h.265). Optionally, the codec id of track 2 should
            be <code>A_AAC</code>.
            </para>
             </li> <li> 
            <para>
            Data retention must be greater than 0.
            </para>
             </li> <li> 
            <para>
            The video track of each fragment must contain codec private data in the Advanced Video
            Coding (AVC) for H.264 format or HEVC for H.265 format (<a href="https://www.iso.org/standard/55980.html">MPEG-4
            specification ISO/IEC 14496-15</a>). For information about adapting stream data to
            a given format, see <a href="http://docs.aws.amazon.com/kinesisvideostreams/latest/dg/producer-reference-nal.html">NAL
            Adaptation Flags</a>.
            </para>
             </li> <li> 
            <para>
            The audio track (if present) of each fragment must contain codec private data in the
            AAC format (<a href="https://www.iso.org/standard/43345.html">AAC specification ISO/IEC
            13818-7</a>).
            </para>
             </li> </ul> 
            <para>
            Kinesis Video Streams HLS sessions contain fragments in the fragmented MPEG-4 form
            (also called fMP4 or CMAF) or the MPEG-2 form (also called TS chunks, which the HLS
            specification also supports). For more information about HLS fragment types, see the
            <a href="https://tools.ietf.org/html/draft-pantos-http-live-streaming-23">HLS specification</a>.
            </para>
             
            <para>
            The following procedure shows how to use HLS with Kinesis Video Streams:
            </para>
             <ol> <li> 
            <para>
            Get an endpoint using <a href="http://docs.aws.amazon.com/kinesisvideostreams/latest/dg/API_GetDataEndpoint.html">GetDataEndpoint</a>,
            specifying <code>GET_HLS_STREAMING_SESSION_URL</code> for the <code>APIName</code>
            parameter.
            </para>
             </li> <li> 
            <para>
            Retrieve the HLS URL using <code>GetHLSStreamingSessionURL</code>. Kinesis Video Streams
            creates an HLS streaming session to be used for accessing content in a stream using
            the HLS protocol. <code>GetHLSStreamingSessionURL</code> returns an authenticated
            URL (that includes an encrypted session token) for the session's HLS <i>master playlist</i>
            (the root resource needed for streaming with HLS).
            </para>
             <note> 
            <para>
            Don't share or store this token where an unauthorized entity could access it. The
            token provides access to the content of the stream. Safeguard the token with the same
            measures that you would use with your AWS credentials.
            </para>
             </note> 
            <para>
            The media that is made available through the playlist consists only of the requested
            stream, time range, and format. No other media data (such as frames outside the requested
            window or alternate bitrates) is made available.
            </para>
             </li> <li> 
            <para>
            Provide the URL (containing the encrypted session token) for the HLS master playlist
            to a media player that supports the HLS protocol. Kinesis Video Streams makes the
            HLS media playlist, initialization fragment, and media fragments available through
            the master playlist URL. The initialization fragment contains the codec private data
            for the stream, and other data needed to set up the video or audio decoder and renderer.
            The media fragments contain H.264-encoded video frames or AAC-encoded audio samples.
            </para>
             </li> <li> 
            <para>
            The media player receives the authenticated URL and requests stream metadata and media
            data normally. When the media player requests data, it calls the following actions:
            </para>
             <ul> <li> 
            <para>
             <b>GetHLSMasterPlaylist:</b> Retrieves an HLS master playlist, which contains a URL
            for the <code>GetHLSMediaPlaylist</code> action for each track, and additional metadata
            for the media player, including estimated bitrate and resolution.
            </para>
             </li> <li> 
            <para>
             <b>GetHLSMediaPlaylist:</b> Retrieves an HLS media playlist, which contains a URL
            to access the MP4 initialization fragment with the <code>GetMP4InitFragment</code>
            action, and URLs to access the MP4 media fragments with the <code>GetMP4MediaFragment</code>
            actions. The HLS media playlist also contains metadata about the stream that the player
            needs to play it, such as whether the <code>PlaybackMode</code> is <code>LIVE</code>
            or <code>ON_DEMAND</code>. The HLS media playlist is typically static for sessions
            with a <code>PlaybackType</code> of <code>ON_DEMAND</code>. The HLS media playlist
            is continually updated with new fragments for sessions with a <code>PlaybackType</code>
            of <code>LIVE</code>. There is a distinct HLS media playlist for the video track and
            the audio track (if applicable) that contains MP4 media URLs for the specific track.
            
            </para>
             </li> <li> 
            <para>
             <b>GetMP4InitFragment:</b> Retrieves the MP4 initialization fragment. The media player
            typically loads the initialization fragment before loading any media fragments. This
            fragment contains the "<code>fytp</code>" and "<code>moov</code>" MP4 atoms, and the
            child atoms that are needed to initialize the media player decoder.
            </para>
             
            <para>
            The initialization fragment does not correspond to a fragment in a Kinesis video stream.
            It contains only the codec private data for the stream and respective track, which
            the media player needs to decode the media frames.
            </para>
             </li> <li> 
            <para>
             <b>GetMP4MediaFragment:</b> Retrieves MP4 media fragments. These fragments contain
            the "<code>moof</code>" and "<code>mdat</code>" MP4 atoms and their child atoms, containing
            the encoded fragment's media frames and their timestamps. 
            </para>
             <note> 
            <para>
            After the first media fragment is made available in a streaming session, any fragments
            that don't contain the same codec private data cause an error to be returned when
            those different media fragments are loaded. Therefore, the codec private data should
            not change between fragments in a session. This also means that the session fails
            if the fragments in a stream change from having only video to having both audio and
            video.
            </para>
             </note> 
            <para>
            Data retrieved with this action is billable. See <a href="https://aws.amazon.com/kinesis/video-streams/pricing/">Pricing</a>
            for details.
            </para>
             </li> <li> 
            <para>
             <b>GetTSFragment:</b> Retrieves MPEG TS fragments containing both initialization
            and media data for all tracks in the stream.
            </para>
             <note> 
            <para>
            If the <code>ContainerFormat</code> is <code>MPEG_TS</code>, this API is used instead
            of <code>GetMP4InitFragment</code> and <code>GetMP4MediaFragment</code> to retrieve
            stream media.
            </para>
             </note> 
            <para>
            Data retrieved with this action is billable. For more information, see <a href="https://aws.amazon.com/kinesis/video-streams/pricing/">Kinesis
            Video Streams pricing</a>.
            </para>
             </li> </ul> </li> </ol> <note> 
            <para>
            The following restrictions apply to HLS sessions:
            </para>
             <ul> <li> 
            <para>
            A streaming session URL should not be shared between players. The service might throttle
            a session if multiple media players are sharing it. For connection limits, see <a
            href="http://docs.aws.amazon.com/kinesisvideostreams/latest/dg/limits.html">Kinesis
            Video Streams Limits</a>.
            </para>
             </li> <li> 
            <para>
            A Kinesis video stream can have a maximum of ten active HLS streaming sessions. If
            a new session is created when the maximum number of sessions is already active, the
            oldest (earliest created) session is closed. The number of active <code>GetMedia</code>
            connections on a Kinesis video stream does not count against this limit, and the number
            of active HLS sessions does not count against the active <code>GetMedia</code> connection
            limit.
            </para>
             <note> 
            <para>
            The maximum limits for active HLS and MPEG-DASH streaming sessions are independent
            of each other.
            </para>
             </note> </li> </ul> </note> 
            <para>
            You can monitor the amount of data that the media player consumes by monitoring the
            <code>GetMP4MediaFragment.OutgoingBytes</code> Amazon CloudWatch metric. For information
            about using CloudWatch to monitor Kinesis Video Streams, see <a href="http://docs.aws.amazon.com/kinesisvideostreams/latest/dg/monitoring.html">Monitoring
            Kinesis Video Streams</a>. For pricing information, see <a href="https://aws.amazon.com/kinesis/video-streams/pricing/">Amazon
            Kinesis Video Streams Pricing</a> and <a href="https://aws.amazon.com/pricing/">AWS
            Pricing</a>. Charges for both HLS sessions and outgoing AWS data apply.
            </para>
             
            <para>
            For more information about HLS, see <a href="https://developer.apple.com/streaming/">HTTP
            Live Streaming</a> on the <a href="https://developer.apple.com">Apple Developer site</a>.
            </para>
             <important> 
            <para>
            If an error is thrown after invoking a Kinesis Video Streams archived media API, in
            addition to the HTTP status code and the response body, it includes the following
            pieces of information: 
            </para>
             <ul> <li> 
            <para>
             <code>x-amz-ErrorType</code> HTTP header – contains a more specific error type in
            addition to what the HTTP status code provides. 
            </para>
             </li> <li> 
            <para>
             <code>x-amz-RequestId</code> HTTP header – if you want to report an issue to AWS,
            the support team can better diagnose the problem if given the Request Id.
            </para>
             </li> </ul> 
            <para>
            Both the HTTP status code and the ErrorType header can be utilized to make programmatic
            decisions about whether errors are retry-able and under what conditions, as well as
            provide information on what actions the client programmer might need to take in order
            to successfully try again.
            </para>
             
            <para>
            For more information, see the <b>Errors</b> section at the bottom of this topic, as
            well as <a href="https://docs.aws.amazon.com/kinesisvideostreams/latest/dg/CommonErrors.html">Common
            Errors</a>. 
            </para>
             </important>
            </summary>
        </member>
        <member name="P:Amazon.KinesisVideoArchivedMedia.Model.GetHLSStreamingSessionURLRequest.ContainerFormat">
            <summary>
            Gets and sets the property ContainerFormat. 
            <para>
            Specifies which format should be used for packaging the media. Specifying the <code>FRAGMENTED_MP4</code>
            container format packages the media into MP4 fragments (fMP4 or CMAF). This is the
            recommended packaging because there is minimal packaging overhead. The other container
            format option is <code>MPEG_TS</code>. HLS has supported MPEG TS chunks since it was
            released and is sometimes the only supported packaging on older HLS players. MPEG
            TS typically has a 5-25 percent packaging overhead. This means MPEG TS typically requires
            5-25 percent more bandwidth and cost than fMP4.
            </para>
             
            <para>
            The default is <code>FRAGMENTED_MP4</code>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KinesisVideoArchivedMedia.Model.GetHLSStreamingSessionURLRequest.DiscontinuityMode">
            <summary>
            Gets and sets the property DiscontinuityMode. 
            <para>
            Specifies when flags marking discontinuities between fragments will be added to the
            media playlists. The default is <code>ALWAYS</code> when <a>HLSFragmentSelector</a>
            is <code>SERVER_TIMESTAMP</code>, and <code>NEVER</code> when it is <code>PRODUCER_TIMESTAMP</code>.
            </para>
             
            <para>
            Media players typically build a timeline of media content to play, based on the timestamps
            of each fragment. This means that if there is any overlap between fragments (as is
            typical if <a>HLSFragmentSelector</a> is <code>SERVER_TIMESTAMP</code>), the media
            player timeline has small gaps between fragments in some places, and overwrites frames
            in other places. When there are discontinuity flags between fragments, the media player
            is expected to reset the timeline, resulting in the fragment being played immediately
            after the previous fragment. We recommend that you always have discontinuity flags
            between fragments if the fragment timestamps are not accurate or if fragments might
            be missing. You should not place discontinuity flags between fragments for the player
            timeline to accurately map to the producer timestamps.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KinesisVideoArchivedMedia.Model.GetHLSStreamingSessionURLRequest.DisplayFragmentTimestamp">
            <summary>
            Gets and sets the property DisplayFragmentTimestamp. 
            <para>
            Specifies when the fragment start timestamps should be included in the HLS media playlist.
            Typically, media players report the playhead position as a time relative to the start
            of the first fragment in the playback session. However, when the start timestamps
            are included in the HLS media playlist, some media players might report the current
            playhead as an absolute time based on the fragment timestamps. This can be useful
            for creating a playback experience that shows viewers the wall-clock time of the media.
            </para>
             
            <para>
            The default is <code>NEVER</code>. When <a>HLSFragmentSelector</a> is <code>SERVER_TIMESTAMP</code>,
            the timestamps will be the server start timestamps. Similarly, when <a>HLSFragmentSelector</a>
            is <code>PRODUCER_TIMESTAMP</code>, the timestamps will be the producer start timestamps.
            
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KinesisVideoArchivedMedia.Model.GetHLSStreamingSessionURLRequest.Expires">
            <summary>
            Gets and sets the property Expires. 
            <para>
            The time in seconds until the requested session expires. This value can be between
            300 (5 minutes) and 43200 (12 hours).
            </para>
             
            <para>
            When a session expires, no new calls to <code>GetHLSMasterPlaylist</code>, <code>GetHLSMediaPlaylist</code>,
            <code>GetMP4InitFragment</code>, <code>GetMP4MediaFragment</code>, or <code>GetTSFragment</code>
            can be made for that session.
            </para>
             
            <para>
            The default is 300 (5 minutes).
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KinesisVideoArchivedMedia.Model.GetHLSStreamingSessionURLRequest.HLSFragmentSelector">
            <summary>
            Gets and sets the property HLSFragmentSelector. 
            <para>
            The time range of the requested fragment, and the source of the timestamps.
            </para>
             
            <para>
            This parameter is required if <code>PlaybackMode</code> is <code>ON_DEMAND</code>
            or <code>LIVE_REPLAY</code>. This parameter is optional if PlaybackMode is<code/>
            <code>LIVE</code>. If <code>PlaybackMode</code> is <code>LIVE</code>, the <code>FragmentSelectorType</code>
            can be set, but the <code>TimestampRange</code> should not be set. If <code>PlaybackMode</code>
            is <code>ON_DEMAND</code> or <code>LIVE_REPLAY</code>, both <code>FragmentSelectorType</code>
            and <code>TimestampRange</code> must be set.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KinesisVideoArchivedMedia.Model.GetHLSStreamingSessionURLRequest.MaxMediaPlaylistFragmentResults">
            <summary>
            Gets and sets the property MaxMediaPlaylistFragmentResults. 
            <para>
            The maximum number of fragments that are returned in the HLS media playlists.
            </para>
             
            <para>
            When the <code>PlaybackMode</code> is <code>LIVE</code>, the most recent fragments
            are returned up to this value. When the <code>PlaybackMode</code> is <code>ON_DEMAND</code>,
            the oldest fragments are returned, up to this maximum number.
            </para>
             
            <para>
            When there are a higher number of fragments available in a live HLS media playlist,
            video players often buffer content before starting playback. Increasing the buffer
            size increases the playback latency, but it decreases the likelihood that rebuffering
            will occur during playback. We recommend that a live HLS media playlist have a minimum
            of 3 fragments and a maximum of 10 fragments.
            </para>
             
            <para>
            The default is 5 fragments if <code>PlaybackMode</code> is <code>LIVE</code> or <code>LIVE_REPLAY</code>,
            and 1,000 if <code>PlaybackMode</code> is <code>ON_DEMAND</code>. 
            </para>
             
            <para>
            The maximum value of 1,000 fragments corresponds to more than 16 minutes of video
            on streams with 1-second fragments, and more than 2 1/2 hours of video on streams
            with 10-second fragments.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KinesisVideoArchivedMedia.Model.GetHLSStreamingSessionURLRequest.PlaybackMode">
            <summary>
            Gets and sets the property PlaybackMode. 
            <para>
            Whether to retrieve live, live replay, or archived, on-demand data.
            </para>
             
            <para>
            Features of the three types of sessions include the following:
            </para>
             <ul> <li> 
            <para>
             <b> <code>LIVE</code> </b>: For sessions of this type, the HLS media playlist is
            continually updated with the latest fragments as they become available. We recommend
            that the media player retrieve a new playlist on a one-second interval. When this
            type of session is played in a media player, the user interface typically displays
            a "live" notification, with no scrubber control for choosing the position in the playback
            window to display.
            </para>
             <note> 
            <para>
            In <code>LIVE</code> mode, the newest available fragments are included in an HLS media
            playlist, even if there is a gap between fragments (that is, if a fragment is missing).
            A gap like this might cause a media player to halt or cause a jump in playback. In
            this mode, fragments are not added to the HLS media playlist if they are older than
            the newest fragment in the playlist. If the missing fragment becomes available after
            a subsequent fragment is added to the playlist, the older fragment is not added, and
            the gap is not filled.
            </para>
             </note> </li> <li> 
            <para>
             <b> <code>LIVE_REPLAY</code> </b>: For sessions of this type, the HLS media playlist
            is updated similarly to how it is updated for <code>LIVE</code> mode except that it
            starts by including fragments from a given start time. Instead of fragments being
            added as they are ingested, fragments are added as the duration of the next fragment
            elapses. For example, if the fragments in the session are two seconds long, then a
            new fragment is added to the media playlist every two seconds. This mode is useful
            to be able to start playback from when an event is detected and continue live streaming
            media that has not yet been ingested as of the time of the session creation. This
            mode is also useful to stream previously archived media without being limited by the
            1,000 fragment limit in the <code>ON_DEMAND</code> mode. 
            </para>
             </li> <li> 
            <para>
             <b> <code>ON_DEMAND</code> </b>: For sessions of this type, the HLS media playlist
            contains all the fragments for the session, up to the number that is specified in
            <code>MaxMediaPlaylistFragmentResults</code>. The playlist must be retrieved only
            once for each session. When this type of session is played in a media player, the
            user interface typically displays a scrubber control for choosing the position in
            the playback window to display.
            </para>
             </li> </ul> 
            <para>
            In all playback modes, if <code>FragmentSelectorType</code> is <code>PRODUCER_TIMESTAMP</code>,
            and if there are multiple fragments with the same start timestamp, the fragment that
            has the larger fragment number (that is, the newer fragment) is included in the HLS
            media playlist. The other fragments are not included. Fragments that have different
            timestamps but have overlapping durations are still included in the HLS media playlist.
            This can lead to unexpected behavior in the media player.
            </para>
             
            <para>
            The default is <code>LIVE</code>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KinesisVideoArchivedMedia.Model.GetHLSStreamingSessionURLRequest.StreamARN">
            <summary>
            Gets and sets the property StreamARN. 
            <para>
            The Amazon Resource Name (ARN) of the stream for which to retrieve the HLS master
            playlist URL.
            </para>
             
            <para>
            You must specify either the <code>StreamName</code> or the <code>StreamARN</code>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KinesisVideoArchivedMedia.Model.GetHLSStreamingSessionURLRequest.StreamName">
            <summary>
            Gets and sets the property StreamName. 
            <para>
            The name of the stream for which to retrieve the HLS master playlist URL.
            </para>
             
            <para>
            You must specify either the <code>StreamName</code> or the <code>StreamARN</code>.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KinesisVideoArchivedMedia.Model.GetHLSStreamingSessionURLResponse">
            <summary>
            This is the response object from the GetHLSStreamingSessionURL operation.
            </summary>
        </member>
        <member name="P:Amazon.KinesisVideoArchivedMedia.Model.GetHLSStreamingSessionURLResponse.HLSStreamingSessionURL">
            <summary>
            Gets and sets the property HLSStreamingSessionURL. 
            <para>
            The URL (containing the session token) that a media player can use to retrieve the
            HLS master playlist.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KinesisVideoArchivedMedia.Model.GetMediaForFragmentListRequest">
            <summary>
            Container for the parameters to the GetMediaForFragmentList operation.
            Gets media for a list of fragments (specified by fragment number) from the archived
            data in an Amazon Kinesis video stream.
            
             <note> 
            <para>
            You must first call the <code>GetDataEndpoint</code> API to get an endpoint. Then
            send the <code>GetMediaForFragmentList</code> requests to this endpoint using the
            <a href="https://docs.aws.amazon.com/cli/latest/reference/">--endpoint-url parameter</a>.
            
            </para>
             </note> 
            <para>
            The following limits apply when using the <code>GetMediaForFragmentList</code> API:
            </para>
             <ul> <li> 
            <para>
            A client can call <code>GetMediaForFragmentList</code> up to five times per second
            per stream. 
            </para>
             </li> <li> 
            <para>
            Kinesis Video Streams sends media data at a rate of up to 25 megabytes per second
            (or 200 megabits per second) during a <code>GetMediaForFragmentList</code> session.
            
            </para>
             </li> </ul> <important> 
            <para>
            If an error is thrown after invoking a Kinesis Video Streams archived media API, in
            addition to the HTTP status code and the response body, it includes the following
            pieces of information: 
            </para>
             <ul> <li> 
            <para>
             <code>x-amz-ErrorType</code> HTTP header – contains a more specific error type in
            addition to what the HTTP status code provides. 
            </para>
             </li> <li> 
            <para>
             <code>x-amz-RequestId</code> HTTP header – if you want to report an issue to AWS,
            the support team can better diagnose the problem if given the Request Id.
            </para>
             </li> </ul> 
            <para>
            Both the HTTP status code and the ErrorType header can be utilized to make programmatic
            decisions about whether errors are retry-able and under what conditions, as well as
            provide information on what actions the client programmer might need to take in order
            to successfully try again.
            </para>
             
            <para>
            For more information, see the <b>Errors</b> section at the bottom of this topic, as
            well as <a href="https://docs.aws.amazon.com/kinesisvideostreams/latest/dg/CommonErrors.html">Common
            Errors</a>. 
            </para>
             </important>
            </summary>
        </member>
        <member name="P:Amazon.KinesisVideoArchivedMedia.Model.GetMediaForFragmentListRequest.Fragments">
            <summary>
            Gets and sets the property Fragments. 
            <para>
            A list of the numbers of fragments for which to retrieve media. You retrieve these
            values with <a>ListFragments</a>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KinesisVideoArchivedMedia.Model.GetMediaForFragmentListRequest.StreamName">
            <summary>
            Gets and sets the property StreamName. 
            <para>
            The name of the stream from which to retrieve fragment media.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KinesisVideoArchivedMedia.Model.GetMediaForFragmentListResponse">
            <summary>
            This is the response object from the GetMediaForFragmentList operation.
            </summary>
        </member>
        <member name="P:Amazon.KinesisVideoArchivedMedia.Model.GetMediaForFragmentListResponse.ContentType">
            <summary>
            Gets and sets the property ContentType. 
            <para>
            The content type of the requested media.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KinesisVideoArchivedMedia.Model.GetMediaForFragmentListResponse.Payload">
            <summary>
            Gets and sets the property Payload. 
            <para>
            The payload that Kinesis Video Streams returns is a sequence of chunks from the specified
            stream. For information about the chunks, see <a href="http://docs.aws.amazon.com/kinesisvideostreams/latest/dg/API_dataplane_PutMedia.html">PutMedia</a>.
            The chunks that Kinesis Video Streams returns in the <code>GetMediaForFragmentList</code>
            call also include the following additional Matroska (MKV) tags: 
            </para>
             <ul> <li> 
            <para>
            AWS_KINESISVIDEO_FRAGMENT_NUMBER - Fragment number returned in the chunk.
            </para>
             </li> <li> 
            <para>
            AWS_KINESISVIDEO_SERVER_SIDE_TIMESTAMP - Server-side timestamp of the fragment.
            </para>
             </li> <li> 
            <para>
            AWS_KINESISVIDEO_PRODUCER_SIDE_TIMESTAMP - Producer-side timestamp of the fragment.
            </para>
             </li> </ul> 
            <para>
            The following tags will be included if an exception occurs:
            </para>
             <ul> <li> 
            <para>
            AWS_KINESISVIDEO_FRAGMENT_NUMBER - The number of the fragment that threw the exception
            </para>
             </li> <li> 
            <para>
            AWS_KINESISVIDEO_EXCEPTION_ERROR_CODE - The integer code of the exception
            </para>
             </li> <li> 
            <para>
            AWS_KINESISVIDEO_EXCEPTION_MESSAGE - A text description of the exception
            </para>
             </li> </ul>
            </summary>
        </member>
        <member name="T:Amazon.KinesisVideoArchivedMedia.Model.HLSFragmentSelector">
            <summary>
            Contains the range of timestamps for the requested media, and the source of the timestamps.
            </summary>
        </member>
        <member name="P:Amazon.KinesisVideoArchivedMedia.Model.HLSFragmentSelector.FragmentSelectorType">
            <summary>
            Gets and sets the property FragmentSelectorType. 
            <para>
            The source of the timestamps for the requested media.
            </para>
             
            <para>
            When <code>FragmentSelectorType</code> is set to <code>PRODUCER_TIMESTAMP</code> and
            <a>GetHLSStreamingSessionURLInput$PlaybackMode</a> is <code>ON_DEMAND</code> or <code>LIVE_REPLAY</code>,
            the first fragment ingested with a producer timestamp within the specified <a>FragmentSelector$TimestampRange</a>
            is included in the media playlist. In addition, the fragments with producer timestamps
            within the <code>TimestampRange</code> ingested immediately following the first fragment
            (up to the <a>GetHLSStreamingSessionURLInput$MaxMediaPlaylistFragmentResults</a> value)
            are included. 
            </para>
             
            <para>
            Fragments that have duplicate producer timestamps are deduplicated. This means that
            if producers are producing a stream of fragments with producer timestamps that are
            approximately equal to the true clock time, the HLS media playlists will contain all
            of the fragments within the requested timestamp range. If some fragments are ingested
            within the same time range and very different points in time, only the oldest ingested
            collection of fragments are returned.
            </para>
             
            <para>
            When <code>FragmentSelectorType</code> is set to <code>PRODUCER_TIMESTAMP</code> and
            <a>GetHLSStreamingSessionURLInput$PlaybackMode</a> is <code>LIVE</code>, the producer
            timestamps are used in the MP4 fragments and for deduplication. But the most recently
            ingested fragments based on server timestamps are included in the HLS media playlist.
            This means that even if fragments ingested in the past have producer timestamps with
            values now, they are not included in the HLS media playlist.
            </para>
             
            <para>
            The default is <code>SERVER_TIMESTAMP</code>.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KinesisVideoArchivedMedia.Model.HLSFragmentSelector.TimestampRange">
            <summary>
            Gets and sets the property TimestampRange. 
            <para>
            The start and end of the timestamp range for the requested media.
            </para>
             
            <para>
            This value should not be present if <code>PlaybackType</code> is <code>LIVE</code>.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KinesisVideoArchivedMedia.Model.HLSTimestampRange">
            <summary>
            The start and end of the timestamp range for the requested media.
            
             
            <para>
            This value should not be present if <code>PlaybackType</code> is <code>LIVE</code>.
            </para>
             <note> 
            <para>
            The values in the <code>HLSTimestampRange</code> are inclusive. Fragments that begin
            before the start time but continue past it, or fragments that begin before the end
            time but continue past it, are included in the session.
            </para>
             </note>
            </summary>
        </member>
        <member name="P:Amazon.KinesisVideoArchivedMedia.Model.HLSTimestampRange.EndTimestamp">
            <summary>
            Gets and sets the property EndTimestamp. 
            <para>
            The end of the timestamp range for the requested media. This value must be within
            3 hours of the specified <code>StartTimestamp</code>, and it must be later than the
            <code>StartTimestamp</code> value.
            </para>
             
            <para>
            If <code>FragmentSelectorType</code> for the request is <code>SERVER_TIMESTAMP</code>,
            this value must be in the past.
            </para>
             
            <para>
            The <code>EndTimestamp</code> value is required for <code>ON_DEMAND</code> mode, but
            optional for <code>LIVE_REPLAY</code> mode. If the <code>EndTimestamp</code> is not
            set for <code>LIVE_REPLAY</code> mode then the session will continue to include newly
            ingested fragments until the session expires.
            </para>
             <note> 
            <para>
            This value is inclusive. The <code>EndTimestamp</code> is compared to the (starting)
            timestamp of the fragment. Fragments that start before the <code>EndTimestamp</code>
            value and continue past it are included in the session.
            </para>
             </note>
            </summary>
        </member>
        <member name="P:Amazon.KinesisVideoArchivedMedia.Model.HLSTimestampRange.StartTimestamp">
            <summary>
            Gets and sets the property StartTimestamp. 
            <para>
            The start of the timestamp range for the requested media.
            </para>
             
            <para>
            If the <code>HLSTimestampRange</code> value is specified, the <code>StartTimestamp</code>
            value is required.
            </para>
             <note> 
            <para>
            This value is inclusive. Fragments that start before the <code>StartTimestamp</code>
            and continue past it are included in the session. If <code>FragmentSelectorType</code>
            is <code>SERVER_TIMESTAMP</code>, the <code>StartTimestamp</code> must be later than
            the stream head.
            </para>
             </note>
            </summary>
        </member>
        <member name="T:Amazon.KinesisVideoArchivedMedia.Model.Internal.MarshallTransformations.DASHFragmentSelectorMarshaller">
            <summary>
            DASHFragmentSelector Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.Model.Internal.MarshallTransformations.DASHFragmentSelectorMarshaller.Marshall(Amazon.KinesisVideoArchivedMedia.Model.DASHFragmentSelector,Amazon.Runtime.Internal.Transform.JsonMarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="requestObject"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="F:Amazon.KinesisVideoArchivedMedia.Model.Internal.MarshallTransformations.DASHFragmentSelectorMarshaller.Instance">
            <summary>
            Singleton Marshaller.
            </summary>  
        </member>
        <member name="T:Amazon.KinesisVideoArchivedMedia.Model.Internal.MarshallTransformations.DASHTimestampRangeMarshaller">
            <summary>
            DASHTimestampRange Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.Model.Internal.MarshallTransformations.DASHTimestampRangeMarshaller.Marshall(Amazon.KinesisVideoArchivedMedia.Model.DASHTimestampRange,Amazon.Runtime.Internal.Transform.JsonMarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="requestObject"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="F:Amazon.KinesisVideoArchivedMedia.Model.Internal.MarshallTransformations.DASHTimestampRangeMarshaller.Instance">
            <summary>
            Singleton Marshaller.
            </summary>  
        </member>
        <member name="T:Amazon.KinesisVideoArchivedMedia.Model.Internal.MarshallTransformations.FragmentSelectorMarshaller">
            <summary>
            FragmentSelector Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.Model.Internal.MarshallTransformations.FragmentSelectorMarshaller.Marshall(Amazon.KinesisVideoArchivedMedia.Model.FragmentSelector,Amazon.Runtime.Internal.Transform.JsonMarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="requestObject"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="F:Amazon.KinesisVideoArchivedMedia.Model.Internal.MarshallTransformations.FragmentSelectorMarshaller.Instance">
            <summary>
            Singleton Marshaller.
            </summary>  
        </member>
        <member name="T:Amazon.KinesisVideoArchivedMedia.Model.Internal.MarshallTransformations.FragmentUnmarshaller">
            <summary>
            Response Unmarshaller for Fragment Object
            </summary>  
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.Model.Internal.MarshallTransformations.FragmentUnmarshaller.Amazon#Runtime#Internal#Transform#IUnmarshaller{Amazon#KinesisVideoArchivedMedia#Model#Fragment,Amazon#Runtime#Internal#Transform#XmlUnmarshallerContext}#Unmarshall(Amazon.Runtime.Internal.Transform.XmlUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.Model.Internal.MarshallTransformations.FragmentUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KinesisVideoArchivedMedia.Model.Internal.MarshallTransformations.FragmentUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KinesisVideoArchivedMedia.Model.Internal.MarshallTransformations.GetDASHStreamingSessionURLRequestMarshaller">
            <summary>
            GetDASHStreamingSessionURL Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.Model.Internal.MarshallTransformations.GetDASHStreamingSessionURLRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.Model.Internal.MarshallTransformations.GetDASHStreamingSessionURLRequestMarshaller.Marshall(Amazon.KinesisVideoArchivedMedia.Model.GetDASHStreamingSessionURLRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KinesisVideoArchivedMedia.Model.Internal.MarshallTransformations.GetDASHStreamingSessionURLRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KinesisVideoArchivedMedia.Model.Internal.MarshallTransformations.GetDASHStreamingSessionURLResponseUnmarshaller">
            <summary>
            Response Unmarshaller for GetDASHStreamingSessionURL operation
            </summary>  
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.Model.Internal.MarshallTransformations.GetDASHStreamingSessionURLResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.Model.Internal.MarshallTransformations.GetDASHStreamingSessionURLResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KinesisVideoArchivedMedia.Model.Internal.MarshallTransformations.GetDASHStreamingSessionURLResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KinesisVideoArchivedMedia.Model.Internal.MarshallTransformations.GetHLSStreamingSessionURLRequestMarshaller">
            <summary>
            GetHLSStreamingSessionURL Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.Model.Internal.MarshallTransformations.GetHLSStreamingSessionURLRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.Model.Internal.MarshallTransformations.GetHLSStreamingSessionURLRequestMarshaller.Marshall(Amazon.KinesisVideoArchivedMedia.Model.GetHLSStreamingSessionURLRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KinesisVideoArchivedMedia.Model.Internal.MarshallTransformations.GetHLSStreamingSessionURLRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KinesisVideoArchivedMedia.Model.Internal.MarshallTransformations.GetHLSStreamingSessionURLResponseUnmarshaller">
            <summary>
            Response Unmarshaller for GetHLSStreamingSessionURL operation
            </summary>  
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.Model.Internal.MarshallTransformations.GetHLSStreamingSessionURLResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.Model.Internal.MarshallTransformations.GetHLSStreamingSessionURLResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KinesisVideoArchivedMedia.Model.Internal.MarshallTransformations.GetHLSStreamingSessionURLResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KinesisVideoArchivedMedia.Model.Internal.MarshallTransformations.GetMediaForFragmentListRequestMarshaller">
            <summary>
            GetMediaForFragmentList Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.Model.Internal.MarshallTransformations.GetMediaForFragmentListRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.Model.Internal.MarshallTransformations.GetMediaForFragmentListRequestMarshaller.Marshall(Amazon.KinesisVideoArchivedMedia.Model.GetMediaForFragmentListRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KinesisVideoArchivedMedia.Model.Internal.MarshallTransformations.GetMediaForFragmentListRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KinesisVideoArchivedMedia.Model.Internal.MarshallTransformations.GetMediaForFragmentListResponseUnmarshaller">
            <summary>
            Response Unmarshaller for GetMediaForFragmentList operation
            </summary>  
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.Model.Internal.MarshallTransformations.GetMediaForFragmentListResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.Model.Internal.MarshallTransformations.GetMediaForFragmentListResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KinesisVideoArchivedMedia.Model.Internal.MarshallTransformations.GetMediaForFragmentListResponseUnmarshaller.HasStreamingProperty">
            <summary>
            Overriden to return true indicating the response contains streaming data.
            </summary>
        </member>
        <member name="P:Amazon.KinesisVideoArchivedMedia.Model.Internal.MarshallTransformations.GetMediaForFragmentListResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KinesisVideoArchivedMedia.Model.Internal.MarshallTransformations.HLSFragmentSelectorMarshaller">
            <summary>
            HLSFragmentSelector Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.Model.Internal.MarshallTransformations.HLSFragmentSelectorMarshaller.Marshall(Amazon.KinesisVideoArchivedMedia.Model.HLSFragmentSelector,Amazon.Runtime.Internal.Transform.JsonMarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="requestObject"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="F:Amazon.KinesisVideoArchivedMedia.Model.Internal.MarshallTransformations.HLSFragmentSelectorMarshaller.Instance">
            <summary>
            Singleton Marshaller.
            </summary>  
        </member>
        <member name="T:Amazon.KinesisVideoArchivedMedia.Model.Internal.MarshallTransformations.HLSTimestampRangeMarshaller">
            <summary>
            HLSTimestampRange Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.Model.Internal.MarshallTransformations.HLSTimestampRangeMarshaller.Marshall(Amazon.KinesisVideoArchivedMedia.Model.HLSTimestampRange,Amazon.Runtime.Internal.Transform.JsonMarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="requestObject"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="F:Amazon.KinesisVideoArchivedMedia.Model.Internal.MarshallTransformations.HLSTimestampRangeMarshaller.Instance">
            <summary>
            Singleton Marshaller.
            </summary>  
        </member>
        <member name="T:Amazon.KinesisVideoArchivedMedia.Model.Internal.MarshallTransformations.ListFragmentsRequestMarshaller">
            <summary>
            ListFragments Request Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.Model.Internal.MarshallTransformations.ListFragmentsRequestMarshaller.Marshall(Amazon.Runtime.AmazonWebServiceRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.Model.Internal.MarshallTransformations.ListFragmentsRequestMarshaller.Marshall(Amazon.KinesisVideoArchivedMedia.Model.ListFragmentsRequest)">
            <summary>
            Marshaller the request object to the HTTP request.
            </summary>  
            <param name="publicRequest"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KinesisVideoArchivedMedia.Model.Internal.MarshallTransformations.ListFragmentsRequestMarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KinesisVideoArchivedMedia.Model.Internal.MarshallTransformations.ListFragmentsResponseUnmarshaller">
            <summary>
            Response Unmarshaller for ListFragments operation
            </summary>  
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.Model.Internal.MarshallTransformations.ListFragmentsResponseUnmarshaller.Unmarshall(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.Model.Internal.MarshallTransformations.ListFragmentsResponseUnmarshaller.UnmarshallException(Amazon.Runtime.Internal.Transform.JsonUnmarshallerContext,System.Exception,System.Net.HttpStatusCode)">
            <summary>
            Unmarshaller error response to exception.
            </summary>  
            <param name="context"></param>
            <param name="innerException"></param>
            <param name="statusCode"></param>
            <returns></returns>
        </member>
        <member name="P:Amazon.KinesisVideoArchivedMedia.Model.Internal.MarshallTransformations.ListFragmentsResponseUnmarshaller.Instance">
            <summary>
            Gets the singleton.
            </summary>  
        </member>
        <member name="T:Amazon.KinesisVideoArchivedMedia.Model.Internal.MarshallTransformations.TimestampRangeMarshaller">
            <summary>
            TimestampRange Marshaller
            </summary>       
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.Model.Internal.MarshallTransformations.TimestampRangeMarshaller.Marshall(Amazon.KinesisVideoArchivedMedia.Model.TimestampRange,Amazon.Runtime.Internal.Transform.JsonMarshallerContext)">
            <summary>
            Unmarshaller the response from the service to the response class.
            </summary>  
            <param name="requestObject"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="F:Amazon.KinesisVideoArchivedMedia.Model.Internal.MarshallTransformations.TimestampRangeMarshaller.Instance">
            <summary>
            Singleton Marshaller.
            </summary>  
        </member>
        <member name="T:Amazon.KinesisVideoArchivedMedia.Model.InvalidArgumentException">
            <summary>
             KinesisVideoArchivedMedia exception
             </summary>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.Model.InvalidArgumentException.#ctor(System.String)">
            <summary>
            Constructs a new InvalidArgumentException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.Model.InvalidArgumentException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of InvalidArgumentException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.Model.InvalidArgumentException.#ctor(System.Exception)">
            <summary>
            Construct instance of InvalidArgumentException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.Model.InvalidArgumentException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of InvalidArgumentException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.Model.InvalidArgumentException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of InvalidArgumentException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.KinesisVideoArchivedMedia.Model.InvalidCodecPrivateDataException">
            <summary>
             KinesisVideoArchivedMedia exception
             </summary>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.Model.InvalidCodecPrivateDataException.#ctor(System.String)">
            <summary>
            Constructs a new InvalidCodecPrivateDataException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.Model.InvalidCodecPrivateDataException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of InvalidCodecPrivateDataException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.Model.InvalidCodecPrivateDataException.#ctor(System.Exception)">
            <summary>
            Construct instance of InvalidCodecPrivateDataException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.Model.InvalidCodecPrivateDataException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of InvalidCodecPrivateDataException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.Model.InvalidCodecPrivateDataException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of InvalidCodecPrivateDataException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.KinesisVideoArchivedMedia.Model.ListFragmentsRequest">
            <summary>
            Container for the parameters to the ListFragments operation.
            Returns a list of <a>Fragment</a> objects from the specified stream and timestamp
            range within the archived data.
            
             
            <para>
            Listing fragments is eventually consistent. This means that even if the producer receives
            an acknowledgment that a fragment is persisted, the result might not be returned immediately
            from a request to <code>ListFragments</code>. However, results are typically available
            in less than one second.
            </para>
             <note> 
            <para>
            You must first call the <code>GetDataEndpoint</code> API to get an endpoint. Then
            send the <code>ListFragments</code> requests to this endpoint using the <a href="https://docs.aws.amazon.com/cli/latest/reference/">--endpoint-url
            parameter</a>. 
            </para>
             </note> <important> 
            <para>
            If an error is thrown after invoking a Kinesis Video Streams archived media API, in
            addition to the HTTP status code and the response body, it includes the following
            pieces of information: 
            </para>
             <ul> <li> 
            <para>
             <code>x-amz-ErrorType</code> HTTP header – contains a more specific error type in
            addition to what the HTTP status code provides. 
            </para>
             </li> <li> 
            <para>
             <code>x-amz-RequestId</code> HTTP header – if you want to report an issue to AWS,
            the support team can better diagnose the problem if given the Request Id.
            </para>
             </li> </ul> 
            <para>
            Both the HTTP status code and the ErrorType header can be utilized to make programmatic
            decisions about whether errors are retry-able and under what conditions, as well as
            provide information on what actions the client programmer might need to take in order
            to successfully try again.
            </para>
             
            <para>
            For more information, see the <b>Errors</b> section at the bottom of this topic, as
            well as <a href="https://docs.aws.amazon.com/kinesisvideostreams/latest/dg/CommonErrors.html">Common
            Errors</a>. 
            </para>
             </important>
            </summary>
        </member>
        <member name="P:Amazon.KinesisVideoArchivedMedia.Model.ListFragmentsRequest.FragmentSelector">
            <summary>
            Gets and sets the property FragmentSelector. 
            <para>
            Describes the timestamp range and timestamp origin for the range of fragments to return.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KinesisVideoArchivedMedia.Model.ListFragmentsRequest.MaxResults">
            <summary>
            Gets and sets the property MaxResults. 
            <para>
            The total number of fragments to return. If the total number of fragments available
            is more than the value specified in <code>max-results</code>, then a <a>ListFragmentsOutput$NextToken</a>
            is provided in the output that you can use to resume pagination.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KinesisVideoArchivedMedia.Model.ListFragmentsRequest.NextToken">
            <summary>
            Gets and sets the property NextToken. 
            <para>
            A token to specify where to start paginating. This is the <a>ListFragmentsOutput$NextToken</a>
            from a previously truncated response.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KinesisVideoArchivedMedia.Model.ListFragmentsRequest.StreamName">
            <summary>
            Gets and sets the property StreamName. 
            <para>
            The name of the stream from which to retrieve a fragment list.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KinesisVideoArchivedMedia.Model.ListFragmentsResponse">
            <summary>
            This is the response object from the ListFragments operation.
            </summary>
        </member>
        <member name="P:Amazon.KinesisVideoArchivedMedia.Model.ListFragmentsResponse.Fragments">
            <summary>
            Gets and sets the property Fragments. 
            <para>
            A list of archived <a>Fragment</a> objects from the stream that meet the selector
            criteria. Results are in no specific order, even across pages.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KinesisVideoArchivedMedia.Model.ListFragmentsResponse.NextToken">
            <summary>
            Gets and sets the property NextToken. 
            <para>
            If the returned list is truncated, the operation returns this token to use to retrieve
            the next page of results. This value is <code>null</code> when there are no more results
            to return.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KinesisVideoArchivedMedia.Model.MissingCodecPrivateDataException">
            <summary>
             KinesisVideoArchivedMedia exception
             </summary>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.Model.MissingCodecPrivateDataException.#ctor(System.String)">
            <summary>
            Constructs a new MissingCodecPrivateDataException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.Model.MissingCodecPrivateDataException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of MissingCodecPrivateDataException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.Model.MissingCodecPrivateDataException.#ctor(System.Exception)">
            <summary>
            Construct instance of MissingCodecPrivateDataException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.Model.MissingCodecPrivateDataException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of MissingCodecPrivateDataException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.Model.MissingCodecPrivateDataException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of MissingCodecPrivateDataException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.KinesisVideoArchivedMedia.Model.NoDataRetentionException">
            <summary>
             KinesisVideoArchivedMedia exception
             </summary>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.Model.NoDataRetentionException.#ctor(System.String)">
            <summary>
            Constructs a new NoDataRetentionException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.Model.NoDataRetentionException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of NoDataRetentionException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.Model.NoDataRetentionException.#ctor(System.Exception)">
            <summary>
            Construct instance of NoDataRetentionException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.Model.NoDataRetentionException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of NoDataRetentionException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.Model.NoDataRetentionException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of NoDataRetentionException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.KinesisVideoArchivedMedia.Model.NotAuthorizedException">
            <summary>
             KinesisVideoArchivedMedia exception
             </summary>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.Model.NotAuthorizedException.#ctor(System.String)">
            <summary>
            Constructs a new NotAuthorizedException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.Model.NotAuthorizedException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of NotAuthorizedException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.Model.NotAuthorizedException.#ctor(System.Exception)">
            <summary>
            Construct instance of NotAuthorizedException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.Model.NotAuthorizedException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of NotAuthorizedException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.Model.NotAuthorizedException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of NotAuthorizedException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.KinesisVideoArchivedMedia.Model.ResourceNotFoundException">
            <summary>
             KinesisVideoArchivedMedia exception
             </summary>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.Model.ResourceNotFoundException.#ctor(System.String)">
            <summary>
            Constructs a new ResourceNotFoundException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.Model.ResourceNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of ResourceNotFoundException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.Model.ResourceNotFoundException.#ctor(System.Exception)">
            <summary>
            Construct instance of ResourceNotFoundException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.Model.ResourceNotFoundException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of ResourceNotFoundException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.Model.ResourceNotFoundException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of ResourceNotFoundException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.KinesisVideoArchivedMedia.Model.TimestampRange">
            <summary>
            The range of timestamps for which to return fragments.
            </summary>
        </member>
        <member name="P:Amazon.KinesisVideoArchivedMedia.Model.TimestampRange.EndTimestamp">
            <summary>
            Gets and sets the property EndTimestamp. 
            <para>
            The ending timestamp in the range of timestamps for which to return fragments.
            </para>
            </summary>
        </member>
        <member name="P:Amazon.KinesisVideoArchivedMedia.Model.TimestampRange.StartTimestamp">
            <summary>
            Gets and sets the property StartTimestamp. 
            <para>
            The starting timestamp in the range of timestamps for which to return fragments.
            </para>
            </summary>
        </member>
        <member name="T:Amazon.KinesisVideoArchivedMedia.Model.UnsupportedStreamMediaTypeException">
            <summary>
             KinesisVideoArchivedMedia exception
             </summary>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.Model.UnsupportedStreamMediaTypeException.#ctor(System.String)">
            <summary>
            Constructs a new UnsupportedStreamMediaTypeException with the specified error
            message.
            </summary>
            <param name="message">
            Describes the error encountered.
            </param>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.Model.UnsupportedStreamMediaTypeException.#ctor(System.String,System.Exception)">
            <summary>
            Construct instance of UnsupportedStreamMediaTypeException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.Model.UnsupportedStreamMediaTypeException.#ctor(System.Exception)">
            <summary>
            Construct instance of UnsupportedStreamMediaTypeException
            </summary>
            <param name="innerException"></param>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.Model.UnsupportedStreamMediaTypeException.#ctor(System.String,System.Exception,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of UnsupportedStreamMediaTypeException
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.Model.UnsupportedStreamMediaTypeException.#ctor(System.String,Amazon.Runtime.ErrorType,System.String,System.String,System.Net.HttpStatusCode)">
            <summary>
            Construct instance of UnsupportedStreamMediaTypeException
            </summary>
            <param name="message"></param>
            <param name="errorType"></param>
            <param name="errorCode"></param>
            <param name="requestId"></param>
            <param name="statusCode"></param>
        </member>
        <member name="T:Amazon.KinesisVideoArchivedMedia.ContainerFormat">
            <summary>
            Constants used for properties of type ContainerFormat.
            </summary>
        </member>
        <member name="F:Amazon.KinesisVideoArchivedMedia.ContainerFormat.FRAGMENTED_MP4">
            <summary>
            Constant FRAGMENTED_MP4 for ContainerFormat
            </summary>
        </member>
        <member name="F:Amazon.KinesisVideoArchivedMedia.ContainerFormat.MPEG_TS">
            <summary>
            Constant MPEG_TS for ContainerFormat
            </summary>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.ContainerFormat.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.ContainerFormat.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.ContainerFormat.op_Implicit(System.String)~Amazon.KinesisVideoArchivedMedia.ContainerFormat">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.KinesisVideoArchivedMedia.DASHDisplayFragmentNumber">
            <summary>
            Constants used for properties of type DASHDisplayFragmentNumber.
            </summary>
        </member>
        <member name="F:Amazon.KinesisVideoArchivedMedia.DASHDisplayFragmentNumber.ALWAYS">
            <summary>
            Constant ALWAYS for DASHDisplayFragmentNumber
            </summary>
        </member>
        <member name="F:Amazon.KinesisVideoArchivedMedia.DASHDisplayFragmentNumber.NEVER">
            <summary>
            Constant NEVER for DASHDisplayFragmentNumber
            </summary>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.DASHDisplayFragmentNumber.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.DASHDisplayFragmentNumber.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.DASHDisplayFragmentNumber.op_Implicit(System.String)~Amazon.KinesisVideoArchivedMedia.DASHDisplayFragmentNumber">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.KinesisVideoArchivedMedia.DASHDisplayFragmentTimestamp">
            <summary>
            Constants used for properties of type DASHDisplayFragmentTimestamp.
            </summary>
        </member>
        <member name="F:Amazon.KinesisVideoArchivedMedia.DASHDisplayFragmentTimestamp.ALWAYS">
            <summary>
            Constant ALWAYS for DASHDisplayFragmentTimestamp
            </summary>
        </member>
        <member name="F:Amazon.KinesisVideoArchivedMedia.DASHDisplayFragmentTimestamp.NEVER">
            <summary>
            Constant NEVER for DASHDisplayFragmentTimestamp
            </summary>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.DASHDisplayFragmentTimestamp.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.DASHDisplayFragmentTimestamp.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.DASHDisplayFragmentTimestamp.op_Implicit(System.String)~Amazon.KinesisVideoArchivedMedia.DASHDisplayFragmentTimestamp">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.KinesisVideoArchivedMedia.DASHFragmentSelectorType">
            <summary>
            Constants used for properties of type DASHFragmentSelectorType.
            </summary>
        </member>
        <member name="F:Amazon.KinesisVideoArchivedMedia.DASHFragmentSelectorType.PRODUCER_TIMESTAMP">
            <summary>
            Constant PRODUCER_TIMESTAMP for DASHFragmentSelectorType
            </summary>
        </member>
        <member name="F:Amazon.KinesisVideoArchivedMedia.DASHFragmentSelectorType.SERVER_TIMESTAMP">
            <summary>
            Constant SERVER_TIMESTAMP for DASHFragmentSelectorType
            </summary>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.DASHFragmentSelectorType.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.DASHFragmentSelectorType.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.DASHFragmentSelectorType.op_Implicit(System.String)~Amazon.KinesisVideoArchivedMedia.DASHFragmentSelectorType">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.KinesisVideoArchivedMedia.DASHPlaybackMode">
            <summary>
            Constants used for properties of type DASHPlaybackMode.
            </summary>
        </member>
        <member name="F:Amazon.KinesisVideoArchivedMedia.DASHPlaybackMode.LIVE">
            <summary>
            Constant LIVE for DASHPlaybackMode
            </summary>
        </member>
        <member name="F:Amazon.KinesisVideoArchivedMedia.DASHPlaybackMode.LIVE_REPLAY">
            <summary>
            Constant LIVE_REPLAY for DASHPlaybackMode
            </summary>
        </member>
        <member name="F:Amazon.KinesisVideoArchivedMedia.DASHPlaybackMode.ON_DEMAND">
            <summary>
            Constant ON_DEMAND for DASHPlaybackMode
            </summary>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.DASHPlaybackMode.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.DASHPlaybackMode.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.DASHPlaybackMode.op_Implicit(System.String)~Amazon.KinesisVideoArchivedMedia.DASHPlaybackMode">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.KinesisVideoArchivedMedia.FragmentSelectorType">
            <summary>
            Constants used for properties of type FragmentSelectorType.
            </summary>
        </member>
        <member name="F:Amazon.KinesisVideoArchivedMedia.FragmentSelectorType.PRODUCER_TIMESTAMP">
            <summary>
            Constant PRODUCER_TIMESTAMP for FragmentSelectorType
            </summary>
        </member>
        <member name="F:Amazon.KinesisVideoArchivedMedia.FragmentSelectorType.SERVER_TIMESTAMP">
            <summary>
            Constant SERVER_TIMESTAMP for FragmentSelectorType
            </summary>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.FragmentSelectorType.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.FragmentSelectorType.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.FragmentSelectorType.op_Implicit(System.String)~Amazon.KinesisVideoArchivedMedia.FragmentSelectorType">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.KinesisVideoArchivedMedia.HLSDiscontinuityMode">
            <summary>
            Constants used for properties of type HLSDiscontinuityMode.
            </summary>
        </member>
        <member name="F:Amazon.KinesisVideoArchivedMedia.HLSDiscontinuityMode.ALWAYS">
            <summary>
            Constant ALWAYS for HLSDiscontinuityMode
            </summary>
        </member>
        <member name="F:Amazon.KinesisVideoArchivedMedia.HLSDiscontinuityMode.NEVER">
            <summary>
            Constant NEVER for HLSDiscontinuityMode
            </summary>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.HLSDiscontinuityMode.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.HLSDiscontinuityMode.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.HLSDiscontinuityMode.op_Implicit(System.String)~Amazon.KinesisVideoArchivedMedia.HLSDiscontinuityMode">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.KinesisVideoArchivedMedia.HLSDisplayFragmentTimestamp">
            <summary>
            Constants used for properties of type HLSDisplayFragmentTimestamp.
            </summary>
        </member>
        <member name="F:Amazon.KinesisVideoArchivedMedia.HLSDisplayFragmentTimestamp.ALWAYS">
            <summary>
            Constant ALWAYS for HLSDisplayFragmentTimestamp
            </summary>
        </member>
        <member name="F:Amazon.KinesisVideoArchivedMedia.HLSDisplayFragmentTimestamp.NEVER">
            <summary>
            Constant NEVER for HLSDisplayFragmentTimestamp
            </summary>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.HLSDisplayFragmentTimestamp.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.HLSDisplayFragmentTimestamp.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.HLSDisplayFragmentTimestamp.op_Implicit(System.String)~Amazon.KinesisVideoArchivedMedia.HLSDisplayFragmentTimestamp">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.KinesisVideoArchivedMedia.HLSFragmentSelectorType">
            <summary>
            Constants used for properties of type HLSFragmentSelectorType.
            </summary>
        </member>
        <member name="F:Amazon.KinesisVideoArchivedMedia.HLSFragmentSelectorType.PRODUCER_TIMESTAMP">
            <summary>
            Constant PRODUCER_TIMESTAMP for HLSFragmentSelectorType
            </summary>
        </member>
        <member name="F:Amazon.KinesisVideoArchivedMedia.HLSFragmentSelectorType.SERVER_TIMESTAMP">
            <summary>
            Constant SERVER_TIMESTAMP for HLSFragmentSelectorType
            </summary>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.HLSFragmentSelectorType.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.HLSFragmentSelectorType.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.HLSFragmentSelectorType.op_Implicit(System.String)~Amazon.KinesisVideoArchivedMedia.HLSFragmentSelectorType">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.KinesisVideoArchivedMedia.HLSPlaybackMode">
            <summary>
            Constants used for properties of type HLSPlaybackMode.
            </summary>
        </member>
        <member name="F:Amazon.KinesisVideoArchivedMedia.HLSPlaybackMode.LIVE">
            <summary>
            Constant LIVE for HLSPlaybackMode
            </summary>
        </member>
        <member name="F:Amazon.KinesisVideoArchivedMedia.HLSPlaybackMode.LIVE_REPLAY">
            <summary>
            Constant LIVE_REPLAY for HLSPlaybackMode
            </summary>
        </member>
        <member name="F:Amazon.KinesisVideoArchivedMedia.HLSPlaybackMode.ON_DEMAND">
            <summary>
            Constant ON_DEMAND for HLSPlaybackMode
            </summary>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.HLSPlaybackMode.#ctor(System.String)">
            <summary>
            This constant constructor does not need to be called if the constant
            you are attempting to use is already defined as a static instance of 
            this class.
            This constructor should be used to construct constants that are not
            defined as statics, for instance if attempting to use a feature that is
            newer than the current version of the SDK.
            </summary>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.HLSPlaybackMode.FindValue(System.String)">
            <summary>
            Finds the constant for the unique value.
            </summary>
            <param name="value">The unique value for the constant</param>
            <returns>The constant for the unique value</returns>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.HLSPlaybackMode.op_Implicit(System.String)~Amazon.KinesisVideoArchivedMedia.HLSPlaybackMode">
            <summary>
            Utility method to convert strings to the constant class.
            </summary>
            <param name="value">The string value to convert to the constant class.</param>
            <returns></returns>
        </member>
        <member name="T:Amazon.KinesisVideoArchivedMedia.IAmazonKinesisVideoArchivedMedia">
             <summary>
             Interface for accessing KinesisVideoArchivedMedia
            
             
             </summary>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.IAmazonKinesisVideoArchivedMedia.GetDASHStreamingSessionURLAsync(Amazon.KinesisVideoArchivedMedia.Model.GetDASHStreamingSessionURLRequest,System.Threading.CancellationToken)">
            <summary>
            Retrieves an MPEG Dynamic Adaptive Streaming over HTTP (DASH) URL for the stream.
            You can then open the URL in a media player to view the stream contents.
            
             
            <para>
            Both the <code>StreamName</code> and the <code>StreamARN</code> parameters are optional,
            but you must specify either the <code>StreamName</code> or the <code>StreamARN</code>
            when invoking this API operation.
            </para>
             
            <para>
            An Amazon Kinesis video stream has the following requirements for providing data through
            MPEG-DASH:
            </para>
             <ul> <li> 
            <para>
            The media must contain h.264 or h.265 encoded video and, optionally, AAC or G.711
            encoded audio. Specifically, the codec id of track 1 should be <code>V_MPEG/ISO/AVC</code>
            (for h.264) or V_MPEGH/ISO/HEVC (for H.265). Optionally, the codec id of track 2 should
            be <code>A_AAC</code> (for AAC) or A_MS/ACM (for G.711).
            </para>
             </li> <li> 
            <para>
            Data retention must be greater than 0.
            </para>
             </li> <li> 
            <para>
            The video track of each fragment must contain codec private data in the Advanced Video
            Coding (AVC) for H.264 format and HEVC for H.265 format. For more information, see
            <a href="https://www.iso.org/standard/55980.html">MPEG-4 specification ISO/IEC 14496-15</a>.
            For information about adapting stream data to a given format, see <a href="http://docs.aws.amazon.com/kinesisvideostreams/latest/dg/producer-reference-nal.html">NAL
            Adaptation Flags</a>.
            </para>
             </li> <li> 
            <para>
            The audio track (if present) of each fragment must contain codec private data in the
            AAC format (<a href="https://www.iso.org/standard/43345.html">AAC specification ISO/IEC
            13818-7</a>) or the <a href="http://www-mmsp.ece.mcgill.ca/Documents/AudioFormats/WAVE/WAVE.html">MS
            Wave format</a>.
            </para>
             </li> </ul> 
            <para>
            The following procedure shows how to use MPEG-DASH with Kinesis Video Streams:
            </para>
             <ol> <li> 
            <para>
            Get an endpoint using <a href="http://docs.aws.amazon.com/kinesisvideostreams/latest/dg/API_GetDataEndpoint.html">GetDataEndpoint</a>,
            specifying <code>GET_DASH_STREAMING_SESSION_URL</code> for the <code>APIName</code>
            parameter.
            </para>
             </li> <li> 
            <para>
            Retrieve the MPEG-DASH URL using <code>GetDASHStreamingSessionURL</code>. Kinesis
            Video Streams creates an MPEG-DASH streaming session to be used for accessing content
            in a stream using the MPEG-DASH protocol. <code>GetDASHStreamingSessionURL</code>
            returns an authenticated URL (that includes an encrypted session token) for the session's
            MPEG-DASH <i>manifest</i> (the root resource needed for streaming with MPEG-DASH).
            </para>
             <note> 
            <para>
            Don't share or store this token where an unauthorized entity could access it. The
            token provides access to the content of the stream. Safeguard the token with the same
            measures that you would use with your AWS credentials.
            </para>
             </note> 
            <para>
            The media that is made available through the manifest consists only of the requested
            stream, time range, and format. No other media data (such as frames outside the requested
            window or alternate bitrates) is made available.
            </para>
             </li> <li> 
            <para>
            Provide the URL (containing the encrypted session token) for the MPEG-DASH manifest
            to a media player that supports the MPEG-DASH protocol. Kinesis Video Streams makes
            the initialization fragment, and media fragments available through the manifest URL.
            The initialization fragment contains the codec private data for the stream, and other
            data needed to set up the video or audio decoder and renderer. The media fragments
            contain encoded video frames or encoded audio samples.
            </para>
             </li> <li> 
            <para>
            The media player receives the authenticated URL and requests stream metadata and media
            data normally. When the media player requests data, it calls the following actions:
            </para>
             <ul> <li> 
            <para>
             <b>GetDASHManifest:</b> Retrieves an MPEG DASH manifest, which contains the metadata
            for the media that you want to playback.
            </para>
             </li> <li> 
            <para>
             <b>GetMP4InitFragment:</b> Retrieves the MP4 initialization fragment. The media player
            typically loads the initialization fragment before loading any media fragments. This
            fragment contains the "<code>fytp</code>" and "<code>moov</code>" MP4 atoms, and the
            child atoms that are needed to initialize the media player decoder.
            </para>
             
            <para>
            The initialization fragment does not correspond to a fragment in a Kinesis video stream.
            It contains only the codec private data for the stream and respective track, which
            the media player needs to decode the media frames.
            </para>
             </li> <li> 
            <para>
             <b>GetMP4MediaFragment:</b> Retrieves MP4 media fragments. These fragments contain
            the "<code>moof</code>" and "<code>mdat</code>" MP4 atoms and their child atoms, containing
            the encoded fragment's media frames and their timestamps. 
            </para>
             <note> 
            <para>
            After the first media fragment is made available in a streaming session, any fragments
            that don't contain the same codec private data cause an error to be returned when
            those different media fragments are loaded. Therefore, the codec private data should
            not change between fragments in a session. This also means that the session fails
            if the fragments in a stream change from having only video to having both audio and
            video.
            </para>
             </note> 
            <para>
            Data retrieved with this action is billable. See <a href="https://aws.amazon.com/kinesis/video-streams/pricing/">Pricing</a>
            for details.
            </para>
             </li> </ul> </li> </ol> <note> 
            <para>
            The following restrictions apply to MPEG-DASH sessions:
            </para>
             <ul> <li> 
            <para>
            A streaming session URL should not be shared between players. The service might throttle
            a session if multiple media players are sharing it. For connection limits, see <a
            href="http://docs.aws.amazon.com/kinesisvideostreams/latest/dg/limits.html">Kinesis
            Video Streams Limits</a>.
            </para>
             </li> <li> 
            <para>
            A Kinesis video stream can have a maximum of ten active MPEG-DASH streaming sessions.
            If a new session is created when the maximum number of sessions is already active,
            the oldest (earliest created) session is closed. The number of active <code>GetMedia</code>
            connections on a Kinesis video stream does not count against this limit, and the number
            of active MPEG-DASH sessions does not count against the active <code>GetMedia</code>
            connection limit.
            </para>
             <note> 
            <para>
            The maximum limits for active HLS and MPEG-DASH streaming sessions are independent
            of each other. 
            </para>
             </note> </li> </ul> </note> 
            <para>
            You can monitor the amount of data that the media player consumes by monitoring the
            <code>GetMP4MediaFragment.OutgoingBytes</code> Amazon CloudWatch metric. For information
            about using CloudWatch to monitor Kinesis Video Streams, see <a href="http://docs.aws.amazon.com/kinesisvideostreams/latest/dg/monitoring.html">Monitoring
            Kinesis Video Streams</a>. For pricing information, see <a href="https://aws.amazon.com/kinesis/video-streams/pricing/">Amazon
            Kinesis Video Streams Pricing</a> and <a href="https://aws.amazon.com/pricing/">AWS
            Pricing</a>. Charges for both HLS sessions and outgoing AWS data apply.
            </para>
             
            <para>
            For more information about HLS, see <a href="https://developer.apple.com/streaming/">HTTP
            Live Streaming</a> on the <a href="https://developer.apple.com">Apple Developer site</a>.
            </para>
             <important> 
            <para>
            If an error is thrown after invoking a Kinesis Video Streams archived media API, in
            addition to the HTTP status code and the response body, it includes the following
            pieces of information: 
            </para>
             <ul> <li> 
            <para>
             <code>x-amz-ErrorType</code> HTTP header – contains a more specific error type in
            addition to what the HTTP status code provides. 
            </para>
             </li> <li> 
            <para>
             <code>x-amz-RequestId</code> HTTP header – if you want to report an issue to AWS,
            the support team can better diagnose the problem if given the Request Id.
            </para>
             </li> </ul> 
            <para>
            Both the HTTP status code and the ErrorType header can be utilized to make programmatic
            decisions about whether errors are retry-able and under what conditions, as well as
            provide information on what actions the client programmer might need to take in order
            to successfully try again.
            </para>
             
            <para>
            For more information, see the <b>Errors</b> section at the bottom of this topic, as
            well as <a href="https://docs.aws.amazon.com/kinesisvideostreams/latest/dg/CommonErrors.html">Common
            Errors</a>. 
            </para>
             </important>
            </summary>
            <param name="request">Container for the necessary parameters to execute the GetDASHStreamingSessionURL service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the GetDASHStreamingSessionURL service method, as returned by KinesisVideoArchivedMedia.</returns>
            <exception cref="T:Amazon.KinesisVideoArchivedMedia.Model.ClientLimitExceededException">
            Kinesis Video Streams has throttled the request because you have exceeded the limit
            of allowed client calls. Try making the call later.
            </exception>
            <exception cref="T:Amazon.KinesisVideoArchivedMedia.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            </exception>
            <exception cref="T:Amazon.KinesisVideoArchivedMedia.Model.InvalidCodecPrivateDataException">
            The codec private data in at least one of the tracks of the video stream is not valid
            for this operation.
            </exception>
            <exception cref="T:Amazon.KinesisVideoArchivedMedia.Model.MissingCodecPrivateDataException">
            No codec private data was found in at least one of tracks of the video stream.
            </exception>
            <exception cref="T:Amazon.KinesisVideoArchivedMedia.Model.NoDataRetentionException">
            A streaming session was requested for a stream that does not retain data (that is,
            has a <code>DataRetentionInHours</code> of 0).
            </exception>
            <exception cref="T:Amazon.KinesisVideoArchivedMedia.Model.NotAuthorizedException">
            Status Code: 403, The caller is not authorized to perform an operation on the given
            stream, or the token has expired.
            </exception>
            <exception cref="T:Amazon.KinesisVideoArchivedMedia.Model.ResourceNotFoundException">
            <code>GetMedia</code> throws this error when Kinesis Video Streams can't find the
            stream that you specified.
            
             
            <para>
             <code>GetHLSStreamingSessionURL</code> and <code>GetDASHStreamingSessionURL</code>
            throw this error if a session with a <code>PlaybackMode</code> of <code>ON_DEMAND</code>
            or <code>LIVE_REPLAY</code>is requested for a stream that has no fragments within
            the requested time range, or if a session with a <code>PlaybackMode</code> of <code>LIVE</code>
            is requested for a stream that has no fragments within the last 30 seconds.
            </para>
            </exception>
            <exception cref="T:Amazon.KinesisVideoArchivedMedia.Model.UnsupportedStreamMediaTypeException">
            The type of the media (for example, h.264 or h.265 video or ACC or G.711 audio) could
            not be determined from the codec IDs of the tracks in the first fragment for a playback
            session. The codec ID for track 1 should be <code>V_MPEG/ISO/AVC</code> and, optionally,
            the codec ID for track 2 should be <code>A_AAC</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-video-archived-media-2017-09-30/GetDASHStreamingSessionURL">REST API Reference for GetDASHStreamingSessionURL Operation</seealso>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.IAmazonKinesisVideoArchivedMedia.GetHLSStreamingSessionURLAsync(Amazon.KinesisVideoArchivedMedia.Model.GetHLSStreamingSessionURLRequest,System.Threading.CancellationToken)">
            <summary>
            Retrieves an HTTP Live Streaming (HLS) URL for the stream. You can then open the URL
            in a browser or media player to view the stream contents.
            
             
            <para>
            Both the <code>StreamName</code> and the <code>StreamARN</code> parameters are optional,
            but you must specify either the <code>StreamName</code> or the <code>StreamARN</code>
            when invoking this API operation.
            </para>
             
            <para>
            An Amazon Kinesis video stream has the following requirements for providing data through
            HLS:
            </para>
             <ul> <li> 
            <para>
            The media must contain h.264 or h.265 encoded video and, optionally, AAC encoded audio.
            Specifically, the codec id of track 1 should be <code>V_MPEG/ISO/AVC</code> (for h.264)
            or <code>V_MPEG/ISO/HEVC</code> (for h.265). Optionally, the codec id of track 2 should
            be <code>A_AAC</code>.
            </para>
             </li> <li> 
            <para>
            Data retention must be greater than 0.
            </para>
             </li> <li> 
            <para>
            The video track of each fragment must contain codec private data in the Advanced Video
            Coding (AVC) for H.264 format or HEVC for H.265 format (<a href="https://www.iso.org/standard/55980.html">MPEG-4
            specification ISO/IEC 14496-15</a>). For information about adapting stream data to
            a given format, see <a href="http://docs.aws.amazon.com/kinesisvideostreams/latest/dg/producer-reference-nal.html">NAL
            Adaptation Flags</a>.
            </para>
             </li> <li> 
            <para>
            The audio track (if present) of each fragment must contain codec private data in the
            AAC format (<a href="https://www.iso.org/standard/43345.html">AAC specification ISO/IEC
            13818-7</a>).
            </para>
             </li> </ul> 
            <para>
            Kinesis Video Streams HLS sessions contain fragments in the fragmented MPEG-4 form
            (also called fMP4 or CMAF) or the MPEG-2 form (also called TS chunks, which the HLS
            specification also supports). For more information about HLS fragment types, see the
            <a href="https://tools.ietf.org/html/draft-pantos-http-live-streaming-23">HLS specification</a>.
            </para>
             
            <para>
            The following procedure shows how to use HLS with Kinesis Video Streams:
            </para>
             <ol> <li> 
            <para>
            Get an endpoint using <a href="http://docs.aws.amazon.com/kinesisvideostreams/latest/dg/API_GetDataEndpoint.html">GetDataEndpoint</a>,
            specifying <code>GET_HLS_STREAMING_SESSION_URL</code> for the <code>APIName</code>
            parameter.
            </para>
             </li> <li> 
            <para>
            Retrieve the HLS URL using <code>GetHLSStreamingSessionURL</code>. Kinesis Video Streams
            creates an HLS streaming session to be used for accessing content in a stream using
            the HLS protocol. <code>GetHLSStreamingSessionURL</code> returns an authenticated
            URL (that includes an encrypted session token) for the session's HLS <i>master playlist</i>
            (the root resource needed for streaming with HLS).
            </para>
             <note> 
            <para>
            Don't share or store this token where an unauthorized entity could access it. The
            token provides access to the content of the stream. Safeguard the token with the same
            measures that you would use with your AWS credentials.
            </para>
             </note> 
            <para>
            The media that is made available through the playlist consists only of the requested
            stream, time range, and format. No other media data (such as frames outside the requested
            window or alternate bitrates) is made available.
            </para>
             </li> <li> 
            <para>
            Provide the URL (containing the encrypted session token) for the HLS master playlist
            to a media player that supports the HLS protocol. Kinesis Video Streams makes the
            HLS media playlist, initialization fragment, and media fragments available through
            the master playlist URL. The initialization fragment contains the codec private data
            for the stream, and other data needed to set up the video or audio decoder and renderer.
            The media fragments contain H.264-encoded video frames or AAC-encoded audio samples.
            </para>
             </li> <li> 
            <para>
            The media player receives the authenticated URL and requests stream metadata and media
            data normally. When the media player requests data, it calls the following actions:
            </para>
             <ul> <li> 
            <para>
             <b>GetHLSMasterPlaylist:</b> Retrieves an HLS master playlist, which contains a URL
            for the <code>GetHLSMediaPlaylist</code> action for each track, and additional metadata
            for the media player, including estimated bitrate and resolution.
            </para>
             </li> <li> 
            <para>
             <b>GetHLSMediaPlaylist:</b> Retrieves an HLS media playlist, which contains a URL
            to access the MP4 initialization fragment with the <code>GetMP4InitFragment</code>
            action, and URLs to access the MP4 media fragments with the <code>GetMP4MediaFragment</code>
            actions. The HLS media playlist also contains metadata about the stream that the player
            needs to play it, such as whether the <code>PlaybackMode</code> is <code>LIVE</code>
            or <code>ON_DEMAND</code>. The HLS media playlist is typically static for sessions
            with a <code>PlaybackType</code> of <code>ON_DEMAND</code>. The HLS media playlist
            is continually updated with new fragments for sessions with a <code>PlaybackType</code>
            of <code>LIVE</code>. There is a distinct HLS media playlist for the video track and
            the audio track (if applicable) that contains MP4 media URLs for the specific track.
            
            </para>
             </li> <li> 
            <para>
             <b>GetMP4InitFragment:</b> Retrieves the MP4 initialization fragment. The media player
            typically loads the initialization fragment before loading any media fragments. This
            fragment contains the "<code>fytp</code>" and "<code>moov</code>" MP4 atoms, and the
            child atoms that are needed to initialize the media player decoder.
            </para>
             
            <para>
            The initialization fragment does not correspond to a fragment in a Kinesis video stream.
            It contains only the codec private data for the stream and respective track, which
            the media player needs to decode the media frames.
            </para>
             </li> <li> 
            <para>
             <b>GetMP4MediaFragment:</b> Retrieves MP4 media fragments. These fragments contain
            the "<code>moof</code>" and "<code>mdat</code>" MP4 atoms and their child atoms, containing
            the encoded fragment's media frames and their timestamps. 
            </para>
             <note> 
            <para>
            After the first media fragment is made available in a streaming session, any fragments
            that don't contain the same codec private data cause an error to be returned when
            those different media fragments are loaded. Therefore, the codec private data should
            not change between fragments in a session. This also means that the session fails
            if the fragments in a stream change from having only video to having both audio and
            video.
            </para>
             </note> 
            <para>
            Data retrieved with this action is billable. See <a href="https://aws.amazon.com/kinesis/video-streams/pricing/">Pricing</a>
            for details.
            </para>
             </li> <li> 
            <para>
             <b>GetTSFragment:</b> Retrieves MPEG TS fragments containing both initialization
            and media data for all tracks in the stream.
            </para>
             <note> 
            <para>
            If the <code>ContainerFormat</code> is <code>MPEG_TS</code>, this API is used instead
            of <code>GetMP4InitFragment</code> and <code>GetMP4MediaFragment</code> to retrieve
            stream media.
            </para>
             </note> 
            <para>
            Data retrieved with this action is billable. For more information, see <a href="https://aws.amazon.com/kinesis/video-streams/pricing/">Kinesis
            Video Streams pricing</a>.
            </para>
             </li> </ul> </li> </ol> <note> 
            <para>
            The following restrictions apply to HLS sessions:
            </para>
             <ul> <li> 
            <para>
            A streaming session URL should not be shared between players. The service might throttle
            a session if multiple media players are sharing it. For connection limits, see <a
            href="http://docs.aws.amazon.com/kinesisvideostreams/latest/dg/limits.html">Kinesis
            Video Streams Limits</a>.
            </para>
             </li> <li> 
            <para>
            A Kinesis video stream can have a maximum of ten active HLS streaming sessions. If
            a new session is created when the maximum number of sessions is already active, the
            oldest (earliest created) session is closed. The number of active <code>GetMedia</code>
            connections on a Kinesis video stream does not count against this limit, and the number
            of active HLS sessions does not count against the active <code>GetMedia</code> connection
            limit.
            </para>
             <note> 
            <para>
            The maximum limits for active HLS and MPEG-DASH streaming sessions are independent
            of each other.
            </para>
             </note> </li> </ul> </note> 
            <para>
            You can monitor the amount of data that the media player consumes by monitoring the
            <code>GetMP4MediaFragment.OutgoingBytes</code> Amazon CloudWatch metric. For information
            about using CloudWatch to monitor Kinesis Video Streams, see <a href="http://docs.aws.amazon.com/kinesisvideostreams/latest/dg/monitoring.html">Monitoring
            Kinesis Video Streams</a>. For pricing information, see <a href="https://aws.amazon.com/kinesis/video-streams/pricing/">Amazon
            Kinesis Video Streams Pricing</a> and <a href="https://aws.amazon.com/pricing/">AWS
            Pricing</a>. Charges for both HLS sessions and outgoing AWS data apply.
            </para>
             
            <para>
            For more information about HLS, see <a href="https://developer.apple.com/streaming/">HTTP
            Live Streaming</a> on the <a href="https://developer.apple.com">Apple Developer site</a>.
            </para>
             <important> 
            <para>
            If an error is thrown after invoking a Kinesis Video Streams archived media API, in
            addition to the HTTP status code and the response body, it includes the following
            pieces of information: 
            </para>
             <ul> <li> 
            <para>
             <code>x-amz-ErrorType</code> HTTP header – contains a more specific error type in
            addition to what the HTTP status code provides. 
            </para>
             </li> <li> 
            <para>
             <code>x-amz-RequestId</code> HTTP header – if you want to report an issue to AWS,
            the support team can better diagnose the problem if given the Request Id.
            </para>
             </li> </ul> 
            <para>
            Both the HTTP status code and the ErrorType header can be utilized to make programmatic
            decisions about whether errors are retry-able and under what conditions, as well as
            provide information on what actions the client programmer might need to take in order
            to successfully try again.
            </para>
             
            <para>
            For more information, see the <b>Errors</b> section at the bottom of this topic, as
            well as <a href="https://docs.aws.amazon.com/kinesisvideostreams/latest/dg/CommonErrors.html">Common
            Errors</a>. 
            </para>
             </important>
            </summary>
            <param name="request">Container for the necessary parameters to execute the GetHLSStreamingSessionURL service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the GetHLSStreamingSessionURL service method, as returned by KinesisVideoArchivedMedia.</returns>
            <exception cref="T:Amazon.KinesisVideoArchivedMedia.Model.ClientLimitExceededException">
            Kinesis Video Streams has throttled the request because you have exceeded the limit
            of allowed client calls. Try making the call later.
            </exception>
            <exception cref="T:Amazon.KinesisVideoArchivedMedia.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            </exception>
            <exception cref="T:Amazon.KinesisVideoArchivedMedia.Model.InvalidCodecPrivateDataException">
            The codec private data in at least one of the tracks of the video stream is not valid
            for this operation.
            </exception>
            <exception cref="T:Amazon.KinesisVideoArchivedMedia.Model.MissingCodecPrivateDataException">
            No codec private data was found in at least one of tracks of the video stream.
            </exception>
            <exception cref="T:Amazon.KinesisVideoArchivedMedia.Model.NoDataRetentionException">
            A streaming session was requested for a stream that does not retain data (that is,
            has a <code>DataRetentionInHours</code> of 0).
            </exception>
            <exception cref="T:Amazon.KinesisVideoArchivedMedia.Model.NotAuthorizedException">
            Status Code: 403, The caller is not authorized to perform an operation on the given
            stream, or the token has expired.
            </exception>
            <exception cref="T:Amazon.KinesisVideoArchivedMedia.Model.ResourceNotFoundException">
            <code>GetMedia</code> throws this error when Kinesis Video Streams can't find the
            stream that you specified.
            
             
            <para>
             <code>GetHLSStreamingSessionURL</code> and <code>GetDASHStreamingSessionURL</code>
            throw this error if a session with a <code>PlaybackMode</code> of <code>ON_DEMAND</code>
            or <code>LIVE_REPLAY</code>is requested for a stream that has no fragments within
            the requested time range, or if a session with a <code>PlaybackMode</code> of <code>LIVE</code>
            is requested for a stream that has no fragments within the last 30 seconds.
            </para>
            </exception>
            <exception cref="T:Amazon.KinesisVideoArchivedMedia.Model.UnsupportedStreamMediaTypeException">
            The type of the media (for example, h.264 or h.265 video or ACC or G.711 audio) could
            not be determined from the codec IDs of the tracks in the first fragment for a playback
            session. The codec ID for track 1 should be <code>V_MPEG/ISO/AVC</code> and, optionally,
            the codec ID for track 2 should be <code>A_AAC</code>.
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-video-archived-media-2017-09-30/GetHLSStreamingSessionURL">REST API Reference for GetHLSStreamingSessionURL Operation</seealso>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.IAmazonKinesisVideoArchivedMedia.GetMediaForFragmentListAsync(Amazon.KinesisVideoArchivedMedia.Model.GetMediaForFragmentListRequest,System.Threading.CancellationToken)">
            <summary>
            Gets media for a list of fragments (specified by fragment number) from the archived
            data in an Amazon Kinesis video stream.
            
             <note> 
            <para>
            You must first call the <code>GetDataEndpoint</code> API to get an endpoint. Then
            send the <code>GetMediaForFragmentList</code> requests to this endpoint using the
            <a href="https://docs.aws.amazon.com/cli/latest/reference/">--endpoint-url parameter</a>.
            
            </para>
             </note> 
            <para>
            The following limits apply when using the <code>GetMediaForFragmentList</code> API:
            </para>
             <ul> <li> 
            <para>
            A client can call <code>GetMediaForFragmentList</code> up to five times per second
            per stream. 
            </para>
             </li> <li> 
            <para>
            Kinesis Video Streams sends media data at a rate of up to 25 megabytes per second
            (or 200 megabits per second) during a <code>GetMediaForFragmentList</code> session.
            
            </para>
             </li> </ul> <important> 
            <para>
            If an error is thrown after invoking a Kinesis Video Streams archived media API, in
            addition to the HTTP status code and the response body, it includes the following
            pieces of information: 
            </para>
             <ul> <li> 
            <para>
             <code>x-amz-ErrorType</code> HTTP header – contains a more specific error type in
            addition to what the HTTP status code provides. 
            </para>
             </li> <li> 
            <para>
             <code>x-amz-RequestId</code> HTTP header – if you want to report an issue to AWS,
            the support team can better diagnose the problem if given the Request Id.
            </para>
             </li> </ul> 
            <para>
            Both the HTTP status code and the ErrorType header can be utilized to make programmatic
            decisions about whether errors are retry-able and under what conditions, as well as
            provide information on what actions the client programmer might need to take in order
            to successfully try again.
            </para>
             
            <para>
            For more information, see the <b>Errors</b> section at the bottom of this topic, as
            well as <a href="https://docs.aws.amazon.com/kinesisvideostreams/latest/dg/CommonErrors.html">Common
            Errors</a>. 
            </para>
             </important>
            </summary>
            <param name="request">Container for the necessary parameters to execute the GetMediaForFragmentList service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the GetMediaForFragmentList service method, as returned by KinesisVideoArchivedMedia.</returns>
            <exception cref="T:Amazon.KinesisVideoArchivedMedia.Model.ClientLimitExceededException">
            Kinesis Video Streams has throttled the request because you have exceeded the limit
            of allowed client calls. Try making the call later.
            </exception>
            <exception cref="T:Amazon.KinesisVideoArchivedMedia.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            </exception>
            <exception cref="T:Amazon.KinesisVideoArchivedMedia.Model.NotAuthorizedException">
            Status Code: 403, The caller is not authorized to perform an operation on the given
            stream, or the token has expired.
            </exception>
            <exception cref="T:Amazon.KinesisVideoArchivedMedia.Model.ResourceNotFoundException">
            <code>GetMedia</code> throws this error when Kinesis Video Streams can't find the
            stream that you specified.
            
             
            <para>
             <code>GetHLSStreamingSessionURL</code> and <code>GetDASHStreamingSessionURL</code>
            throw this error if a session with a <code>PlaybackMode</code> of <code>ON_DEMAND</code>
            or <code>LIVE_REPLAY</code>is requested for a stream that has no fragments within
            the requested time range, or if a session with a <code>PlaybackMode</code> of <code>LIVE</code>
            is requested for a stream that has no fragments within the last 30 seconds.
            </para>
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-video-archived-media-2017-09-30/GetMediaForFragmentList">REST API Reference for GetMediaForFragmentList Operation</seealso>
        </member>
        <member name="M:Amazon.KinesisVideoArchivedMedia.IAmazonKinesisVideoArchivedMedia.ListFragmentsAsync(Amazon.KinesisVideoArchivedMedia.Model.ListFragmentsRequest,System.Threading.CancellationToken)">
            <summary>
            Returns a list of <a>Fragment</a> objects from the specified stream and timestamp
            range within the archived data.
            
             
            <para>
            Listing fragments is eventually consistent. This means that even if the producer receives
            an acknowledgment that a fragment is persisted, the result might not be returned immediately
            from a request to <code>ListFragments</code>. However, results are typically available
            in less than one second.
            </para>
             <note> 
            <para>
            You must first call the <code>GetDataEndpoint</code> API to get an endpoint. Then
            send the <code>ListFragments</code> requests to this endpoint using the <a href="https://docs.aws.amazon.com/cli/latest/reference/">--endpoint-url
            parameter</a>. 
            </para>
             </note> <important> 
            <para>
            If an error is thrown after invoking a Kinesis Video Streams archived media API, in
            addition to the HTTP status code and the response body, it includes the following
            pieces of information: 
            </para>
             <ul> <li> 
            <para>
             <code>x-amz-ErrorType</code> HTTP header – contains a more specific error type in
            addition to what the HTTP status code provides. 
            </para>
             </li> <li> 
            <para>
             <code>x-amz-RequestId</code> HTTP header – if you want to report an issue to AWS,
            the support team can better diagnose the problem if given the Request Id.
            </para>
             </li> </ul> 
            <para>
            Both the HTTP status code and the ErrorType header can be utilized to make programmatic
            decisions about whether errors are retry-able and under what conditions, as well as
            provide information on what actions the client programmer might need to take in order
            to successfully try again.
            </para>
             
            <para>
            For more information, see the <b>Errors</b> section at the bottom of this topic, as
            well as <a href="https://docs.aws.amazon.com/kinesisvideostreams/latest/dg/CommonErrors.html">Common
            Errors</a>. 
            </para>
             </important>
            </summary>
            <param name="request">Container for the necessary parameters to execute the ListFragments service method.</param>
            <param name="cancellationToken">
                A cancellation token that can be used by other objects or threads to receive notice of cancellation.
            </param>
            
            <returns>The response from the ListFragments service method, as returned by KinesisVideoArchivedMedia.</returns>
            <exception cref="T:Amazon.KinesisVideoArchivedMedia.Model.ClientLimitExceededException">
            Kinesis Video Streams has throttled the request because you have exceeded the limit
            of allowed client calls. Try making the call later.
            </exception>
            <exception cref="T:Amazon.KinesisVideoArchivedMedia.Model.InvalidArgumentException">
            A specified parameter exceeds its restrictions, is not supported, or can't be used.
            </exception>
            <exception cref="T:Amazon.KinesisVideoArchivedMedia.Model.NotAuthorizedException">
            Status Code: 403, The caller is not authorized to perform an operation on the given
            stream, or the token has expired.
            </exception>
            <exception cref="T:Amazon.KinesisVideoArchivedMedia.Model.ResourceNotFoundException">
            <code>GetMedia</code> throws this error when Kinesis Video Streams can't find the
            stream that you specified.
            
             
            <para>
             <code>GetHLSStreamingSessionURL</code> and <code>GetDASHStreamingSessionURL</code>
            throw this error if a session with a <code>PlaybackMode</code> of <code>ON_DEMAND</code>
            or <code>LIVE_REPLAY</code>is requested for a stream that has no fragments within
            the requested time range, or if a session with a <code>PlaybackMode</code> of <code>LIVE</code>
            is requested for a stream that has no fragments within the last 30 seconds.
            </para>
            </exception>
            <seealso href="http://docs.aws.amazon.com/goto/WebAPI/kinesis-video-archived-media-2017-09-30/ListFragments">REST API Reference for ListFragments Operation</seealso>
        </member>
    </members>
</doc>
